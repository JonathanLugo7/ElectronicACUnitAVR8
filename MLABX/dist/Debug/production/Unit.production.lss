
dist/Debug/production/Unit.production.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00002b26  00002bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  008001bc  008001bc  00002c76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00002d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b60  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001def  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dd6  00000000  00000000  0000ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  0000d8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001603  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b43  00000000  00000000  0000f66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000121ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__ctors_end>
       4:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
       8:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
       c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      10:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      14:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      18:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      1c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      20:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      24:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_9>
      28:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      2c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      30:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      34:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      38:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      3c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      40:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      44:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      48:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      4c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      50:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      54:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      58:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      5c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      60:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      64:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      68:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      6c:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      70:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      74:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      78:	0c 94 19 01 	jmp	0x232	; 0x232 <__bad_interrupt>
      7c:	a4 0c       	add	r10, r4
      7e:	9f 0c       	add	r9, r15
      80:	ae 0c       	add	r10, r14
      82:	a9 0c       	add	r10, r9
      84:	9a 0c       	add	r9, r10
      86:	95 0c       	add	r9, r5
      88:	8f 0c       	add	r8, r15
      8a:	17 0c       	add	r1, r7
      8c:	89 0c       	add	r8, r9
      8e:	83 0c       	add	r8, r3
      90:	7d 0c       	add	r7, r13
      92:	17 0c       	add	r1, r7
      94:	78 0c       	add	r7, r8
      96:	73 0c       	add	r7, r3
      98:	13 0c       	add	r1, r3
      9a:	08 00       	.word	0x0008	; ????
      9c:	00 00       	nop
      9e:	be 92       	st	-X, r11
      a0:	24 49       	sbci	r18, 0x94	; 148
      a2:	12 3e       	cpi	r17, 0xE2	; 226
      a4:	ab aa       	std	Y+51, r10	; 0x33
      a6:	aa 2a       	or	r10, r26
      a8:	be cd       	rjmp	.-1156   	; 0xfffffc26 <__eeprom_end+0xff7efc26>
      aa:	cc cc       	rjmp	.-1640   	; 0xfffffa44 <__eeprom_end+0xff7efa44>
      ac:	4c 3e       	cpi	r20, 0xEC	; 236
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	be ab       	std	Y+54, r27	; 0x36
      b4:	aa aa       	std	Y+50, r10	; 0x32
      b6:	aa 3e       	cpi	r26, 0xEA	; 234
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	bf 00       	.word	0x00bf	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	00 08       	sbc	r0, r0
      c8:	41 78       	andi	r20, 0x81	; 129
      ca:	d3 bb       	out	0x13, r29	; 19
      cc:	43 87       	std	Z+11, r20	; 0x0b
      ce:	d1 13       	cpse	r29, r17
      d0:	3d 19       	sub	r19, r13
      d2:	0e 3c       	cpi	r16, 0xCE	; 206
      d4:	c3 bd       	out	0x23, r28	; 35
      d6:	42 82       	std	Z+2, r4	; 0x02
      d8:	ad 2b       	or	r26, r29
      da:	3e 68       	ori	r19, 0x8E	; 142
      dc:	ec 82       	std	Y+4, r14	; 0x04
      de:	76 be       	out	0x36, r7	; 54
      e0:	d9 8f       	std	Y+25, r29	; 0x19
      e2:	e1 a9       	ldd	r30, Z+49	; 0x31
      e4:	3e 4c       	sbci	r19, 0xCE	; 206
      e6:	80 ef       	ldi	r24, 0xF0	; 240
      e8:	ff be       	out	0x3f, r15	; 63
      ea:	01 c4       	rjmp	.+2050   	; 0x8ee <ADCReadAsVoltage+0x4c>
      ec:	ff 7f       	andi	r31, 0xFF	; 255
      ee:	3f 00       	.word	0x003f	; ????
      f0:	00 00       	nop
	...

000000f4 <__trampolines_end>:
      f4:	00 40       	sbci	r16, 0x00	; 0
      f6:	7a 10       	cpse	r7, r10
      f8:	f3 5a       	subi	r31, 0xA3	; 163
      fa:	00 a0       	ldd	r0, Z+32	; 0x20
      fc:	72 4e       	sbci	r23, 0xE2	; 226
      fe:	18 09       	sbc	r17, r8
     100:	00 10       	cpse	r0, r0
     102:	a5 d4       	rcall	.+2378   	; 0xa4e <KeypadTask+0xde>
     104:	e8 00       	.word	0x00e8	; ????
     106:	00 e8       	ldi	r16, 0x80	; 128
     108:	76 48       	sbci	r23, 0x86	; 134
     10a:	17 00       	.word	0x0017	; ????
     10c:	00 e4       	ldi	r16, 0x40	; 64
     10e:	0b 54       	subi	r16, 0x4B	; 75
     110:	02 00       	.word	0x0002	; ????
     112:	00 ca       	rjmp	.-3072   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     114:	9a 3b       	cpi	r25, 0xBA	; 186
     116:	00 00       	nop
     118:	00 e1       	ldi	r16, 0x10	; 16
     11a:	f5 05       	cpc	r31, r5
     11c:	00 00       	nop
     11e:	80 96       	adiw	r24, 0x20	; 32
     120:	98 00       	.word	0x0098	; ????
     122:	00 00       	nop
     124:	40 42       	sbci	r20, 0x20	; 32
     126:	0f 00       	.word	0x000f	; ????
     128:	00 00       	nop
     12a:	a0 86       	std	Z+8, r10	; 0x08
     12c:	01 00       	.word	0x0001	; ????
     12e:	00 00       	nop
     130:	10 27       	eor	r17, r16
     132:	00 00       	nop
     134:	00 00       	nop
     136:	e8 03       	fmulsu	r22, r16
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	64 00       	.word	0x0064	; ????
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	0a 00       	.word	0x000a	; ????
     144:	00 00       	nop
     146:	00 00       	nop
     148:	01 00       	.word	0x0001	; ????
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	2c 76       	andi	r18, 0x6C	; 108
     150:	d8 88       	ldd	r13, Y+16	; 0x10
     152:	dc 67       	ori	r29, 0x7C	; 124
     154:	4f 08       	sbc	r4, r15
     156:	23 df       	rcall	.-442    	; 0xffffff9e <__eeprom_end+0xff7eff9e>
     158:	c1 df       	rcall	.-126    	; 0xdc <__SREG__+0x9d>
     15a:	ae 59       	subi	r26, 0x9E	; 158
     15c:	e1 b1       	in	r30, 0x01	; 1
     15e:	b7 96       	adiw	r30, 0x27	; 39
     160:	e5 e3       	ldi	r30, 0x35	; 53
     162:	e4 53       	subi	r30, 0x34	; 52
     164:	c6 3a       	cpi	r28, 0xA6	; 166
     166:	e6 51       	subi	r30, 0x16	; 22
     168:	99 76       	andi	r25, 0x69	; 105
     16a:	96 e8       	ldi	r25, 0x86	; 134
     16c:	e6 c2       	rjmp	.+1484   	; 0x73a <LCDInit+0x2>
     16e:	84 26       	eor	r8, r20
     170:	eb 89       	ldd	r30, Y+19	; 0x13
     172:	8c 9b       	sbis	0x11, 4	; 17
     174:	62 ed       	ldi	r22, 0xD2	; 210
     176:	40 7c       	andi	r20, 0xC0	; 192
     178:	6f fc       	.word	0xfc6f	; ????
     17a:	ef bc       	out	0x2f, r14	; 47
     17c:	9c 9f       	mul	r25, r28
     17e:	40 f2       	brcs	.-112    	; 0x110 <__trampolines_end+0x1c>
     180:	ba a5       	ldd	r27, Y+42	; 0x2a
     182:	6f a5       	ldd	r22, Y+47	; 0x2f
     184:	f4 90       	lpm	r15, Z
     186:	05 5a       	subi	r16, 0xA5	; 165
     188:	2a f7       	brpl	.-54     	; 0x154 <__trampolines_end+0x60>
     18a:	5c 93       	st	X, r21
     18c:	6b 6c       	ori	r22, 0xCB	; 203
     18e:	f9 67       	ori	r31, 0x79	; 121
     190:	6d c1       	rjmp	.+730    	; 0x46c <ADMTask+0x3e>
     192:	1b fc       	.word	0xfc1b	; ????
     194:	e0 e4       	ldi	r30, 0x40	; 64
     196:	0d 47       	sbci	r16, 0x7D	; 125
     198:	fe f5       	brtc	.+126    	; 0x218 <__do_copy_data+0x14>
     19a:	20 e6       	ldi	r18, 0x60	; 96
     19c:	b5 00       	.word	0x00b5	; ????
     19e:	d0 ed       	ldi	r29, 0xD0	; 208
     1a0:	90 2e       	mov	r9, r16
     1a2:	03 00       	.word	0x0003	; ????
     1a4:	94 35       	cpi	r25, 0x54	; 84
     1a6:	77 05       	cpc	r23, r7
     1a8:	00 80       	ld	r0, Z
     1aa:	84 1e       	adc	r8, r20
     1ac:	08 00       	.word	0x0008	; ????
     1ae:	00 20       	and	r0, r0
     1b0:	4e 0a       	sbc	r4, r30
     1b2:	00 00       	nop
     1b4:	00 c8       	rjmp	.-4096   	; 0xfffff1b6 <__eeprom_end+0xff7ef1b6>
     1b6:	0c 33       	cpi	r16, 0x3C	; 60
     1b8:	33 33       	cpi	r19, 0x33	; 51
     1ba:	33 0f       	add	r19, r19
     1bc:	98 6e       	ori	r25, 0xE8	; 232
     1be:	12 83       	std	Z+2, r17	; 0x02
     1c0:	11 41       	sbci	r17, 0x11	; 17
     1c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1c4:	21 14       	cp	r2, r1
     1c6:	89 3b       	cpi	r24, 0xB9	; 185
     1c8:	e6 55       	subi	r30, 0x56	; 86
     1ca:	16 cf       	rjmp	.-468    	; 0xfffffff8 <__eeprom_end+0xff7efff8>
     1cc:	fe e6       	ldi	r31, 0x6E	; 110
     1ce:	db 18       	sub	r13, r11
     1d0:	d1 84       	ldd	r13, Z+9	; 0x09
     1d2:	4b 38       	cpi	r20, 0x8B	; 139
     1d4:	1b f7       	brvc	.-58     	; 0x19c <__trampolines_end+0xa8>
     1d6:	7c 1d       	adc	r23, r12
     1d8:	90 1d       	adc	r25, r0
     1da:	a4 bb       	out	0x14, r26	; 20
     1dc:	e4 24       	eor	r14, r4
     1de:	20 32       	cpi	r18, 0x20	; 32
     1e0:	84 72       	andi	r24, 0x24	; 36
     1e2:	5e 22       	and	r5, r30
     1e4:	81 00       	.word	0x0081	; ????
     1e6:	c9 f1       	breq	.+114    	; 0x25a <byte1+0xe>
     1e8:	24 ec       	ldi	r18, 0xC4	; 196
     1ea:	a1 e5       	ldi	r26, 0x51	; 81
     1ec:	3d 27       	eor	r19, r29

000001ee <g_lcdNumbers>:
     1ee:	7b 0a 57 1f 2e 3d 7d 0b 7f 3f                       {.W..=}..?

000001f8 <__ctors_end>:
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	d8 e0       	ldi	r29, 0x08	; 8
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61

00000204 <__do_copy_data>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	e6 e2       	ldi	r30, 0x26	; 38
     20c:	fb e2       	ldi	r31, 0x2B	; 43
     20e:	02 c0       	rjmp	.+4      	; 0x214 <__do_copy_data+0x10>
     210:	05 90       	lpm	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	ac 3b       	cpi	r26, 0xBC	; 188
     216:	b1 07       	cpc	r27, r17
     218:	d9 f7       	brne	.-10     	; 0x210 <__do_copy_data+0xc>

0000021a <__do_clear_bss>:
     21a:	22 e0       	ldi	r18, 0x02	; 2
     21c:	ac eb       	ldi	r26, 0xBC	; 188
     21e:	b1 e0       	ldi	r27, 0x01	; 1
     220:	01 c0       	rjmp	.+2      	; 0x224 <.do_clear_bss_start>

00000222 <.do_clear_bss_loop>:
     222:	1d 92       	st	X+, r1

00000224 <.do_clear_bss_start>:
     224:	ab 3b       	cpi	r26, 0xBB	; 187
     226:	b2 07       	cpc	r27, r18
     228:	e1 f7       	brne	.-8      	; 0x222 <.do_clear_bss_loop>
     22a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <main>
     22e:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <_exit>

00000232 <__bad_interrupt>:
     232:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000236 <LEDSendDataAsm>:
*** */

.global LEDSendDataAsm

LEDSendDataAsm:
            cli                              ;Disable interrupts
     236:	f8 94       	cli
            //Save working registers
            push  counter                    ;Save counter register (r20) in the stack
     238:	4f 93       	push	r20
            //
            // National MM5481N IC led driver serial data communication
            //
            cbi   LED_PORT, LED_DATA_ENABLE  ;DATA_ENABLE is active low signal
     23a:	5c 98       	cbi	0x0b, 4	; 11
            nop                              ;tDS: Set-up time
     23c:	00 00       	nop
            //
            //Send START condition. A start bit of logical '1'
            //
            sbi   LED_PORT, LED_DATA         ;DATA HIGH
     23e:	5e 9a       	sbi	0x0b, 6	; 11
            nop                              ;tDH: Data Hold time
     240:	00 00       	nop
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     242:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tH: Clock HIGH time (950nS)
     244:	43 d0       	rcall	.+134    	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     246:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tL: Clock low time (950nS)
     248:	41 d0       	rcall	.+130    	; 0x2cc <LEDDelay>
            //
            // First byte of (uint32_t ui32Data) in r22 (LSB)
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     24a:	48 e0       	ldi	r20, 0x08	; 8

0000024c <byte1>:
byte1:      sbrs  r22, BIT_POSITION          ;if (r22.bit0 == 1) skip else DATA = low
     24c:	60 ff       	sbrs	r22, 0
            cbi   LED_PORT, LED_DATA         ;Set DATA low. LED off
     24e:	5e 98       	cbi	0x0b, 6	; 11
            sbrc  r22, BIT_POSITION          ;if (r25.bit0 == 0) skip else DATA = HIGH
     250:	60 fd       	sbrc	r22, 0
            sbi   LED_PORT, LED_DATA         ;Set DATA HIGH. LED on
     252:	5e 9a       	sbi	0x0b, 6	; 11
            // Data LED1..LED4               ;2..9 CLB pulses
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     254:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     256:	3a d0       	rcall	.+116    	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     258:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     25a:	38 d0       	rcall	.+112    	; 0x2cc <LEDDelay>
            lsr   r22                        ;Shift r25 one bit right to ask for the next bit
     25c:	66 95       	lsr	r22
            dec   counter                    ;Decrement i (r20)
     25e:	4a 95       	dec	r20
            brne  byte1                      ;if (i == 0) break else continue
     260:	a9 f7       	brne	.-22     	; 0x24c <byte1>
            //
            // Second byte of (uint32_t ui32Data) in r23
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     262:	48 e0       	ldi	r20, 0x08	; 8

00000264 <byte2>:
byte2:      sbrs  r23, BIT_POSITION          ;if (r23.bit0 == 1) skip else DATA = low
     264:	70 ff       	sbrs	r23, 0
            cbi   LED_PORT, LED_DATA         ;Set DATA low. LED off
     266:	5e 98       	cbi	0x0b, 6	; 11
            sbrc  r23, BIT_POSITION          ;if (r24.bit0 == 0) skip else DATA = HIGH
     268:	70 fd       	sbrc	r23, 0
            sbi   LED_PORT, LED_DATA         ;Set DATA HIGH. LED on
     26a:	5e 9a       	sbi	0x0b, 6	; 11
            // Data LED5..LED8               ;10..17 CLB pulses
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     26c:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     26e:	2e d0       	rcall	.+92     	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     270:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     272:	2c d0       	rcall	.+88     	; 0x2cc <LEDDelay>
            lsr   r23                        ;Shift r23 one bit right to ask for the next bit
     274:	76 95       	lsr	r23
            dec   counter                    ;Decrement i (r20)
     276:	4a 95       	dec	r20
            brne  byte2                      ;if (i == 0) break else continue
     278:	a9 f7       	brne	.-22     	; 0x264 <byte2>
            //
            //Third byte of (uint32_t ui32Data) in r24
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     27a:	48 e0       	ldi	r20, 0x08	; 8

0000027c <byte3>:
byte3:      sbrs  r24, BIT_POSITION          ;if (r24.bit0 == 1) skip else DATA = low
     27c:	80 ff       	sbrs	r24, 0
            cbi   LED_PORT, LED_DATA         ;Set DATA low. LED off
     27e:	5e 98       	cbi	0x0b, 6	; 11
            sbrc  r24, BIT_POSITION          ;if (r24.bit0 == 0) skip else DATA = HIGH
     280:	80 fd       	sbrc	r24, 0
            sbi   LED_PORT, LED_DATA         ;Set DATA HIGH. LED on
     282:	5e 9a       	sbi	0x0b, 6	; 11
            // Data LED9..LED12              ;18..25 CLB pulses
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     284:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     286:	22 d0       	rcall	.+68     	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     288:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     28a:	20 d0       	rcall	.+64     	; 0x2cc <LEDDelay>
            lsr   r24                        ;Shift r24 one bit right to ask for another bit
     28c:	86 95       	lsr	r24
            dec   counter                    ;Decrement i (r20)
     28e:	4a 95       	dec	r20
            brne  byte3                      ;if (i == 0) break else continue
     290:	a9 f7       	brne	.-22     	; 0x27c <byte3>
            //
            //Fourth byte of (uint32_t ui32Data) in r25 (MSB)
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     292:	48 e0       	ldi	r20, 0x08	; 8

00000294 <byte4>:
byte4:      sbrs  r25, BIT_POSITION          ;if (r25.bit0 == 1) skip else DATA = low
     294:	90 ff       	sbrs	r25, 0
            cbi   LED_PORT, LED_DATA         ;Set DATA low. LED off
     296:	5e 98       	cbi	0x0b, 6	; 11
            sbrc  r25, BIT_POSITION          ;if (r22.bit0 == 0) skip else DATA = HIGH
     298:	90 fd       	sbrc	r25, 0
            sbi   LED_PORT, LED_DATA         ;Set DATA HIGH. LED on
     29a:	5e 9a       	sbi	0x0b, 6	; 11
            // Data LED13..LED14             ;26..33 CLB pulses
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     29c:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     29e:	16 d0       	rcall	.+44     	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     2a0:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     2a2:	14 d0       	rcall	.+40     	; 0x2cc <LEDDelay>
            lsr   r25                        ;Shift r22 one bit right to ask for another bit
     2a4:	96 95       	lsr	r25
            dec   counter                    ;Decrement i (r20)
     2a6:	4a 95       	dec	r20
            brne  byte4                      ;if (i == 0) break else continue
     2a8:	a9 f7       	brne	.-22     	; 0x294 <byte4>
            //
            //The MM5481x drive 14 leds, while the MM5450x can drive 34 leds, we only send
            //32 bits of data for the MM5481x, for the MM5450x we need send one extra byte for
            //the other two led (LED33 and LED34), we ommited here
            //
            cbi   LED_PORT, LED_DATA         ;Set led 33 and 34 off (Default)
     2aa:	5e 98       	cbi	0x0b, 6	; 11
            //Clock 34
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     2ac:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     2ae:	0e d0       	rcall	.+28     	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     2b0:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     2b2:	0c d0       	rcall	.+24     	; 0x2cc <LEDDelay>
            //Clock 35
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     2b4:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     2b6:	0a d0       	rcall	.+20     	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     2b8:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     2ba:	08 d0       	rcall	.+16     	; 0x2cc <LEDDelay>
            //
            //After the 36th bit data is latched and transmit is complete
            //
            //Clock 36
            sbi   LED_PORT, LED_CLOCK_IN     ;CLOCK HIGH
     2bc:	5d 9a       	sbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDH: Clock HIGH time (950nS)
     2be:	06 d0       	rcall	.+12     	; 0x2cc <LEDDelay>
            cbi   LED_PORT, LED_CLOCK_IN     ;CLOCK low
     2c0:	5d 98       	cbi	0x0b, 5	; 11
            rcall LEDDelay                   ;tDL: Clock low time (950nS)
     2c2:	04 d0       	rcall	.+8      	; 0x2cc <LEDDelay>
            //End transmision
            sbi   LED_PORT, LED_DATA_ENABLE  ;DATA_ENABLE is active low signal
     2c4:	5c 9a       	sbi	0x0b, 4	; 11
            sei                              ;Enable interrupts
     2c6:	78 94       	sei
            pop   counter                    ;Restore counter register (r20) from the stack
     2c8:	4f 91       	pop	r20
            ret                              ;return
     2ca:	08 95       	ret

000002cc <LEDDelay>:

LEDDelay:   push  delay                      ;Save delay register (r19) in the stack
     2cc:	3f 93       	push	r19
            ldi   delay, LED_DELAY           ;Load delay time. 8MHz=0,125uS*10=1.25uS
     2ce:	38 e0       	ldi	r19, 0x08	; 8

000002d0 <dly>:
dly:        dec   delay                      ;for (delay=delay_time; delay > 0; delay--) {
     2d0:	3a 95       	dec	r19
            brne  dly                        ;...}
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <dly>
            pop   delay                      ;Restore delay register (r19) from the stack
     2d4:	3f 91       	pop	r19
            ret                              ;return
     2d6:	08 95       	ret

000002d8 <LCDSendDataAsm>:
*** */

.global LCDSendDataAsm

LCDSendDataAsm:
            cli                              ;Disable interrupts
     2d8:	f8 94       	cli
            //Save working registers
            push  counter                    ;Save counter register (r19) in the stack
     2da:	3f 93       	push	r19
            //
            // NXP PCF2112Cx C-Bus serial data
            //
            cbi   LCD_PORT, LCD_DATA         ;Prepare leading zero bit
     2dc:	2a 98       	cbi	0x05, 2	; 5
            nop
     2de:	00 00       	nop
            sbi   LCD_PORT, LCD_DLEN         ;Set DLEN HIGH. Enable data transmit
     2e0:	28 9a       	sbi	0x05, 0	; 5
            nop                              ;tSUEN: Enable setup time
     2e2:	00 00       	nop
            //
            // Send Leading zero bit
            //                               ;1 CLB pulse
            sbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK HIGH
     2e4:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time
     2e6:	44 d0       	rcall	.+136    	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK low
     2e8:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL   
     2ea:	48 d0       	rcall	.+144    	; 0x37c <LCDDelayL>
                                             ;tHDDA: Data hold time
            //
            // First byte of (uint32_t ui32Data) in r22 (LSB)
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     2ec:	38 e0       	ldi	r19, 0x08	; 8

000002ee <byte1>:
byte1:      sbrs  r22, BIT_POSITION          ;if (r22.bit0 == 1) skip else DATA = low
     2ee:	60 ff       	sbrs	r22, 0
            cbi   LCD_PORT, LCD_DATA         ;Set DATA low. LCD Segment off
     2f0:	2a 98       	cbi	0x05, 2	; 5
            sbrc  r22, BIT_POSITION          ;if (r22.bit0 == 0) skip else DATA = HIGH
     2f2:	60 fd       	sbrc	r22, 0
            sbi   LCD_PORT, LCD_DATA         ;Set DATA HIGH. LCD Segment on
     2f4:	2a 9a       	sbi	0x05, 2	; 5
            // Data LCD S25..S32             ;26..33 CLB pulses
            sbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK HIGH
     2f6:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time
     2f8:	3b d0       	rcall	.+118    	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK low
     2fa:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL                  ;tDL: Clock low time
     2fc:	3f d0       	rcall	.+126    	; 0x37c <LCDDelayL>
            lsr   r22                        ;Shift r22 one bit right to ask for another bit
     2fe:	66 95       	lsr	r22
            dec   counter                    ;Decrement i (r29)
     300:	3a 95       	dec	r19
            brne  byte1                      ;if (i == 0) break else continue
     302:	a9 f7       	brne	.-22     	; 0x2ee <byte1>
            //
            // Second byte of (uint32_t ui32Data) in r23
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     304:	38 e0       	ldi	r19, 0x08	; 8

00000306 <byte2>:
byte2:      sbrs  r23, BIT_POSITION          ;if (r23.bit0 == 1) skip else DATA = low
     306:	70 ff       	sbrs	r23, 0
            cbi   LCD_PORT, LCD_DATA         ;Set DATA low. LCD Segment off
     308:	2a 98       	cbi	0x05, 2	; 5
            sbrc  r23, BIT_POSITION          ;if (r23.bit0 == 0) skip else DATA = HIGH
     30a:	70 fd       	sbrc	r23, 0
            sbi   LCD_PORT, LCD_DATA         ;Set DATA HIGH. LCD Segment on
     30c:	2a 9a       	sbi	0x05, 2	; 5
            // Data LCD S17..24              ;18..25 CLB pulses
            sbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK HIGH
     30e:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time
     310:	2f d0       	rcall	.+94     	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK low
     312:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL                  ;tDL: Clock low time
     314:	33 d0       	rcall	.+102    	; 0x37c <LCDDelayL>
            lsr   r23                        ;Shift r23 one bit right to ask for another bit
     316:	76 95       	lsr	r23
            dec   counter                    ;Decrement i (r19)
     318:	3a 95       	dec	r19
            brne  byte2                      ;if (i == 0) break else continue
     31a:	a9 f7       	brne	.-22     	; 0x306 <byte2>
            //
            //Third byte of (uint32_t ui32Data) in r24
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     31c:	38 e0       	ldi	r19, 0x08	; 8

0000031e <byte3>:
byte3:      sbrs  r24, BIT_POSITION          ;if (r24.bit0 == 1) skip else DATA = low
     31e:	80 ff       	sbrs	r24, 0
            cbi   LCD_PORT, LCD_DATA          ;Set DATA low. LCD Segment off
     320:	2a 98       	cbi	0x05, 2	; 5
            sbrc  r24, BIT_POSITION          ;if (r24.bit0 == 0) skip else DATA = HIGH
     322:	80 fd       	sbrc	r24, 0
            sbi   LCD_PORT, LCD_DATA          ;Set DATA HIGH. LCD Segment on
     324:	2a 9a       	sbi	0x05, 2	; 5
            // Data LCD S9..S16              ;10..17 CLB pulses
            sbi   LCD_PORT, LCD_CLOCK_IN      ;CLOCK HIGH
     326:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time
     328:	23 d0       	rcall	.+70     	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN      ;CLOCK low
     32a:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL                  ;tDL: Clock low time
     32c:	27 d0       	rcall	.+78     	; 0x37c <LCDDelayL>
            lsr   r24                        ;Shift r24 one bit right to ask for the next bit
     32e:	86 95       	lsr	r24
            dec   counter                    ;Decrement i (r19)
     330:	3a 95       	dec	r19
            brne  byte3                      ;if (i == 0) break else continue
     332:	a9 f7       	brne	.-22     	; 0x31e <byte3>
            //
            //Fourth byte of (uint32_t ui32Data) in r25 (MSB)
            //
            ldi   counter, BIT_COUNTER       ;Dec:8 for (i=8; i > 0; i--) {...}
     334:	38 e0       	ldi	r19, 0x08	; 8

00000336 <byte4>:
byte4:      sbrs  r25, BIT_POSITION          ;if (r25.bit0 == 1) skip else DATA = low
     336:	90 ff       	sbrs	r25, 0
            cbi   LCD_PORT, LCD_DATA         ;Set DATA low. LCD Segment off
     338:	2a 98       	cbi	0x05, 2	; 5
            sbrc  r25, BIT_POSITION          ;if (r25.bit0 == 0) skip else DATA = HIGH
     33a:	90 fd       	sbrc	r25, 0
            sbi   LCD_PORT, LCD_DATA         ;Set DATA HIGH. LCD Segment on            
     33c:	2a 9a       	sbi	0x05, 2	; 5
            // Data LCD S1..S8               ;2..9 CLB pulses
            sbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK HIGH
     33e:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time
     340:	17 d0       	rcall	.+46     	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK low
     342:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL                  ;tDL: Clock low time
     344:	1b d0       	rcall	.+54     	; 0x37c <LCDDelayL>
            lsr   r25                        ;Shift r25 one bit right to ask for the next bit
     346:	96 95       	lsr	r25
            dec   counter                    ;Decrement i (r19)
     348:	3a 95       	dec	r19
            brne  byte4                      ;if (i == 0) break else continue
     34a:	a9 f7       	brne	.-22     	; 0x336 <byte4>
            //
            // Load latches bit
            //
            sbi   LCD_PORT, LCD_DATA         ;Set DATA HIGH
     34c:	2a 9a       	sbi	0x05, 2	; 5
            nop                              ;34 CLB pulse
     34e:	00 00       	nop
            sbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK HIGH
     350:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time (950nS)
     352:	0e d0       	rcall	.+28     	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK low
     354:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL                  ;tDL: Clock low time (950nS)
     356:	12 d0       	rcall	.+36     	; 0x37c <LCDDelayL>
            //
            // Disable
            //
            cbi   LCD_PORT, LCD_DATA         ;Set DATA low
     358:	2a 98       	cbi	0x05, 2	; 5
            rcall LCDDelayL                  ;tSUDI
     35a:	10 d0       	rcall	.+32     	; 0x37c <LCDDelayL>
            cbi   LCD_PORT, LCD_DLEN         ;Set DLEN low
     35c:	28 98       	cbi	0x05, 0	; 5
            rcall LCDDelayL                  ;tSULD
     35e:	0e d0       	rcall	.+28     	; 0x37c <LCDDelayL>
            //
            //  Load pulse
            //
                                             ;35 CLB pulse
            sbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK HIGH
     360:	29 9a       	sbi	0x05, 1	; 5
            rcall LCDDelayH                  ;tDH: Clock HIGH time (950nS)
     362:	06 d0       	rcall	.+12     	; 0x370 <LCDDelayH>
            cbi   LCD_PORT, LCD_CLOCK_IN     ;CLOCK low
     364:	29 98       	cbi	0x05, 1	; 5
            rcall LCDDelayL                  ;tDL: Clock low time (950nS)
     366:	0a d0       	rcall	.+20     	; 0x37c <LCDDelayL>
            //
            //All C-Bus lines low
            //
            rcall LCDDelayL                  ;tBUSY
     368:	09 d0       	rcall	.+18     	; 0x37c <LCDDelayL>
            //
            //End and return to C
            //
            sei                              ;Enable interrupts
     36a:	78 94       	sei
            pop   counter                    ;Restore counter register (r19) from the stack
     36c:	3f 91       	pop	r19
            ret                              ;return
     36e:	08 95       	ret

00000370 <LCDDelayH>:

LCDDelayH:  push  delay                      ;Save delay register (r20) in the stack
     370:	4f 93       	push	r20
            ldi   delay, LCD_DELAY_HIGH      ;Load delay time. 8MHz=0,125uS*8=1uS
     372:	48 e0       	ldi	r20, 0x08	; 8

00000374 <dlyH>:
dlyH:       dec   delay                      ;for (delay=delay_time; delay > 0; delay--) {
     374:	4a 95       	dec	r20
            brne  dlyH                       ;...}
     376:	f1 f7       	brne	.-4      	; 0x374 <dlyH>
            pop   delay                      ;Restore delay register (r20) from the stack
     378:	4f 91       	pop	r20
            ret                              ;return
     37a:	08 95       	ret

0000037c <LCDDelayL>:

LCDDelayL:  push  delay                      ;Save delay register (r20) in the stack
     37c:	4f 93       	push	r20
            ldi   delay, LCD_DELAY_LOW       ;Load delay time. 8MHz=0,125uS*24=3uS
     37e:	48 e1       	ldi	r20, 0x18	; 24

00000380 <dlyL>:
dlyL:       dec   delay                      ;for (delay=delay_time; delay > 0; delay--) {
     380:	4a 95       	dec	r20
            brne  dlyL                       ;...}
     382:	f1 f7       	brne	.-4      	; 0x380 <dlyL>
            pop   delay                      ;Restore delay register (r20) from the stack
     384:	4f 91       	pop	r20
            ret                              ;return
     386:	08 95       	ret

00000388 <ADMInit>:
}


//--- API implementation ---//

void ADMInit(void) {
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
   
   ADM_PORT &= ~ADM_INPUT_MASK;     //L293D.A1 and L293D.A2 LOW (Output LOW)
     38c:	85 b1       	in	r24, 0x05	; 5
     38e:	8f 75       	andi	r24, 0x5F	; 95
     390:	85 b9       	out	0x05, r24	; 5
   ADM_DDR  |= ADM_INPUT_MASK;      //DDRx=1, PIN as output
     392:	84 b1       	in	r24, 0x04	; 4
     394:	80 6a       	ori	r24, 0xA0	; 160
     396:	84 b9       	out	0x04, r24	; 4
   _no_operation();
     398:	00 00       	nop

   //Set ADC and position values for the Air Dist. Motor driver loaded from EEPROM
   g_positionAdc[ADM_FRONT] = EEPROMRead_word(EEADDRSS_ADM_ADC_FRONT);
     39a:	82 e1       	ldi	r24, 0x12	; 18
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <EEPROMRead_word>
     3a2:	cc eb       	ldi	r28, 0xBC	; 188
     3a4:	d1 e0       	ldi	r29, 0x01	; 1
     3a6:	99 83       	std	Y+1, r25	; 0x01
     3a8:	88 83       	st	Y, r24
   g_positionAdc[ADM_FRONT_FEET] = EEPROMRead_word(EEADDRSS_ADM_ADC_FRONT_FEET);
     3aa:	84 e1       	ldi	r24, 0x14	; 20
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <EEPROMRead_word>
     3b2:	9b 83       	std	Y+3, r25	; 0x03
     3b4:	8a 83       	std	Y+2, r24	; 0x02
   g_positionAdc[ADM_FEET] = EEPROMRead_word(EEADDRSS_ADM_ADC_FEET);
     3b6:	86 e1       	ldi	r24, 0x16	; 22
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <EEPROMRead_word>
     3be:	9d 83       	std	Y+5, r25	; 0x05
     3c0:	8c 83       	std	Y+4, r24	; 0x04
   g_positionAdc[ADM_WINDSHIELD] = EEPROMRead_word(EEADDRSS_ADM_ADC_WINDSHLD);
     3c2:	88 e1       	ldi	r24, 0x18	; 24
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <EEPROMRead_word>
     3ca:	9f 83       	std	Y+7, r25	; 0x07
     3cc:	8e 83       	std	Y+6, r24	; 0x06
      sprintf(str, "ADM_FEET. ADC: [%d]\n", g_positionAdc[ADM_FEET]);
      USARTPrintString(str);
      sprintf(str, "ADM_WINDSHIELD. ADC: [%d]\n\n", g_positionAdc[ADM_WINDSHIELD]);
      USARTPrintString(str);
   #endif
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <ADMUpdatePositionInfo>:

void ADMUpdatePositionInfo(pADM_POSITION_INFO positionInfo, ADM_POSITION admPosition) {
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	16 2f       	mov	r17, r22

   //Read ADM potentiometer (Source)
   uint16_t adc = ADCReadAsValue(AN3_AIR_DIST_MOTOR);
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	0e 94 18 04 	call	0x830	; 0x830 <ADCReadAsValue>
   positionInfo->adcPositionSource = adc;
     3e4:	99 83       	std	Y+1, r25	; 0x01
     3e6:	88 83       	st	Y, r24
   positionInfo->adcRunningTime = 0;
     3e8:	1e 82       	std	Y+6, r1	; 0x06
     3ea:	1d 82       	std	Y+5, r1	; 0x05

   //Calculate target --->>

   //Set the ADC value for the new motor position
   positionInfo->adcPositionTarget = g_positionAdc[admPosition];
     3ec:	e1 2f       	mov	r30, r17
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	e4 54       	subi	r30, 0x44	; 68
     3f6:	fe 4f       	sbci	r31, 0xFE	; 254
     3f8:	20 81       	ld	r18, Z
     3fa:	31 81       	ldd	r19, Z+1	; 0x01
     3fc:	3b 83       	std	Y+3, r19	; 0x03
     3fe:	2a 83       	std	Y+2, r18	; 0x02

   //Where to move?   
   if (positionInfo->adcPositionTarget < positionInfo->adcPositionSource) {
     400:	28 17       	cp	r18, r24
     402:	39 07       	cpc	r19, r25
     404:	70 f0       	brcs	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
      //Target position > Source, move Counter Clock
      //  Target > Source
      positionInfo->admMove = ADM_MOVE_RIGHT;
   }
   else if (positionInfo->adcPositionTarget > positionInfo->adcPositionSource) {
     406:	82 17       	cp	r24, r18
     408:	93 07       	cpc	r25, r19
     40a:	28 f0       	brcs	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
      //  Target < Source
      positionInfo->admMove = ADM_MOVE_LEFT;
   }      
   else {
      //Source==Target. No movement at all
      positionInfo->admMove = ADM_MOVE_NONE;
     40c:	1c 82       	std	Y+4, r1	; 0x04
   }
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	08 95       	ret
      positionInfo->admMove = ADM_MOVE_RIGHT;
   }
   else if (positionInfo->adcPositionTarget > positionInfo->adcPositionSource) {
      //Target position < Source, move Counterless Clock
      //  Target < Source
      positionInfo->admMove = ADM_MOVE_LEFT;
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	8c 83       	std	Y+4, r24	; 0x04
   }      
   else {
      //Source==Target. No movement at all
      positionInfo->admMove = ADM_MOVE_NONE;
   }
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

   //Where to move?   
   if (positionInfo->adcPositionTarget < positionInfo->adcPositionSource) {
      //Target position > Source, move Counter Clock
      //  Target > Source
      positionInfo->admMove = ADM_MOVE_RIGHT;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	8c 83       	std	Y+4, r24	; 0x04
   }      
   else {
      //Source==Target. No movement at all
      positionInfo->admMove = ADM_MOVE_NONE;
   }
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	08 95       	ret

0000042e <ADMTask>:
                #define ADM_MAX_TIME_MOVING  10

   PARAMETERS: pTASK task. TASK structure
   RETURN: void
*** */
void ADMTask(pTASK task) {
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	fc 01       	movw	r30, r24
   _no_operation();
}

static void ADMStop(void) {
   //                1A->LOW                2A->LOW
   ADM_PORT &= ~((1 << ADM_L293D_1A) | (1 << ADM_L293D_2A));
     438:	95 b1       	in	r25, 0x05	; 5
     43a:	9f 75       	andi	r25, 0x5F	; 95
     43c:	95 b9       	out	0x05, r25	; 5
   _no_operation();
     43e:	00 00       	nop
   
   //Stop motor movement before read potentiometer value
   ADMStop();

   //Get task parameters
   pADM_POSITION_INFO positionInfo = (pADM_POSITION_INFO) task->parameter;
     440:	c5 85       	ldd	r28, Z+13	; 0x0d
     442:	d6 85       	ldd	r29, Z+14	; 0x0e
   if (positionInfo == NULL) {
     444:	20 97       	sbiw	r28, 0x00	; 0
     446:	b1 f0       	breq	.+44     	; 0x474 <ADMTask+0x46>
     448:	8f 01       	movw	r16, r30
      return;
   }

   //Read Air Dist. Motor position POT
   uint16_t ui16AdcPot = ADCReadAsValue(AN3_AIR_DIST_MOTOR);
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	0e 94 18 04 	call	0x830	; 0x830 <ADCReadAsValue>

   //Left or Right??
   int16_t i16Stop = 0;
   if (positionInfo->admMove == ADM_MOVE_LEFT) {
     450:	2c 81       	ldd	r18, Y+4	; 0x04
     452:	2f 3f       	cpi	r18, 0xFF	; 255
     454:	09 f1       	breq	.+66     	; 0x498 <ADMTask+0x6a>
      i16Stop = positionInfo->adcPositionTarget - ui16AdcPot;
      ADMMoveLeft();
   }
   else {
      i16Stop = ui16AdcPot - positionInfo->adcPositionTarget;
     456:	2a 81       	ldd	r18, Y+2	; 0x02
     458:	3b 81       	ldd	r19, Y+3	; 0x03
     45a:	82 1b       	sub	r24, r18
     45c:	93 0b       	sbc	r25, r19
   _no_operation();
}

static void ADMMoveRight(void) {
   //1A->LOW and 2A->HIGH
   ADM_PORT |=  (1 << ADM_L293D_2A);
     45e:	2f 9a       	sbi	0x05, 7	; 5
   ADM_PORT &= ~(1 << ADM_L293D_1A);
     460:	2d 98       	cbi	0x05, 5	; 5
   _no_operation();
     462:	00 00       	nop
   }

   //If actual motor position +/- the new position or if time elapsed 
   //is more than 10secs this is an error, 'Emergency Stop'
   //2000=20s. 20s=(20s*1000ms)=20000ms/10ms=2000times, this check is called every N..ms times
   if (i16Stop <= ADM_ADC_OFFSET || (++positionInfo->adcRunningTime) >= ADM_MAX_TIME_MOVING) {
     464:	03 97       	sbiw	r24, 0x03	; 3
     466:	5c f4       	brge	.+22     	; 0x47e <ADMTask+0x50>
   _no_operation();
}

static void ADMStop(void) {
   //                1A->LOW                2A->LOW
   ADM_PORT &= ~((1 << ADM_L293D_1A) | (1 << ADM_L293D_2A));
     468:	85 b1       	in	r24, 0x05	; 5
     46a:	8f 75       	andi	r24, 0x5F	; 95
     46c:	85 b9       	out	0x05, r24	; 5
   _no_operation();
     46e:	00 00       	nop
   //is more than 10secs this is an error, 'Emergency Stop'
   //2000=20s. 20s=(20s*1000ms)=20000ms/10ms=2000times, this check is called every N..ms times
   if (i16Stop <= ADM_ADC_OFFSET || (++positionInfo->adcRunningTime) >= ADM_MAX_TIME_MOVING) {
      ADMStop();

      task->status = TS_IDLE; //Signal task for stop running (This is an aperiodic task)
     470:	f8 01       	movw	r30, r16
     472:	11 86       	std	Z+9, r1	; 0x09

   #ifdef DEBUG_TASK
      sprintf(str, "<Air Dist. Motor: Task>\nSource: %d\nTarget: %d\nADC Pot.: %d\n\n", positionInfo->adcPositionSource, positionInfo->adcPositionTarget, ui16AdcPot);
      USARTPrintString(str);
   #endif
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret
   }

   //If actual motor position +/- the new position or if time elapsed 
   //is more than 10secs this is an error, 'Emergency Stop'
   //2000=20s. 20s=(20s*1000ms)=20000ms/10ms=2000times, this check is called every N..ms times
   if (i16Stop <= ADM_ADC_OFFSET || (++positionInfo->adcRunningTime) >= ADM_MAX_TIME_MOVING) {
     47e:	8d 81       	ldd	r24, Y+5	; 0x05
     480:	9e 81       	ldd	r25, Y+6	; 0x06
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	9e 83       	std	Y+6, r25	; 0x06
     486:	8d 83       	std	Y+5, r24	; 0x05
     488:	84 3c       	cpi	r24, 0xC4	; 196
     48a:	99 40       	sbci	r25, 0x09	; 9
     48c:	68 f7       	brcc	.-38     	; 0x468 <ADMTask+0x3a>

   #ifdef DEBUG_TASK
      sprintf(str, "<Air Dist. Motor: Task>\nSource: %d\nTarget: %d\nADC Pot.: %d\n\n", positionInfo->adcPositionSource, positionInfo->adcPositionTarget, ui16AdcPot);
      USARTPrintString(str);
   #endif
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret
   uint16_t ui16AdcPot = ADCReadAsValue(AN3_AIR_DIST_MOTOR);

   //Left or Right??
   int16_t i16Stop = 0;
   if (positionInfo->admMove == ADM_MOVE_LEFT) {
      i16Stop = positionInfo->adcPositionTarget - ui16AdcPot;
     498:	2a 81       	ldd	r18, Y+2	; 0x02
     49a:	3b 81       	ldd	r19, Y+3	; 0x03
     49c:	a9 01       	movw	r20, r18
     49e:	48 1b       	sub	r20, r24
     4a0:	59 0b       	sbc	r21, r25
     4a2:	ca 01       	movw	r24, r20

//--- API Helpers ---//

static void ADMMoveLeft(void) {
   //1A->HIGH and 2A->LOW
   ADM_PORT |=  (1 << ADM_L293D_1A);
     4a4:	2d 9a       	sbi	0x05, 5	; 5
   ADM_PORT &= ~(1 << ADM_L293D_2A);
     4a6:	2f 98       	cbi	0x05, 7	; 5
   _no_operation();
     4a8:	00 00       	nop
     4aa:	dc cf       	rjmp	.-72     	; 0x464 <ADMTask+0x36>

000004ac <ESRInit>:
   TCCR0B |= (ESR_DIV_NOPRESCALER);                           
}

//--- API implementation ---//

void ESRInit(void) {
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
// ---------------------------------------------------------------------


//--- API Helpers ---//
static inline void PWMTimerInit(void) {
   ESR_PWM_COUNTER = 0;       //See elecSppedReg.h for correct Output Compare Register
     4b0:	17 bc       	out	0x27, r1	; 39
   TCCR0A = 0x00;
     4b2:	14 bc       	out	0x24, r1	; 36
   TCCR0B = 0x00;
     4b4:	15 bc       	out	0x25, r1	; 37

   //Fast PWM. Compare Match: Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
   TCCR0A |= (ESR_PWM_MODE_CLEAR_SET_CHANNEL_A | ESR_PWM_FAST_MODE3_A);  
     4b6:	84 b5       	in	r24, 0x24	; 36
     4b8:	83 68       	ori	r24, 0x83	; 131
     4ba:	84 bd       	out	0x24, r24	; 36

   //Without pre-scaling=no hum. (8MHz/1 = 8Mhz)
   TCCR0B |= (ESR_DIV_NOPRESCALER);                           
     4bc:	85 b5       	in	r24, 0x25	; 37
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	85 bd       	out	0x25, r24	; 37
void ESRInit(void) {
   //Setup PWM on Timer0 output A
   PWMTimerInit();

   //Set ADC and position values for the Air Dist. Motor driver loaded from EEPROM
   g_speedOCR2[ESR_SPEED_0]  = 0;
     4c2:	c4 ec       	ldi	r28, 0xC4	; 196
     4c4:	d1 e0       	ldi	r29, 0x01	; 1
     4c6:	19 82       	std	Y+1, r1	; 0x01
     4c8:	18 82       	st	Y, r1
   g_speedOCR2[ESR_SPEED_1]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED1);
     4ca:	8a e1       	ldi	r24, 0x1A	; 26
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	9b 83       	std	Y+3, r25	; 0x03
     4d6:	8a 83       	std	Y+2, r24	; 0x02
   g_speedOCR2[ESR_SPEED_2]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED2);
     4d8:	8b e1       	ldi	r24, 0x1B	; 27
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	9d 83       	std	Y+5, r25	; 0x05
     4e4:	8c 83       	std	Y+4, r24	; 0x04
   g_speedOCR2[ESR_SPEED_3]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED3);
     4e6:	8c e1       	ldi	r24, 0x1C	; 28
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9f 83       	std	Y+7, r25	; 0x07
     4f2:	8e 83       	std	Y+6, r24	; 0x06
   g_speedOCR2[ESR_SPEED_4]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED4);
     4f4:	8d e1       	ldi	r24, 0x1D	; 29
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	99 87       	std	Y+9, r25	; 0x09
     500:	88 87       	std	Y+8, r24	; 0x08
   g_speedOCR2[ESR_SPEED_5]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED5);
     502:	8e e1       	ldi	r24, 0x1E	; 30
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	9b 87       	std	Y+11, r25	; 0x0b
     50e:	8a 87       	std	Y+10, r24	; 0x0a
   g_speedOCR2[ESR_SPEED_6]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED6);
     510:	8f e1       	ldi	r24, 0x1F	; 31
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	9d 87       	std	Y+13, r25	; 0x0d
     51c:	8c 87       	std	Y+12, r24	; 0x0c
   g_speedOCR2[ESR_SPEED_7]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED7);
     51e:	80 e2       	ldi	r24, 0x20	; 32
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9f 87       	std	Y+15, r25	; 0x0f
     52a:	8e 87       	std	Y+14, r24	; 0x0e
   g_speedOCR2[ESR_SPEED_8]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED8);
     52c:	81 e2       	ldi	r24, 0x21	; 33
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	99 8b       	std	Y+17, r25	; 0x11
     538:	88 8b       	std	Y+16, r24	; 0x10
   g_speedOCR2[ESR_SPEED_9]  = EEPROMRead_byte(EEADDRSS_ESR_SPEED9);
     53a:	82 e2       	ldi	r24, 0x22	; 34
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	9b 8b       	std	Y+19, r25	; 0x13
     546:	8a 8b       	std	Y+18, r24	; 0x12
   g_speedOCR2[ESR_SPEED_10] = EEPROMRead_byte(EEADDRSS_ESR_SPEED10);
     548:	83 e2       	ldi	r24, 0x23	; 35
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9d 8b       	std	Y+21, r25	; 0x15
     554:	8c 8b       	std	Y+20, r24	; 0x14
   g_speedOCR2[ESR_SPEED_11] = EEPROMRead_byte(EEADDRSS_ESR_SPEED11);
     556:	84 e2       	ldi	r24, 0x24	; 36
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9f 8b       	std	Y+23, r25	; 0x17
     562:	8e 8b       	std	Y+22, r24	; 0x16
   g_speedOCR2[ESR_SPEED_12] = EEPROMRead_byte(EEADDRSS_ESR_SPEED12);
     564:	85 e2       	ldi	r24, 0x25	; 37
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	99 8f       	std	Y+25, r25	; 0x19
     570:	88 8f       	std	Y+24, r24	; 0x18
   g_speedOCR2[ESR_SPEED_13] = EEPROMRead_byte(EEADDRSS_ESR_SPEED13);
     572:	86 e2       	ldi	r24, 0x26	; 38
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	9b 8f       	std	Y+27, r25	; 0x1b
     57e:	8a 8f       	std	Y+26, r24	; 0x1a
   g_speedOCR2[ESR_SPEED_14] = EEPROMRead_byte(EEADDRSS_ESR_SPEED14);
     580:	87 e2       	ldi	r24, 0x27	; 39
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	9d 8f       	std	Y+29, r25	; 0x1d
     58c:	8c 8f       	std	Y+28, r24	; 0x1c
   g_speedOCR2[ESR_SPEED_15] = EEPROMRead_byte(EEADDRSS_ESR_SPEED15);
     58e:	88 e2       	ldi	r24, 0x28	; 40
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	9f 8f       	std	Y+31, r25	; 0x1f
     59a:	8e 8f       	std	Y+30, r24	; 0x1e
      USARTPrintString("\n");
   #endif
   

   //DDRx=1, PIN is output for PWM
   ESR_DDR |= ESR_PWM_OUTPUT_CHANNEL;
     59c:	23 9a       	sbi	0x04, 3	; 4
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <ESRUpdateSpeedInfo>:

void ESRUpdateSpeedInfo(pESR_SPEED_INFO speedInfo, uint8_t speed) {
     5a4:	dc 01       	movw	r26, r24

   //Calculate SOURCE --->>
   speedInfo->SpeedSource = ESR_PWM_COUNTER;
     5a6:	97 b5       	in	r25, 0x27	; 39
     5a8:	9c 93       	st	X, r25

   //Calculate TARGET --->>

   //Set the ESR OCR2x value for the new PWM duty cycle for blower speed
   speedInfo->SpeedTarget = g_speedOCR2[speed];
     5aa:	e6 2f       	mov	r30, r22
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ec 53       	subi	r30, 0x3C	; 60
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	80 81       	ld	r24, Z
     5b8:	11 96       	adiw	r26, 0x01	; 1
     5ba:	8c 93       	st	X, r24
     5bc:	11 97       	sbiw	r26, 0x01	; 1

   //Where to speed up<->down?
   speedInfo->esrMove = ESR_SPEED_NONE;
   if (speedInfo->SpeedTarget < speedInfo->SpeedSource) {
     5be:	89 17       	cp	r24, r25
     5c0:	48 f0       	brcs	.+18     	; 0x5d4 <ESRUpdateSpeedInfo+0x30>
      speedInfo->esrMove = ESR_SPEED_DOWN;
   }
   else if (speedInfo->SpeedTarget > speedInfo->SpeedSource) {
     5c2:	98 17       	cp	r25, r24
     5c4:	20 f4       	brcc	.+8      	; 0x5ce <ESRUpdateSpeedInfo+0x2a>
      speedInfo->esrMove = ESR_SPEED_UP;
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	12 96       	adiw	r26, 0x02	; 2
     5ca:	8c 93       	st	X, r24
     5cc:	08 95       	ret

   //Set the ESR OCR2x value for the new PWM duty cycle for blower speed
   speedInfo->SpeedTarget = g_speedOCR2[speed];

   //Where to speed up<->down?
   speedInfo->esrMove = ESR_SPEED_NONE;
     5ce:	12 96       	adiw	r26, 0x02	; 2
     5d0:	1c 92       	st	X, r1
     5d2:	08 95       	ret
   if (speedInfo->SpeedTarget < speedInfo->SpeedSource) {
      speedInfo->esrMove = ESR_SPEED_DOWN;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	12 96       	adiw	r26, 0x02	; 2
     5d8:	8c 93       	st	X, r24
     5da:	08 95       	ret

000005dc <ESRTask>:
                #define ADM_MAX_TIME_MOVING  10

   PARAMETERS: pTASK task. TASK structure
   RETURN: void
*** */
void ESRTask(pTASK task) {
     5dc:	dc 01       	movw	r26, r24

   //Get task parameter
   pESR_SPEED_INFO esrSpeedInfo = (pESR_SPEED_INFO) task->parameter;
     5de:	1d 96       	adiw	r26, 0x0d	; 13
     5e0:	ed 91       	ld	r30, X+
     5e2:	fc 91       	ld	r31, X
     5e4:	1e 97       	sbiw	r26, 0x0e	; 14
   if (esrSpeedInfo == NULL) {
     5e6:	30 97       	sbiw	r30, 0x00	; 0
     5e8:	51 f0       	breq	.+20     	; 0x5fe <ESRTask+0x22>
      return;
   }

   //Speed Up<->Down
   if (esrSpeedInfo->esrMove == ESR_SPEED_UP) {
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
      esrSpeedInfo->SpeedSource++;
     5ec:	90 81       	ld	r25, Z
   if (esrSpeedInfo == NULL) {
      return;
   }

   //Speed Up<->Down
   if (esrSpeedInfo->esrMove == ESR_SPEED_UP) {
     5ee:	8f 3f       	cpi	r24, 0xFF	; 255
     5f0:	61 f0       	breq	.+24     	; 0x60a <ESRTask+0x2e>
      esrSpeedInfo->SpeedSource++;
   }
   else {
      esrSpeedInfo->SpeedSource--;
     5f2:	91 50       	subi	r25, 0x01	; 1
     5f4:	90 83       	st	Z, r25
   }

   //If we reach the target speed, then, stop task
   if (esrSpeedInfo->SpeedSource == esrSpeedInfo->SpeedTarget) {
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	89 17       	cp	r24, r25
     5fa:	11 f0       	breq	.+4      	; 0x600 <ESRTask+0x24>
      //SIGNAL task for stop
      task->status = TS_IDLE;
   }

   //New PWM Duty Cycle
   ESR_PWM_COUNTER = esrSpeedInfo->SpeedSource;
     5fc:	97 bd       	out	0x27, r25	; 39
     5fe:	08 95       	ret

   //If we reach the target speed, then, stop task
   if (esrSpeedInfo->SpeedSource == esrSpeedInfo->SpeedTarget) {

      //SIGNAL task for stop
      task->status = TS_IDLE;
     600:	19 96       	adiw	r26, 0x09	; 9
     602:	1c 92       	st	X, r1
     604:	90 81       	ld	r25, Z
   }

   //New PWM Duty Cycle
   ESR_PWM_COUNTER = esrSpeedInfo->SpeedSource;
     606:	97 bd       	out	0x27, r25	; 39
     608:	fa cf       	rjmp	.-12     	; 0x5fe <ESRTask+0x22>
      return;
   }

   //Speed Up<->Down
   if (esrSpeedInfo->esrMove == ESR_SPEED_UP) {
      esrSpeedInfo->SpeedSource++;
     60a:	9f 5f       	subi	r25, 0xFF	; 255
     60c:	90 83       	st	Z, r25
     60e:	f3 cf       	rjmp	.-26     	; 0x5f6 <ESRTask+0x1a>

00000610 <LampsInit>:
   RETURN: void
*** */
void LampsInit(void) {
   
   //Set LCD lamps Port low
   LCD_LAMP_PORT &= ~(LCD_LAMP_MASKS);    //T1:T2->Base Temperature and Speed LCD lamp
     610:	8b b1       	in	r24, 0x0b	; 11
     612:	8e 77       	andi	r24, 0x7E	; 126
     614:	8b b9       	out	0x0b, r24	; 11

   //Set LCD lamps port DDRx=1 as output
   LCD_LAMP_DDR |= LCD_LAMP_MASKS;        //T1:T2->Base Temperature and Speed LCD lamp
     616:	8a b1       	in	r24, 0x0a	; 10
     618:	81 68       	ori	r24, 0x81	; 129
     61a:	8a b9       	out	0x0a, r24	; 10
   if ((lampsState & LAMP_TEMPERATURE_ON) == LAMP_TEMPERATURE_ON) {
      LCD_LAMP_PORT |= (1 << LCD_LAMP_TEMPERATURE);
   }

   if ((lampsState & LAMP_TEMPERATURE_OFF) == LAMP_TEMPERATURE_OFF) {
      LCD_LAMP_PORT &= ~(1 << LCD_LAMP_TEMPERATURE);
     61c:	58 98       	cbi	0x0b, 0	; 11
   if ((lampsState & LAMP_SPEED_ON) == LAMP_SPEED_ON) {
      LCD_LAMP_PORT |= (1 << LCD_LAMP_SPEED);
   }

   if ((lampsState & LAMP_SPEED_OFF) == LAMP_SPEED_OFF) {
      LCD_LAMP_PORT &= ~(1 << LCD_LAMP_SPEED);
     61e:	5f 98       	cbi	0x0b, 7	; 11
     620:	08 95       	ret

00000622 <LampsSetState>:
   PARAMETERS: LAMPS_STATE
   RETURN: void
*** */
void LampsSetState(LAMPS_STATE lampsState) {

   if ((lampsState & LAMP_TEMPERATURE_ON) == LAMP_TEMPERATURE_ON) {
     622:	80 fd       	sbrc	r24, 0
      LCD_LAMP_PORT |= (1 << LCD_LAMP_TEMPERATURE);
     624:	58 9a       	sbi	0x0b, 0	; 11
   }

   if ((lampsState & LAMP_TEMPERATURE_OFF) == LAMP_TEMPERATURE_OFF) {
     626:	81 fd       	sbrc	r24, 1
      LCD_LAMP_PORT &= ~(1 << LCD_LAMP_TEMPERATURE);
     628:	58 98       	cbi	0x0b, 0	; 11
   }

   if ((lampsState & LAMP_SPEED_ON) == LAMP_SPEED_ON) {
     62a:	82 fd       	sbrc	r24, 2
      LCD_LAMP_PORT |= (1 << LCD_LAMP_SPEED);
     62c:	5f 9a       	sbi	0x0b, 7	; 11
   }

   if ((lampsState & LAMP_SPEED_OFF) == LAMP_SPEED_OFF) {
     62e:	83 fd       	sbrc	r24, 3
      LCD_LAMP_PORT &= ~(1 << LCD_LAMP_SPEED);
     630:	5f 98       	cbi	0x0b, 7	; 11
     632:	08 95       	ret

00000634 <TLPSInit>:
   PARAMETERS: void
   RETURN: void
*** */
void TLPSInit(void) {
   //Input HIGH H-Bridge L293D Output = HiZ
   TLPS_PORT |= (1 << TLPS_L293D_3A);
     634:	5a 9a       	sbi	0x0b, 2	; 11

   //DDRx=1, PIN is output
   TLPS_DDR |= (1 << TLPS_L293D_3A);
     636:	52 9a       	sbi	0x0a, 2	; 10
     638:	08 95       	ret

0000063a <TLPSSetState>:
   RETURN: void
*** */
void TLPSSetState(TLPS_STATE state) {

   //ON/OFF L293D output
   if (state == TLPSS_ON) {
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	19 f0       	breq	.+6      	; 0x644 <TLPSSetState+0xa>
      TLPS_PORT &= ~(1 << TLPS_L293D_3A);
   }
   else {
      TLPS_PORT |= (1 << TLPS_L293D_3A);
     63e:	5a 9a       	sbi	0x0b, 2	; 11
   }

   _no_operation();
     640:	00 00       	nop
     642:	08 95       	ret
*** */
void TLPSSetState(TLPS_STATE state) {

   //ON/OFF L293D output
   if (state == TLPSS_ON) {
      TLPS_PORT &= ~(1 << TLPS_L293D_3A);
     644:	5a 98       	cbi	0x0b, 2	; 11
   }
   else {
      TLPS_PORT |= (1 << TLPS_L293D_3A);
   }

   _no_operation();
     646:	00 00       	nop
     648:	08 95       	ret

0000064a <USARTInit>:
   //[UCSRnB:1] has the 9-bit in the bit RXB8n, if is set=1, then add the 9-bit in the
   //result
   ui8HIGH = (ui8HIGH >> 1) & 0x01;

   //UDRn with LSB, high with 9-bit??
   return ((ui8HIGH << 8) | ui8LOW);   
     64a:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     64e:	9f 77       	andi	r25, 0x7F	; 127
     650:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     654:	88 23       	and	r24, r24
     656:	29 f0       	breq	.+10     	; 0x662 <USARTInit+0x18>
     658:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     65c:	89 2b       	or	r24, r25
     65e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     662:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     666:	8f 7c       	andi	r24, 0xCF	; 207
     668:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     66c:	66 23       	and	r22, r22
     66e:	29 f0       	breq	.+10     	; 0x67a <USARTInit+0x30>
     670:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     674:	68 2b       	or	r22, r24
     676:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     67a:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     67e:	87 7f       	andi	r24, 0xF7	; 247
     680:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     684:	41 30       	cpi	r20, 0x01	; 1
     686:	29 f4       	brne	.+10     	; 0x692 <USARTInit+0x48>
     688:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     68c:	88 60       	ori	r24, 0x08	; 8
     68e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     692:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     696:	89 7f       	andi	r24, 0xF9	; 249
     698:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     69c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     6a0:	8b 7f       	andi	r24, 0xFB	; 251
     6a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     6a6:	22 23       	and	r18, r18
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <USARTInit+0x6e>
     6aa:	2e 30       	cpi	r18, 0x0E	; 14
     6ac:	a9 f0       	breq	.+42     	; 0x6d8 <USARTInit+0x8e>
     6ae:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     6b2:	28 2b       	or	r18, r24
     6b4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     6b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     6bc:	8d 7f       	andi	r24, 0xFD	; 253
     6be:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     6c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     6c6:	8c e0       	ldi	r24, 0x0C	; 12
     6c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     6cc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     6d0:	88 60       	ori	r24, 0x08	; 8
     6d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     6d6:	08 95       	ret
     6d8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     6dc:	84 60       	ori	r24, 0x04	; 4
     6de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     6e2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     6e6:	86 60       	ori	r24, 0x06	; 6
     6e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     6ec:	e5 cf       	rjmp	.-54     	; 0x6b8 <USARTInit+0x6e>

000006ee <USARTPrintString>:
   DESCRIPTION: Receive data frame for USART channel

   PARAMETERS: void
   RETURN: uint16_t ui16Data. 5 to 9 bit of data to receive
*** */
void USARTPrintString(char const chrStr[]) {
     6ee:	fc 01       	movw	r30, r24

   //If empty string = '\0'
   if (!*chrStr)
     6f0:	90 81       	ld	r25, Z
     6f2:	99 23       	and	r25, r25
     6f4:	99 f0       	breq	.+38     	; 0x71c <USARTPrintString+0x2e>
   UCSR0B &= ~(1 << TXB80); 
   if (ui16Data & 0x0100 )
      UCSR0B |= (1 << TXB80);

   //UDR0 with the LSByte of data. Frame 5..8 Data Bit
   UDR0 = ui16Data;
     6f6:	3d e0       	ldi	r19, 0x0D	; 13
   if (!*chrStr)
      return;

   while (*chrStr) {
      //If find the CR send first one LF
      if (*chrStr == '\n') {
     6f8:	9a 30       	cpi	r25, 0x0A	; 10
     6fa:	89 f0       	breq	.+34     	; 0x71e <USARTPrintString+0x30>
     6fc:	29 2f       	mov	r18, r25
         USARTTransmitData('\r');
      }

      USARTTransmitData(*chrStr++);
     6fe:	31 96       	adiw	r30, 0x01	; 1
   RETURN: void
*** */
void USARTTransmitData(uint16_t ui16Data) {

   //Wait for TX buffer is transmitting
   while ( !(UCSR0A & (1 << UDRE0)) ) {
     700:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     704:	95 ff       	sbrs	r25, 5
     706:	fc cf       	rjmp	.-8      	; 0x700 <USARTPrintString+0x12>
   }

   //If Data Frame is 9-bit, setup [UCSR0B:0]->TXB8: Transmit 9 Data Bit. If the 9-bit
   //in data is 1, set TXB8, discard MSB of data
   UCSR0B &= ~(1 << TXB80); 
     708:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     70c:	9e 7f       	andi	r25, 0xFE	; 254
     70e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
   if (ui16Data & 0x0100 )
      UCSR0B |= (1 << TXB80);

   //UDR0 with the LSByte of data. Frame 5..8 Data Bit
   UDR0 = ui16Data;
     712:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

   //If empty string = '\0'
   if (!*chrStr)
      return;

   while (*chrStr) {
     716:	90 81       	ld	r25, Z
     718:	91 11       	cpse	r25, r1
     71a:	ee cf       	rjmp	.-36     	; 0x6f8 <USARTPrintString+0xa>
     71c:	08 95       	ret
   RETURN: void
*** */
void USARTTransmitData(uint16_t ui16Data) {

   //Wait for TX buffer is transmitting
   while ( !(UCSR0A & (1 << UDRE0)) ) {
     71e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     722:	95 ff       	sbrs	r25, 5
     724:	fc cf       	rjmp	.-8      	; 0x71e <USARTPrintString+0x30>
   }

   //If Data Frame is 9-bit, setup [UCSR0B:0]->TXB8: Transmit 9 Data Bit. If the 9-bit
   //in data is 1, set TXB8, discard MSB of data
   UCSR0B &= ~(1 << TXB80); 
     726:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     72a:	8e 7f       	andi	r24, 0xFE	; 254
     72c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
   if (ui16Data & 0x0100 )
      UCSR0B |= (1 << TXB80);

   //UDR0 with the LSByte of data. Frame 5..8 Data Bit
   UDR0 = ui16Data;
     730:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     734:	20 81       	ld	r18, Z
     736:	e3 cf       	rjmp	.-58     	; 0x6fe <USARTPrintString+0x10>

00000738 <LCDInit>:
   PARAMETERS: void
   RETURN: void
*** */
void LCDInit(void) {
   //Set LCD Port low
   LCD_PORT &= ~(LCD_MASKS);           //PCF2112CT C-Bus Lines
     738:	85 b1       	in	r24, 0x05	; 5
     73a:	88 7f       	andi	r24, 0xF8	; 248
     73c:	85 b9       	out	0x05, r24	; 5
   //LCD_PORT &= ~(1 << LCD_DLEN);       //Set LOW PCF2112CT.DLEN active high

   //Set LCD port DDRx=1 as output
   LCD_DDR |= LCD_MASKS;               //Set LCD PORT has output. PCF2112CT C-Bus Lines
     73e:	84 b1       	in	r24, 0x04	; 4
     740:	87 60       	ori	r24, 0x07	; 7
     742:	84 b9       	out	0x04, r24	; 4
     744:	08 95       	ret

00000746 <LCDSendData>:

               LSB                                                    MSB
   PARAMETERS: uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4
   RETURN: void
*** */
void LCDSendData(uint8_t byte1, uint8_t byte2, uint8_t  byte3, uint8_t byte4) {
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	52 2f       	mov	r21, r18
   LCDSendDataAsm(PACK32(byte4, byte3, byte2, byte1));
     754:	06 2f       	mov	r16, r22
     756:	10 e0       	ldi	r17, 0x00	; 0
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	32 2f       	mov	r19, r18
     75e:	21 2f       	mov	r18, r17
     760:	10 2f       	mov	r17, r16
     762:	00 27       	eor	r16, r16
     764:	68 01       	movw	r12, r16
     766:	79 01       	movw	r14, r18
     768:	c8 2a       	or	r12, r24
     76a:	d7 01       	movw	r26, r14
     76c:	c6 01       	movw	r24, r12
     76e:	a4 2b       	or	r26, r20
     770:	bc 01       	movw	r22, r24
     772:	cd 01       	movw	r24, r26
     774:	95 2b       	or	r25, r21
}
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
               LSB                                                    MSB
   PARAMETERS: uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4
   RETURN: void
*** */
void LCDSendData(uint8_t byte1, uint8_t byte2, uint8_t  byte3, uint8_t byte4) {
   LCDSendDataAsm(PACK32(byte4, byte3, byte2, byte1));
     782:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <LCDSendDataAsm>

00000786 <LCDClear>:
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	cb 01       	movw	r24, r22
     78c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <LCDSendDataAsm>

00000790 <LCDNumberToDigit>:
   RETURN: uint8_t. LCD Digit Code
*** */
uint8_t LCDNumberToDigit(uint8_t number) {
   //The g_lcdNumbers is ordered from 0 to 9, because of that any number from 0..9 is
   //the index from g_lcdNumbers array
   return pgm_read_byte(&g_lcdNumbers[number]);
     790:	e8 2f       	mov	r30, r24
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	e2 51       	subi	r30, 0x12	; 18
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	84 91       	lpm	r24, Z
}
     79a:	08 95       	ret

0000079c <LEDSendData>:

               LSB                                                    MSB
   PARAMETERS: uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4
   RETURN: void
*** */
void LEDSendData(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	52 2f       	mov	r21, r18
   LEDSendDataAsm(PACK32(byte4, byte3, byte2, byte1));
     7aa:	06 2f       	mov	r16, r22
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	32 2f       	mov	r19, r18
     7b4:	21 2f       	mov	r18, r17
     7b6:	10 2f       	mov	r17, r16
     7b8:	00 27       	eor	r16, r16
     7ba:	68 01       	movw	r12, r16
     7bc:	79 01       	movw	r14, r18
     7be:	c8 2a       	or	r12, r24
     7c0:	d7 01       	movw	r26, r14
     7c2:	c6 01       	movw	r24, r12
     7c4:	a4 2b       	or	r26, r20
     7c6:	bc 01       	movw	r22, r24
     7c8:	cd 01       	movw	r24, r26
     7ca:	95 2b       	or	r25, r21
}
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
               LSB                                                    MSB
   PARAMETERS: uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4
   RETURN: void
*** */
void LEDSendData(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
   LEDSendDataAsm(PACK32(byte4, byte3, byte2, byte1));
     7d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <LEDSendDataAsm>

000007dc <LEDInit>:
   PARAMETERS: void
   RETURN: void
*** */
void LEDInit(void) {
   //Set LED Port low
   LED_PORT &= ~LED_MASKS;                //MM5481x serial data lines
     7dc:	8b b1       	in	r24, 0x0b	; 11
     7de:	8f 78       	andi	r24, 0x8F	; 143
     7e0:	8b b9       	out	0x0b, r24	; 11
   LED_PORT |= (1 << LED_DATA_ENABLE);    //Set HIGH MM5481x.DATA_ENABLE active low
     7e2:	5c 9a       	sbi	0x0b, 4	; 11

   //Set LCD port DDRx=1 as output
   LED_DDR |= LED_MASKS;                  //Set LED PORT has output. MM5481x serial data lines
     7e4:	8a b1       	in	r24, 0x0a	; 10
     7e6:	80 67       	ori	r24, 0x70	; 112
     7e8:	8a b9       	out	0x0a, r24	; 10
     7ea:	08 95       	ret

000007ec <LEDClear>:
               LSB                                                    MSB
   PARAMETERS: uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4
   RETURN: void
*** */
void LEDSendData(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
   LEDSendDataAsm(PACK32(byte4, byte3, byte2, byte1));
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	cb 01       	movw	r24, r22
     7f2:	0c 94 1b 01 	jmp	0x236	; 0x236 <LEDSendDataAsm>

000007f6 <EEPROMRead_byte>:

   PARAMETERS: uint8_t address: eeprom memory start address
   RETURN: float: eeprom data
*** */
uint8_t EEPROMRead_byte(uint16_t address) {
   return eeprom_read_byte((uint8_t *) address);
     7f6:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <eeprom_read_byte>

000007fa <EEPROMWrite_byte>:
               uint8_t value: Value to write into eeprom

   RETURN: void
*** */
void EEPROMWrite_byte(uint16_t address, uint8_t value) {
   eeprom_update_byte((uint8_t *) address, value);
     7fa:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <eeprom_update_byte>

000007fe <EEPROMRead_word>:

   PARAMETERS: uint16_t address: eeprom memory start address
   RETURN: float: eeprom data
*** */
uint16_t EEPROMRead_word(uint16_t address) {
   return eeprom_read_word((uint16_t *) address);
     7fe:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <eeprom_read_word>

00000802 <ADCInit>:
*** */
void ADCSetLeftAdjustResult(ADC_LEFT_ADJUST_RESULT leftAdjsRes) {
   //Default: Right Adjust 
   ADMUX &= ~(ADC_LEFT_ADJUST_RESULT_MASK);     //Unset
   if (leftAdjsRes == ADC_LAR_LEFT) {
      ADMUX |= (1 << ADLAR);
     802:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     806:	9f 73       	andi	r25, 0x3F	; 63
     808:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     80c:	66 23       	and	r22, r22
     80e:	29 f0       	breq	.+10     	; 0x81a <ADCInit+0x18>
     810:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     814:	69 2b       	or	r22, r25
     816:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     81a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     81e:	98 7f       	andi	r25, 0xF8	; 248
     820:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     824:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     828:	89 2b       	or	r24, r25
     82a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     82e:	08 95       	ret

00000830 <ADCReadAsValue>:
   DESCRIPTION: Read ADC channel a return result as ADC value

   PARAMETERS: ADC_CHANNEL adcChannel
   RETURN: uint16_t. ADC Value 10 bit resolution
*** */
uint16_t ADCReadAsValue(ADC_CHANNEL channel) {
     830:	8f 70       	andi	r24, 0x0F	; 15
     832:	3a e0       	ldi	r19, 0x0A	; 10
   //Consecutive readings and average conversion
   uint16_t adc = 0;
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
   //Enable Power Reduction ADC in PRR register
   PRR &= ~(1 << PRADC);
#endif

   //NOTE: Will take 25 ADC clock cycles settled first time
   ADCSRA |= (1 << ADEN);
     838:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     83c:	90 68       	ori	r25, 0x80	; 128
     83e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRA &= ~(1 << ADIE);
}

static inline void ADCSetChannel(ADC_CHANNEL channel) {         
   //Wait for any conversion in progress, ADSC==1, before change channel
   while (bit_is_set(ADCSRA, ADSC));
     842:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     846:	96 fd       	sbrc	r25, 6
     848:	fc cf       	rjmp	.-8      	; 0x842 <ADCReadAsValue+0x12>

   //NOTE: We need to set ADMUX register, to do that we keep the higher nibble
   //(& 0xF0) and set the new ADC channel, (channel & 0x0F) to stay in ADC7..ADC0
   //NOTE: For read ADC channel ADC8 (Temperature), 1.1V and GND, use special functions
   ADMUX = ((ADMUX & 0xF0) | (channel & ADC_CHANNEL_MASK));
     84a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     84e:	90 7f       	andi	r25, 0xF0	; 240
     850:	98 2b       	or	r25, r24
     852:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

   ADCSRA &= ~(1 << ADEN);
}

static inline void ADCStartConversion(void) {
   ADCSRA |= (1 << ADSC);  //ADC = 0;
     856:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     85a:	90 64       	ori	r25, 0x40	; 64
     85c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
   
   ADCEnable();                        //Enable ADC module converter
   ADCSetChannel(channel);             //Set ADC channel
   ADCStartConversion();               //Start ADC conversion
   
   while (bit_is_set(ADCSRA, ADSC));   //Conversion in progress, ADSC==1, waiting...
     860:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     864:	96 fd       	sbrc	r25, 6
     866:	fc cf       	rjmp	.-8      	; 0x860 <ADCReadAsValue+0x30>

   uint16_t ui16AdcValue = 0;          //ADC conversion value

#if defined(ADC)
   ui16AdcValue = ADC;
     868:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     86c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
#if defined(PRR)
   //Disable Power Reduction ADC in PRR register
   PRR |= (1 << PRADC);
#endif

   ADCSRA &= ~(1 << ADEN);
     870:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     874:	9f 77       	andi	r25, 0x7F	; 127
     876:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
*** */
uint16_t ADCReadAsValue(ADC_CHANNEL channel) {
   //Consecutive readings and average conversion
   uint16_t adc = 0;
   for (uint8_t i = 0; i < ADC_SAMPLES; i++) {
      adc += ADCRead10BitValue(channel);
     87a:	46 0f       	add	r20, r22
     87c:	57 1f       	adc	r21, r23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87e:	9d e0       	ldi	r25, 0x0D	; 13
     880:	9a 95       	dec	r25
     882:	f1 f7       	brne	.-4      	; 0x880 <ADCReadAsValue+0x50>
     884:	00 00       	nop
     886:	31 50       	subi	r19, 0x01	; 1
   RETURN: uint16_t. ADC Value 10 bit resolution
*** */
uint16_t ADCReadAsValue(ADC_CHANNEL channel) {
   //Consecutive readings and average conversion
   uint16_t adc = 0;
   for (uint8_t i = 0; i < ADC_SAMPLES; i++) {
     888:	b9 f6       	brne	.-82     	; 0x838 <ADCReadAsValue+0x8>
      _delay_us(5);
   }

   adc /= ADC_SAMPLES;

   return adc;
     88a:	9a 01       	movw	r18, r20
     88c:	ad ec       	ldi	r26, 0xCD	; 205
     88e:	bc ec       	ldi	r27, 0xCC	; 204
     890:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__umulhisi3>
}
     894:	96 95       	lsr	r25
     896:	87 95       	ror	r24
     898:	96 95       	lsr	r25
     89a:	87 95       	ror	r24
     89c:	96 95       	lsr	r25
     89e:	87 95       	ror	r24
     8a0:	08 95       	ret

000008a2 <ADCReadAsVoltage>:
                Vin = (ADC * Vref) / 1024

   PARAMETERS: ADC_CHANNEL adcChannel
   RETURN: float. ADC Voltage 10 bit resolution
*** */
float ADCReadAsVoltage(ADC_CHANNEL channel) {   
     8a2:	8f 70       	andi	r24, 0x0F	; 15
     8a4:	3a e0       	ldi	r19, 0x0A	; 10
   PARAMETERS: ADC_CHANNEL adcChannel
   RETURN: uint16_t. ADC Value 10 bit resolution
*** */
uint16_t ADCReadAsValue(ADC_CHANNEL channel) {
   //Consecutive readings and average conversion
   uint16_t adc = 0;
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
   //Enable Power Reduction ADC in PRR register
   PRR &= ~(1 << PRADC);
#endif

   //NOTE: Will take 25 ADC clock cycles settled first time
   ADCSRA |= (1 << ADEN);
     8aa:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8ae:	90 68       	ori	r25, 0x80	; 128
     8b0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRA &= ~(1 << ADIE);
}

static inline void ADCSetChannel(ADC_CHANNEL channel) {         
   //Wait for any conversion in progress, ADSC==1, before change channel
   while (bit_is_set(ADCSRA, ADSC));
     8b4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8b8:	96 fd       	sbrc	r25, 6
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <ADCReadAsVoltage+0x12>

   //NOTE: We need to set ADMUX register, to do that we keep the higher nibble
   //(& 0xF0) and set the new ADC channel, (channel & 0x0F) to stay in ADC7..ADC0
   //NOTE: For read ADC channel ADC8 (Temperature), 1.1V and GND, use special functions
   ADMUX = ((ADMUX & 0xF0) | (channel & ADC_CHANNEL_MASK));
     8bc:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     8c0:	90 7f       	andi	r25, 0xF0	; 240
     8c2:	98 2b       	or	r25, r24
     8c4:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

   ADCSRA &= ~(1 << ADEN);
}

static inline void ADCStartConversion(void) {
   ADCSRA |= (1 << ADSC);  //ADC = 0;
     8c8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8cc:	90 64       	ori	r25, 0x40	; 64
     8ce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
   
   ADCEnable();                        //Enable ADC module converter
   ADCSetChannel(channel);             //Set ADC channel
   ADCStartConversion();               //Start ADC conversion
   
   while (bit_is_set(ADCSRA, ADSC));   //Conversion in progress, ADSC==1, waiting...
     8d2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8d6:	96 fd       	sbrc	r25, 6
     8d8:	fc cf       	rjmp	.-8      	; 0x8d2 <ADCReadAsVoltage+0x30>

   uint16_t ui16AdcValue = 0;          //ADC conversion value

#if defined(ADC)
   ui16AdcValue = ADC;
     8da:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8de:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
#if defined(PRR)
   //Disable Power Reduction ADC in PRR register
   PRR |= (1 << PRADC);
#endif

   ADCSRA &= ~(1 << ADEN);
     8e2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8e6:	9f 77       	andi	r25, 0x7F	; 127
     8e8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
*** */
uint16_t ADCReadAsValue(ADC_CHANNEL channel) {
   //Consecutive readings and average conversion
   uint16_t adc = 0;
   for (uint8_t i = 0; i < ADC_SAMPLES; i++) {
      adc += ADCRead10BitValue(channel);
     8ec:	46 0f       	add	r20, r22
     8ee:	57 1f       	adc	r21, r23
     8f0:	9d e0       	ldi	r25, 0x0D	; 13
     8f2:	9a 95       	dec	r25
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <ADCReadAsVoltage+0x50>
     8f6:	00 00       	nop
     8f8:	31 50       	subi	r19, 0x01	; 1
   RETURN: uint16_t. ADC Value 10 bit resolution
*** */
uint16_t ADCReadAsValue(ADC_CHANNEL channel) {
   //Consecutive readings and average conversion
   uint16_t adc = 0;
   for (uint8_t i = 0; i < ADC_SAMPLES; i++) {
     8fa:	b9 f6       	brne	.-82     	; 0x8aa <ADCReadAsVoltage+0x8>
   // Microchip AppNotes-00002447A.pdf
   // Vcc_value = ( 0x400 * 1.1 ) / (ADC_RES_L + ADC_RES_H * 0x100)
   //              0x400 = 1024
   //              1.1 = Vref
   //              ADC_RES_L + ADC_RES_H * 0x100 = ADC value
   return (ADC_VREF_VALUE * ADC_RESOLUTION) / adc;
     8fc:	9a 01       	movw	r18, r20
     8fe:	ad ec       	ldi	r26, 0xCD	; 205
     900:	bc ec       	ldi	r27, 0xCC	; 204
     902:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__umulhisi3>
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	bc 01       	movw	r22, r24
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__floatunsisf>
     91c:	9b 01       	movw	r18, r22
     91e:	ac 01       	movw	r20, r24
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 ea       	ldi	r24, 0xA0	; 160
     926:	95 e4       	ldi	r25, 0x45	; 69
     928:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
}
     92c:	08 95       	ret

0000092e <BoardInit>:

   // define DEBUG_TASK: For task operation debug
   // define DEBUG: For SignalR operation debug
   #if defined DEBUG || DEBUG_TASK
      //Baud: 38.4k. Frame 8N1 (8bit, No Parity, 1 Bit Stop)
      USARTInit(USART_OPMODE_ASYNCHRONOUS, USART_PARITY_DISABLE, USART_1STOP_BIT, USART_CSZ_8BIT);
     92e:	26 e0       	ldi	r18, 0x06	; 6
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 25 03 	call	0x64a	; 0x64a <USARTInit>
      USARTPrintString("\n<BoardInit>\nElectronic A/C Fiat Tempra Controller\n\n");
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 77 03 	call	0x6ee	; 0x6ee <USARTPrintString>
   #endif

   //HAL initialization
   ADCInit(ADC_PRESCALER_DIV128, ADC_VREF_AREF); //ADC 62.5KHz. Vref=AVcc=5.0V. Fcpu=8MHz. 8000000/128=62500Hz=62.5kHz
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	0e 94 01 04 	call	0x802	; 0x802 <ADCInit>

   //Display
   LEDInit();        //LED driver MM5481N module
     94a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LEDInit>
   LCDInit();        //LCD driver PCF2112CT module
     94e:	0e 94 9c 03 	call	0x738	; 0x738 <LCDInit>
   LampsInit();      //LCD lamps driver module
     952:	0e 94 08 03 	call	0x610	; 0x610 <LampsInit>

   //Actuators
   ADMInit();        //Air Distribution Motor H-Bridge L293D module
     956:	0e 94 c4 01 	call	0x388	; 0x388 <ADMInit>
   TLPSInit();       //Three Level Pressure Switch H-Bridge L293D module
     95a:	0e 94 1a 03 	call	0x634	; 0x634 <TLPSInit>
   ESRInit();        //Electronic Speed Regulator driver PWM output
     95e:	0e 94 56 02 	call	0x4ac	; 0x4ac <ESRInit>
   
   //Inputs
   KeypadInit();     //Keypad matrix buttons module
     962:	0c 94 b3 04 	jmp	0x966	; 0x966 <KeypadInit>

00000966 <KeypadInit>:
   RETURN: void
*** */
void KeypadInit(void) {
   //Setup keypad
   //Rows as outputs and Columns as inputs with external 8.2K pull-down resistors
   KEYPAD_PORT = 0x00;  //Set port as low
     966:	18 b8       	out	0x08, r1	; 8
   //DDRx=0 and PORTx=0 Input with Pull-Down
   //DDRx=1             Output

   //Columns are in PORTx7..4 as input, no internal pull-up
   //Rows are in PORTx3..0 as output
   KEYPAD_DDR &= ~(KEYPAD_COLS_MASK | KEYPAD_ROWS_MASK);    //Set PORTx as input (High Z state)
     968:	87 b1       	in	r24, 0x07	; 7
     96a:	17 b8       	out	0x07, r1	; 7
   _no_operation();
     96c:	00 00       	nop
     96e:	08 95       	ret

00000970 <KeypadTask>:
   DESCRIPTION: Keypad scan task callback function

   PARAMETERS: pTASK task. TASK structure
   RETURN: void
*** */
void KeypadTask(pTASK task) {
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
   uint8_t keyID = KEYPAD_NO_KEY_PRESS;   //Key pressed code name   
   uint8_t keyPressed  = 0;               //Key pressed scanned
   uint8_t keyDebounce = 0;               //Key pressed scanned for debounce

   //Setup keypad I/O port
   KEYPAD_PORT = 0xF0;                                      //Set rows output LOW (Low nibble: 0bxxxx-0000)
     97a:	80 ef       	ldi	r24, 0xF0	; 240
     97c:	88 b9       	out	0x08, r24	; 8
                                                            //Set columns input with pull up ((Low nibble: 0b1111-xxxx)
   KEYPAD_DDR &= ~(KEYPAD_COLS_MASK | KEYPAD_ROWS_MASK);    //Set keypad port as input (High Z state: 0b0000-0000)
     97e:	87 b1       	in	r24, 0x07	; 7
     980:	17 b8       	out	0x07, r1	; 7
   _no_operation();
     982:	00 00       	nop
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0

   //For each row, test every column...
   for (uint8_t row = 0; row < KEYPAD_ROWS; row++) {

      KEYPAD_PORT |= (0x01 << row);       //Set row[i] pin HIGH. (Low nibble: 0bxxxx-0001 -> 0bxxxx-1000)
     98a:	ee 24       	eor	r14, r14
     98c:	e3 94       	inc	r14
     98e:	f1 2c       	mov	r15, r1

      //..., test every column!
      for (uint8_t col = 0; col < KEYPAD_ROWS; col++) {

         _delay_us(KEYPAD_SCAN_DELAY);                //Stay HIGH for nN us.
         keyPressed = (KEYPAD_PIN & (0x10 << col));   //Read PINx for key pressed (0b0001-xxxx -> 0b1000-xxxx) 
     990:	e0 e1       	ldi	r30, 0x10	; 16
     992:	f0 e0       	ldi	r31, 0x00	; 0
   _no_operation();

   //For each row, test every column...
   for (uint8_t row = 0; row < KEYPAD_ROWS; row++) {

      KEYPAD_PORT |= (0x01 << row);       //Set row[i] pin HIGH. (Low nibble: 0bxxxx-0001 -> 0bxxxx-1000)
     994:	88 b1       	in	r24, 0x08	; 8
     996:	b7 01       	movw	r22, r14
     998:	0a 2e       	mov	r0, r26
     99a:	01 c0       	rjmp	.+2      	; 0x99e <KeypadTask+0x2e>
     99c:	66 0f       	add	r22, r22
     99e:	0a 94       	dec	r0
     9a0:	ea f7       	brpl	.-6      	; 0x99c <KeypadTask+0x2c>
     9a2:	86 2b       	or	r24, r22
     9a4:	88 b9       	out	0x08, r24	; 8
      KEYPAD_DDR  |= (0x01 << row);       //Set row[i] pin as output
     9a6:	87 b1       	in	r24, 0x07	; 7
     9a8:	86 2b       	or	r24, r22
     9aa:	87 b9       	out	0x07, r24	; 7
      _no_operation();                    //For port sync. See datasheet
     9ac:	00 00       	nop
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	38 2f       	mov	r19, r24
     9b4:	c7 ee       	ldi	r28, 0xE7	; 231
     9b6:	d3 e0       	ldi	r29, 0x03	; 3
     9b8:	21 97       	sbiw	r28, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <KeypadTask+0x48>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <KeypadTask+0x4e>
     9be:	00 00       	nop

      //..., test every column!
      for (uint8_t col = 0; col < KEYPAD_ROWS; col++) {

         _delay_us(KEYPAD_SCAN_DELAY);                //Stay HIGH for nN us.
         keyPressed = (KEYPAD_PIN & (0x10 << col));   //Read PINx for key pressed (0b0001-xxxx -> 0b1000-xxxx) 
     9c0:	26 b1       	in	r18, 0x06	; 6
     9c2:	af 01       	movw	r20, r30
     9c4:	08 2e       	mov	r0, r24
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <KeypadTask+0x5a>
     9c8:	44 0f       	add	r20, r20
     9ca:	0a 94       	dec	r0
     9cc:	ea f7       	brpl	.-6      	; 0x9c8 <KeypadTask+0x58>
     9ce:	24 23       	and	r18, r20
         
         //Key pressed? Debounce
         if (keyPressed) {
     9d0:	11 f5       	brne	.+68     	; 0xa16 <KeypadTask+0xa6>
     9d2:	01 96       	adiw	r24, 0x01	; 1
      KEYPAD_PORT |= (0x01 << row);       //Set row[i] pin HIGH. (Low nibble: 0bxxxx-0001 -> 0bxxxx-1000)
      KEYPAD_DDR  |= (0x01 << row);       //Set row[i] pin as output
      _no_operation();                    //For port sync. See datasheet

      //..., test every column!
      for (uint8_t col = 0; col < KEYPAD_ROWS; col++) {
     9d4:	84 30       	cpi	r24, 0x04	; 4
     9d6:	91 05       	cpc	r25, r1
     9d8:	61 f7       	brne	.-40     	; 0x9b2 <KeypadTask+0x42>
     9da:	30 e1       	ldi	r19, 0x10	; 16
            }
         }
      }  //END: for (uint8_t col = 0; col < KEYPAD_COLS; col++) 

      //Set it low and continue with other column
      KEYPAD_PORT &= ~(0x01 << row);
     9dc:	88 b1       	in	r24, 0x08	; 8
     9de:	60 95       	com	r22
     9e0:	86 23       	and	r24, r22
     9e2:	88 b9       	out	0x08, r24	; 8
      KEYPAD_DDR  &= ~(0x01 << row);
     9e4:	87 b1       	in	r24, 0x07	; 7
     9e6:	68 23       	and	r22, r24
     9e8:	67 b9       	out	0x07, r22	; 7
      _no_operation();
     9ea:	00 00       	nop

      //Process key
      if (keyID != KEYPAD_NO_KEY_PRESS) {
     9ec:	30 31       	cpi	r19, 0x10	; 16
     9ee:	01 f5       	brne	.+64     	; 0xa30 <KeypadTask+0xc0>
     9f0:	11 96       	adiw	r26, 0x01	; 1
     9f2:	1c 5f       	subi	r17, 0xFC	; 252
                                                            //Set columns input with pull up ((Low nibble: 0b1111-xxxx)
   KEYPAD_DDR &= ~(KEYPAD_COLS_MASK | KEYPAD_ROWS_MASK);    //Set keypad port as input (High Z state: 0b0000-0000)
   _no_operation();

   //For each row, test every column...
   for (uint8_t row = 0; row < KEYPAD_ROWS; row++) {
     9f4:	10 31       	cpi	r17, 0x10	; 16
     9f6:	71 f6       	brne	.-100    	; 0x994 <KeypadTask+0x24>

         g_dirty = 1;
      }
   }
   else {
      if (prevState == KEYPAD_KEYDOWN) {
     9f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9fc:	81 11       	cpse	r24, r1
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <KeypadTask+0x9a>
         g_keyPressed = KEYPAD_NO_KEY_PRESS;
     a00:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <g_keyPressed>
         prevState = KEYPAD_KEYUP;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
      if (keyCode != KEYPAD_NO_KEY_PRESS) {
         sprintf(str, "<Keypad: Task>\n[0x%02X]: %s\n\n", keyCode, KeypadDescription(keyCode));
         USARTPrintString(str);
      }
   #endif
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	08 95       	ret
     a16:	cb ed       	ldi	r28, 0xDB	; 219
     a18:	d5 e0       	ldi	r29, 0x05	; 5
     a1a:	21 97       	sbiw	r28, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <KeypadTask+0xaa>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <KeypadTask+0xb0>
     a20:	00 00       	nop
         
         //Key pressed? Debounce
         if (keyPressed) {
            
            _delay_us(KEYPAD_DEBOUNCE_DELAY);               //Wait for button debounce nN us
            keyDebounce = (KEYPAD_PIN & (0x10 << col));     //Read PINx for key pressed after debounce
     a22:	56 b1       	in	r21, 0x06	; 6
     a24:	45 23       	and	r20, r21

            //Key debounce?
            if (keyDebounce) {
     a26:	a9 f2       	breq	.-86     	; 0x9d2 <KeypadTask+0x62>

               //Is the same key?
               if (keyPressed == keyDebounce) {
     a28:	24 13       	cpse	r18, r20
     a2a:	d3 cf       	rjmp	.-90     	; 0x9d2 <KeypadTask+0x62>

                  //Get key code ID we use this formula (Row * TOTAL_COLUMNS) + Column
                  //keyID = pgm_read_byte(&g_KeyLookupTable[(row * KEYPAD_COLS) + col]);
                  keyID = (row * KEYPAD_COLS) + col;  
     a2c:	31 0f       	add	r19, r17
     a2e:	d6 cf       	rjmp	.-84     	; 0x9dc <KeypadTask+0x6c>
   KEY_ID keyCode = KeypadScan();

   //Save last key ID, don't let the same key pressed over and over, let stay in push down mode
   //until key is release
   if (keyCode != KEYPAD_NO_KEY_PRESS) {
      if (prevState == KEYPAD_KEYUP) {
     a30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	49 f7       	brne	.-46     	; 0xa0a <KeypadTask+0x9a>
         g_keyPressed = keyCode;
     a38:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <g_keyPressed>
         prevState = KEYPAD_KEYDOWN;
     a3c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

         g_dirty = 1;
     a40:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <g_dirty>
      if (keyCode != KEYPAD_NO_KEY_PRESS) {
         sprintf(str, "<Keypad: Task>\n[0x%02X]: %s\n\n", keyCode, KeypadDescription(keyCode));
         USARTPrintString(str);
      }
   #endif
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	08 95       	ret

00000a50 <KeypadGetLastKey>:

   PARAMETERS: pTASK task. TASK structure
   RETURN: KEY_ID. Key code or NO_KEY_PRESSED
*** */
KEY_ID KeypadGetLastKey(void) {
   uint8_t k = (g_dirty ? g_keyPressed : KEYPAD_NO_KEY_PRESS);     
     a50:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <g_dirty>
     a54:	81 11       	cpse	r24, r1
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <KeypadGetLastKey+0x10>
     a58:	80 e1       	ldi	r24, 0x10	; 16
   
   //Clean last key pressed
   g_dirty = 0;
     a5a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <g_dirty>
   
   return k;
}
     a5e:	08 95       	ret

   PARAMETERS: pTASK task. TASK structure
   RETURN: KEY_ID. Key code or NO_KEY_PRESSED
*** */
KEY_ID KeypadGetLastKey(void) {
   uint8_t k = (g_dirty ? g_keyPressed : KEYPAD_NO_KEY_PRESS);     
     a60:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_keyPressed>
   
   //Clean last key pressed
   g_dirty = 0;
     a64:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <g_dirty>
   
   return k;
}
     a68:	08 95       	ret

00000a6a <TaskInit>:

void TaskSetParameter(tTaskId id, void * parameter) {

   pTASK pTsk = FindTask(id);
   if (pTsk) {
      pTsk->parameter = parameter;
     a6a:	e6 ee       	ldi	r30, 0xE6	; 230
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	8f e0       	ldi	r24, 0x0F	; 15
     a70:	df 01       	movw	r26, r30
     a72:	98 2f       	mov	r25, r24
     a74:	1d 92       	st	X+, r1
     a76:	9a 95       	dec	r25
     a78:	e9 f7       	brne	.-6      	; 0xa74 <TaskInit+0xa>
     a7a:	11 86       	std	Z+9, r1	; 0x09
     a7c:	3f 96       	adiw	r30, 0x0f	; 15
     a7e:	a2 e0       	ldi	r26, 0x02	; 2
     a80:	e1 33       	cpi	r30, 0x31	; 49
     a82:	fa 07       	cpc	r31, r26
     a84:	a9 f7       	brne	.-22     	; 0xa70 <TaskInit+0x6>
     a86:	08 95       	ret

00000a88 <TaskCreate>:
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <taskId.2518>
     a9a:	e5 30       	cpi	r30, 0x05	; 5
     a9c:	00 f5       	brcc	.+64     	; 0xade <TaskCreate+0x56>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	8e 0f       	add	r24, r30
     aa2:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <taskId.2518>
     aa6:	9f e0       	ldi	r25, 0x0F	; 15
     aa8:	e9 9f       	mul	r30, r25
     aaa:	f0 01       	movw	r30, r0
     aac:	11 24       	eor	r1, r1
     aae:	ea 51       	subi	r30, 0x1A	; 26
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	80 83       	st	Z, r24
     ab4:	41 83       	std	Z+1, r20	; 0x01
     ab6:	52 83       	std	Z+2, r21	; 0x02
     ab8:	63 83       	std	Z+3, r22	; 0x03
     aba:	74 83       	std	Z+4, r23	; 0x04
     abc:	05 83       	std	Z+5, r16	; 0x05
     abe:	16 83       	std	Z+6, r17	; 0x06
     ac0:	27 83       	std	Z+7, r18	; 0x07
     ac2:	30 87       	std	Z+8, r19	; 0x08
     ac4:	e2 86       	std	Z+10, r14	; 0x0a
     ac6:	d4 86       	std	Z+12, r13	; 0x0c
     ac8:	c3 86       	std	Z+11, r12	; 0x0b
     aca:	b6 86       	std	Z+14, r11	; 0x0e
     acc:	a5 86       	std	Z+13, r10	; 0x0d
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	08 95       	ret
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	08 95       	ret

00000af0 <TaskSetStatus>:
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	98 0f       	add	r25, r24
     af8:	95 30       	cpi	r25, 0x05	; 5
     afa:	68 f4       	brcc	.+26     	; 0xb16 <TaskSetStatus+0x26>
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	2f e0       	ldi	r18, 0x0F	; 15
     b02:	28 9f       	mul	r18, r24
     b04:	e0 01       	movw	r28, r0
     b06:	29 9f       	mul	r18, r25
     b08:	d0 0d       	add	r29, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	ca 51       	subi	r28, 0x1A	; 26
     b0e:	de 4f       	sbci	r29, 0xFE	; 254
     b10:	69 87       	std	Y+9, r22	; 0x09
     b12:	61 30       	cpi	r22, 0x01	; 1
     b14:	19 f0       	breq	.+6      	; 0xb1c <TaskSetStatus+0x2c>
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret
     b1c:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
     b20:	69 83       	std	Y+1, r22	; 0x01
     b22:	7a 83       	std	Y+2, r23	; 0x02
     b24:	8b 83       	std	Y+3, r24	; 0x03
     b26:	9c 83       	std	Y+4, r25	; 0x04
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <TaskSetTimers>:
   }
}

void TaskSetTimers(tTaskId id, tTime start, tTime runEvery) {
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
static TASK g_tasks[TASK_MAX_TASKS];      //Total of tasks

//-- Task Helpers --//
static pTASK FindTask(tTaskId id) {

   if (id == 0 || id > TASK_MAX_TASKS) {
     b34:	9f ef       	ldi	r25, 0xFF	; 255
     b36:	98 0f       	add	r25, r24
     b38:	95 30       	cpi	r25, 0x05	; 5
     b3a:	60 f5       	brcc	.+88     	; 0xb94 <TaskSetTimers+0x66>
      return NULL;
   }

   return &g_tasks[id-1];
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	01 97       	sbiw	r24, 0x01	; 1

void TaskSetTimers(tTaskId id, tTime start, tTime runEvery) {

   pTASK pTsk = FindTask(id);
   if (pTsk) {
      pTsk->start = start != 0 ? start : pTsk->start;
     b40:	41 15       	cp	r20, r1
     b42:	51 05       	cpc	r21, r1
     b44:	61 05       	cpc	r22, r1
     b46:	71 05       	cpc	r23, r1
     b48:	49 f1       	breq	.+82     	; 0xb9c <TaskSetTimers+0x6e>
     b4a:	c4 2f       	mov	r28, r20
     b4c:	b5 2f       	mov	r27, r21
     b4e:	a6 2f       	mov	r26, r22
     b50:	47 2f       	mov	r20, r23
     b52:	5f e0       	ldi	r21, 0x0F	; 15
     b54:	58 9f       	mul	r21, r24
     b56:	f0 01       	movw	r30, r0
     b58:	59 9f       	mul	r21, r25
     b5a:	f0 0d       	add	r31, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	ea 51       	subi	r30, 0x1A	; 26
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	c1 83       	std	Z+1, r28	; 0x01
     b64:	b2 83       	std	Z+2, r27	; 0x02
     b66:	a3 83       	std	Z+3, r26	; 0x03
     b68:	44 83       	std	Z+4, r20	; 0x04
      pTsk->runEvery = runEvery != 0 ? runEvery : pTsk->runEvery;
     b6a:	01 15       	cp	r16, r1
     b6c:	11 05       	cpc	r17, r1
     b6e:	21 05       	cpc	r18, r1
     b70:	31 05       	cpc	r19, r1
     b72:	09 f5       	brne	.+66     	; 0xbb6 <TaskSetTimers+0x88>
     b74:	65 81       	ldd	r22, Z+5	; 0x05
     b76:	56 81       	ldd	r21, Z+6	; 0x06
     b78:	47 81       	ldd	r20, Z+7	; 0x07
     b7a:	20 85       	ldd	r18, Z+8	; 0x08
     b7c:	3f e0       	ldi	r19, 0x0F	; 15
     b7e:	38 9f       	mul	r19, r24
     b80:	f0 01       	movw	r30, r0
     b82:	39 9f       	mul	r19, r25
     b84:	f0 0d       	add	r31, r0
     b86:	11 24       	eor	r1, r1
     b88:	ea 51       	subi	r30, 0x1A	; 26
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	65 83       	std	Z+5, r22	; 0x05
     b8e:	56 83       	std	Z+6, r21	; 0x06
     b90:	47 83       	std	Z+7, r20	; 0x07
     b92:	20 87       	std	Z+8, r18	; 0x08
   }
}
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

void TaskSetTimers(tTaskId id, tTime start, tTime runEvery) {

   pTASK pTsk = FindTask(id);
   if (pTsk) {
      pTsk->start = start != 0 ? start : pTsk->start;
     b9c:	4f e0       	ldi	r20, 0x0F	; 15
     b9e:	48 9f       	mul	r20, r24
     ba0:	f0 01       	movw	r30, r0
     ba2:	49 9f       	mul	r20, r25
     ba4:	f0 0d       	add	r31, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	ea 51       	subi	r30, 0x1A	; 26
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	c1 81       	ldd	r28, Z+1	; 0x01
     bae:	b2 81       	ldd	r27, Z+2	; 0x02
     bb0:	a3 81       	ldd	r26, Z+3	; 0x03
     bb2:	44 81       	ldd	r20, Z+4	; 0x04
     bb4:	ce cf       	rjmp	.-100    	; 0xb52 <TaskSetTimers+0x24>
     bb6:	60 2f       	mov	r22, r16
     bb8:	51 2f       	mov	r21, r17
     bba:	42 2f       	mov	r20, r18
     bbc:	23 2f       	mov	r18, r19
     bbe:	de cf       	rjmp	.-68     	; 0xb7c <TaskSetTimers+0x4e>

00000bc0 <RunScheduler>:
/*** 

   Scheduler API

* ***/
void RunScheduler(void) {
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28

   //Check all tasks
   for (int i = 0; i < TASK_MAX_TASKS; i++) {
      
      pTASK pTsk = &g_tasks[i];
      if (pTsk == NULL || pTsk->status != TS_READY) {
     bc6:	c0 91 ef 01 	lds	r28, 0x01EF	; 0x8001ef <g_tasks+0x9>
     bca:	c1 30       	cpi	r28, 0x01	; 1
     bcc:	c1 f0       	breq	.+48     	; 0xbfe <RunScheduler+0x3e>
     bce:	c0 91 fe 01 	lds	r28, 0x01FE	; 0x8001fe <g_tasks+0x18>
     bd2:	c1 30       	cpi	r28, 0x01	; 1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <RunScheduler+0x18>
     bd6:	4a c0       	rjmp	.+148    	; 0xc6c <RunScheduler+0xac>
     bd8:	c0 91 0d 02 	lds	r28, 0x020D	; 0x80020d <g_tasks+0x27>
     bdc:	c1 30       	cpi	r28, 0x01	; 1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <RunScheduler+0x22>
     be0:	7d c0       	rjmp	.+250    	; 0xcdc <RunScheduler+0x11c>
     be2:	c0 91 1c 02 	lds	r28, 0x021C	; 0x80021c <g_tasks+0x36>
     be6:	c1 30       	cpi	r28, 0x01	; 1
     be8:	09 f4       	brne	.+2      	; 0xbec <RunScheduler+0x2c>
     bea:	b0 c0       	rjmp	.+352    	; 0xd4c <RunScheduler+0x18c>
     bec:	c0 91 2b 02 	lds	r28, 0x022B	; 0x80022b <g_tasks+0x45>
     bf0:	c1 30       	cpi	r28, 0x01	; 1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <RunScheduler+0x36>
     bf4:	e3 c0       	rjmp	.+454    	; 0xdbc <RunScheduler+0x1fc>
              pTsk->status = TS_READY;
            }
         }
      } //END-> if (Elapsed(pTsk->start) >= pTsk->runEvery)
   }
}
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret
      if (pTsk == NULL || pTsk->status != TS_READY) {
         continue;
      }

      //Execute?
      if (TimerElapsed(pTsk->start) >= pTsk->runEvery) {
     bfe:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <g_tasks+0x1>
     c02:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <g_tasks+0x2>
     c06:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <g_tasks+0x3>
     c0a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <g_tasks+0x4>
     c0e:	0e 94 38 07 	call	0xe70	; 0xe70 <TimerElapsed>
     c12:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <g_tasks+0x5>
     c16:	10 91 ec 01 	lds	r17, 0x01EC	; 0x8001ec <g_tasks+0x6>
     c1a:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <g_tasks+0x7>
     c1e:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <g_tasks+0x8>
     c22:	60 17       	cp	r22, r16
     c24:	71 07       	cpc	r23, r17
     c26:	82 07       	cpc	r24, r18
     c28:	93 07       	cpc	r25, r19
     c2a:	88 f2       	brcs	.-94     	; 0xbce <RunScheduler+0xe>
          
         pTsk->status = TS_RUNNING;    //SIGNAL as running
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_tasks+0x9>
         pTsk->callback(pTsk);         //Execute task function
     c32:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <g_tasks+0xb>
     c36:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <g_tasks+0xc>
     c3a:	86 ee       	ldi	r24, 0xE6	; 230
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	09 95       	icall
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
     c40:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
     c44:	60 93 e7 01 	sts	0x01E7, r22	; 0x8001e7 <g_tasks+0x1>
     c48:	70 93 e8 01 	sts	0x01E8, r23	; 0x8001e8 <g_tasks+0x2>
     c4c:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <g_tasks+0x3>
     c50:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <g_tasks+0x4>
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
     c54:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <g_tasks+0xa>
     c58:	88 23       	and	r24, r24
     c5a:	29 f0       	breq	.+10     	; 0xc66 <RunScheduler+0xa6>
            pTsk->status = TS_READY;   //SIGNAL as ready
         }
         else {
            if (pTsk->status != TS_IDLE) {
     c5c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_tasks+0x9>
     c60:	88 23       	and	r24, r24
     c62:	09 f4       	brne	.+2      	; 0xc66 <RunScheduler+0xa6>
     c64:	b4 cf       	rjmp	.-152    	; 0xbce <RunScheduler+0xe>
         pTsk->callback(pTsk);         //Execute task function
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
            pTsk->status = TS_READY;   //SIGNAL as ready
     c66:	c0 93 ef 01 	sts	0x01EF, r28	; 0x8001ef <g_tasks+0x9>
     c6a:	b1 cf       	rjmp	.-158    	; 0xbce <RunScheduler+0xe>
      if (pTsk == NULL || pTsk->status != TS_READY) {
         continue;
      }

      //Execute?
      if (TimerElapsed(pTsk->start) >= pTsk->runEvery) {
     c6c:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <g_tasks+0x10>
     c70:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <g_tasks+0x11>
     c74:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <g_tasks+0x12>
     c78:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <g_tasks+0x13>
     c7c:	0e 94 38 07 	call	0xe70	; 0xe70 <TimerElapsed>
     c80:	00 91 fa 01 	lds	r16, 0x01FA	; 0x8001fa <g_tasks+0x14>
     c84:	10 91 fb 01 	lds	r17, 0x01FB	; 0x8001fb <g_tasks+0x15>
     c88:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <g_tasks+0x16>
     c8c:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <g_tasks+0x17>
     c90:	60 17       	cp	r22, r16
     c92:	71 07       	cpc	r23, r17
     c94:	82 07       	cpc	r24, r18
     c96:	93 07       	cpc	r25, r19
     c98:	08 f4       	brcc	.+2      	; 0xc9c <RunScheduler+0xdc>
     c9a:	9e cf       	rjmp	.-196    	; 0xbd8 <RunScheduler+0x18>
          
         pTsk->status = TS_RUNNING;    //SIGNAL as running
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <g_tasks+0x18>
         pTsk->callback(pTsk);         //Execute task function
     ca2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <g_tasks+0x1a>
     ca6:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <g_tasks+0x1b>
     caa:	85 ef       	ldi	r24, 0xF5	; 245
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	09 95       	icall
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
     cb0:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
     cb4:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <g_tasks+0x10>
     cb8:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <g_tasks+0x11>
     cbc:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_tasks+0x12>
     cc0:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <g_tasks+0x13>
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
     cc4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <g_tasks+0x19>
     cc8:	88 23       	and	r24, r24
     cca:	29 f0       	breq	.+10     	; 0xcd6 <RunScheduler+0x116>
            pTsk->status = TS_READY;   //SIGNAL as ready
         }
         else {
            if (pTsk->status != TS_IDLE) {
     ccc:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <g_tasks+0x18>
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <RunScheduler+0x116>
     cd4:	81 cf       	rjmp	.-254    	; 0xbd8 <RunScheduler+0x18>
         pTsk->callback(pTsk);         //Execute task function
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
            pTsk->status = TS_READY;   //SIGNAL as ready
     cd6:	c0 93 fe 01 	sts	0x01FE, r28	; 0x8001fe <g_tasks+0x18>
     cda:	7e cf       	rjmp	.-260    	; 0xbd8 <RunScheduler+0x18>
      if (pTsk == NULL || pTsk->status != TS_READY) {
         continue;
      }

      //Execute?
      if (TimerElapsed(pTsk->start) >= pTsk->runEvery) {
     cdc:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <g_tasks+0x1f>
     ce0:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <g_tasks+0x20>
     ce4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <g_tasks+0x21>
     ce8:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <g_tasks+0x22>
     cec:	0e 94 38 07 	call	0xe70	; 0xe70 <TimerElapsed>
     cf0:	00 91 09 02 	lds	r16, 0x0209	; 0x800209 <g_tasks+0x23>
     cf4:	10 91 0a 02 	lds	r17, 0x020A	; 0x80020a <g_tasks+0x24>
     cf8:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <g_tasks+0x25>
     cfc:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <g_tasks+0x26>
     d00:	60 17       	cp	r22, r16
     d02:	71 07       	cpc	r23, r17
     d04:	82 07       	cpc	r24, r18
     d06:	93 07       	cpc	r25, r19
     d08:	08 f4       	brcc	.+2      	; 0xd0c <RunScheduler+0x14c>
     d0a:	6b cf       	rjmp	.-298    	; 0xbe2 <RunScheduler+0x22>
          
         pTsk->status = TS_RUNNING;    //SIGNAL as running
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <g_tasks+0x27>
         pTsk->callback(pTsk);         //Execute task function
     d12:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <g_tasks+0x29>
     d16:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <g_tasks+0x2a>
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	09 95       	icall
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
     d20:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
     d24:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <g_tasks+0x1f>
     d28:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <g_tasks+0x20>
     d2c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <g_tasks+0x21>
     d30:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <g_tasks+0x22>
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
     d34:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <g_tasks+0x28>
     d38:	88 23       	and	r24, r24
     d3a:	29 f0       	breq	.+10     	; 0xd46 <RunScheduler+0x186>
            pTsk->status = TS_READY;   //SIGNAL as ready
         }
         else {
            if (pTsk->status != TS_IDLE) {
     d3c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <g_tasks+0x27>
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <RunScheduler+0x186>
     d44:	4e cf       	rjmp	.-356    	; 0xbe2 <RunScheduler+0x22>
         pTsk->callback(pTsk);         //Execute task function
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
            pTsk->status = TS_READY;   //SIGNAL as ready
     d46:	c0 93 0d 02 	sts	0x020D, r28	; 0x80020d <g_tasks+0x27>
     d4a:	4b cf       	rjmp	.-362    	; 0xbe2 <RunScheduler+0x22>
      if (pTsk == NULL || pTsk->status != TS_READY) {
         continue;
      }

      //Execute?
      if (TimerElapsed(pTsk->start) >= pTsk->runEvery) {
     d4c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <g_tasks+0x2e>
     d50:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <g_tasks+0x2f>
     d54:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <g_tasks+0x30>
     d58:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <g_tasks+0x31>
     d5c:	0e 94 38 07 	call	0xe70	; 0xe70 <TimerElapsed>
     d60:	00 91 18 02 	lds	r16, 0x0218	; 0x800218 <g_tasks+0x32>
     d64:	10 91 19 02 	lds	r17, 0x0219	; 0x800219 <g_tasks+0x33>
     d68:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <g_tasks+0x34>
     d6c:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <g_tasks+0x35>
     d70:	60 17       	cp	r22, r16
     d72:	71 07       	cpc	r23, r17
     d74:	82 07       	cpc	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	08 f4       	brcc	.+2      	; 0xd7c <RunScheduler+0x1bc>
     d7a:	38 cf       	rjmp	.-400    	; 0xbec <RunScheduler+0x2c>
          
         pTsk->status = TS_RUNNING;    //SIGNAL as running
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <g_tasks+0x36>
         pTsk->callback(pTsk);         //Execute task function
     d82:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <g_tasks+0x38>
     d86:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <g_tasks+0x39>
     d8a:	83 e1       	ldi	r24, 0x13	; 19
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	09 95       	icall
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
     d90:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
     d94:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <g_tasks+0x2e>
     d98:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <g_tasks+0x2f>
     d9c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <g_tasks+0x30>
     da0:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <g_tasks+0x31>
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
     da4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <g_tasks+0x37>
     da8:	88 23       	and	r24, r24
     daa:	29 f0       	breq	.+10     	; 0xdb6 <RunScheduler+0x1f6>
            pTsk->status = TS_READY;   //SIGNAL as ready
         }
         else {
            if (pTsk->status != TS_IDLE) {
     dac:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <g_tasks+0x36>
     db0:	88 23       	and	r24, r24
     db2:	09 f4       	brne	.+2      	; 0xdb6 <RunScheduler+0x1f6>
     db4:	1b cf       	rjmp	.-458    	; 0xbec <RunScheduler+0x2c>
         pTsk->callback(pTsk);         //Execute task function
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
            pTsk->status = TS_READY;   //SIGNAL as ready
     db6:	c0 93 1c 02 	sts	0x021C, r28	; 0x80021c <g_tasks+0x36>
     dba:	18 cf       	rjmp	.-464    	; 0xbec <RunScheduler+0x2c>
      if (pTsk == NULL || pTsk->status != TS_READY) {
         continue;
      }

      //Execute?
      if (TimerElapsed(pTsk->start) >= pTsk->runEvery) {
     dbc:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <g_tasks+0x3d>
     dc0:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <g_tasks+0x3e>
     dc4:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <g_tasks+0x3f>
     dc8:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <g_tasks+0x40>
     dcc:	0e 94 38 07 	call	0xe70	; 0xe70 <TimerElapsed>
     dd0:	00 91 27 02 	lds	r16, 0x0227	; 0x800227 <g_tasks+0x41>
     dd4:	10 91 28 02 	lds	r17, 0x0228	; 0x800228 <g_tasks+0x42>
     dd8:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <g_tasks+0x43>
     ddc:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <g_tasks+0x44>
     de0:	60 17       	cp	r22, r16
     de2:	71 07       	cpc	r23, r17
     de4:	82 07       	cpc	r24, r18
     de6:	93 07       	cpc	r25, r19
     de8:	08 f4       	brcc	.+2      	; 0xdec <RunScheduler+0x22c>
     dea:	05 cf       	rjmp	.-502    	; 0xbf6 <RunScheduler+0x36>
          
         pTsk->status = TS_RUNNING;    //SIGNAL as running
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <g_tasks+0x45>
         pTsk->callback(pTsk);         //Execute task function
     df2:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <g_tasks+0x47>
     df6:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <g_tasks+0x48>
     dfa:	82 e2       	ldi	r24, 0x22	; 34
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	09 95       	icall
         pTsk->start = TimerNow();     //SIGNAL for next execution time, if the task is periodic
     e00:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
     e04:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <g_tasks+0x3d>
     e08:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <g_tasks+0x3e>
     e0c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <g_tasks+0x3f>
     e10:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <g_tasks+0x40>
         
         // Periodic task are always running, aperiodic task run once and then stop until they are signal again
         if (pTsk->type == TT_PERIODIC) {
     e14:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <g_tasks+0x46>
     e18:	88 23       	and	r24, r24
     e1a:	29 f0       	breq	.+10     	; 0xe26 <RunScheduler+0x266>
            pTsk->status = TS_READY;   //SIGNAL as ready
         }
         else {
            if (pTsk->status != TS_IDLE) {
     e1c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <g_tasks+0x45>
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <RunScheduler+0x266>
     e24:	e8 ce       	rjmp	.-560    	; 0xbf6 <RunScheduler+0x36>
              pTsk->status = TS_READY;
     e26:	c0 93 2b 02 	sts	0x022B, r28	; 0x80022b <g_tasks+0x45>
            }
         }
      } //END-> if (Elapsed(pTsk->start) >= pTsk->runEvery)
   }
}
     e2a:	e5 ce       	rjmp	.-566    	; 0xbf6 <RunScheduler+0x36>

00000e2c <TimerInit>:
   RETURN: void
*** */
void TimerInit(void) {

   //Setup Timer for tasks timing
   TCCR2A |= TIMER_CTC_MODE;	            //Set Timer 2 in CTC Mode, Mode = 0x02
     e2c:	e0 eb       	ldi	r30, 0xB0	; 176
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	82 60       	ori	r24, 0x02	; 2
     e34:	80 83       	st	Z, r24
   TIMSK2 |= TIMER_OUTPUT_COMPARE_IEA;    //Timer2 OCCR2A Interrupt Enabled
     e36:	e0 e7       	ldi	r30, 0x70	; 112
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	80 83       	st	Z, r24

   //Clear Timer on Compare Match (CTC) Mode setup
   TCNT2 = 0x06;     //Timer counter base
     e40:	86 e0       	ldi	r24, 0x06	; 6
     e42:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
   OCR2A = 0xF9;     //OCRn  = ((Fcpu / CLKprescaler) * DesiredTimeInSeconds) - 1
     e46:	89 ef       	ldi	r24, 0xF9	; 249
     e48:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                     //      = 0.000004uS * 249 = 0.0000996uS + 0.000004uS (IRQ set 1 clock cycle)
                     //      = 0.001uS * 1000 = 1ms


   //Start Timer
   TCCR2B |= TIMER_DIV32_PRESCALER;
     e4c:	e1 eb       	ldi	r30, 0xB1	; 177
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	83 60       	ori	r24, 0x03	; 3
     e54:	80 83       	st	Z, r24
     e56:	08 95       	ret

00000e58 <TimerNow>:
   RETURN: tTime. In milliseconds
*** */
tTime TimerNow(void) {
   tTime now = 0;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e58:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e5a:	f8 94       	cli
	   now = g_timeMills;
     e5c:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <g_timeMills>
     e60:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <g_timeMills+0x1>
     e64:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <g_timeMills+0x2>
     e68:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <g_timeMills+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e6c:	2f bf       	out	0x3f, r18	; 63
	}

	return now;
}
     e6e:	08 95       	ret

00000e70 <TimerElapsed>:
   DESCRIPTION: Get elapsed time from since to Now()

   PARAMETERS: tTime.
   RETURN: tTime. In milliseconds
*** */
tTime TimerElapsed(tTime since) {
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
   tTime now = 0;

   //Disable interrupts
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e78:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e7a:	f8 94       	cli
      now = g_timeMills;
     e7c:	c0 90 31 02 	lds	r12, 0x0231	; 0x800231 <g_timeMills>
     e80:	d0 90 32 02 	lds	r13, 0x0232	; 0x800232 <g_timeMills+0x1>
     e84:	e0 90 33 02 	lds	r14, 0x0233	; 0x800233 <g_timeMills+0x2>
     e88:	f0 90 34 02 	lds	r15, 0x0234	; 0x800234 <g_timeMills+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e8c:	2f bf       	out	0x3f, r18	; 63
   }

   if (now >= since) {
      return (now - since);
     e8e:	a7 01       	movw	r20, r14
     e90:	96 01       	movw	r18, r12
     e92:	26 1b       	sub	r18, r22
     e94:	37 0b       	sbc	r19, r23
     e96:	48 0b       	sbc	r20, r24
     e98:	59 0b       	sbc	r21, r25
   //Disable interrupts
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      now = g_timeMills;
   }

   if (now >= since) {
     e9a:	c6 16       	cp	r12, r22
     e9c:	d7 06       	cpc	r13, r23
     e9e:	e8 06       	cpc	r14, r24
     ea0:	f9 06       	cpc	r15, r25
     ea2:	58 f4       	brcc	.+22     	; 0xeba <TimerElapsed+0x4a>
   }

   //Rollover = unsigned long = 32bits
   //         = 0xFFFFFFFF     sec.   min. hrs. days
   //         = 4294967295ms / 1000 / 60 / 60 / 24 = 49.71 days running for a car!!
   return (now + (TIMER_MAX_TIME - since));
     ea4:	ca 01       	movw	r24, r20
     ea6:	b9 01       	movw	r22, r18
     ea8:	61 50       	subi	r22, 0x01	; 1
     eaa:	71 09       	sbc	r23, r1
     eac:	81 09       	sbc	r24, r1
     eae:	91 09       	sbc	r25, r1
}
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	08 95       	ret
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      now = g_timeMills;
   }

   if (now >= since) {
      return (now - since);
     eba:	ca 01       	movw	r24, r20
     ebc:	b9 01       	movw	r22, r18

   //Rollover = unsigned long = 32bits
   //         = 0xFFFFFFFF     sec.   min. hrs. days
   //         = 4294967295ms / 1000 / 60 / 60 / 24 = 49.71 days running for a car!!
   return (now + (TIMER_MAX_TIME - since));
}
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	df 90       	pop	r13
     ec4:	cf 90       	pop	r12
     ec6:	08 95       	ret

00000ec8 <__vector_9>:
                variables that gonna be used in main() tasks
   
   PARAMETERS: n/a
   RETURN: n/a
*** */
ISR(TIMER2_COMPA_vect, ISR_BLOCK) {
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27

   //Volatile variables must be read from memory on every access and not from register
	tTime tmp = g_timeMills;
     eda:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <g_timeMills>
     ede:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <g_timeMills+0x1>
     ee2:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <g_timeMills+0x2>
     ee6:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <g_timeMills+0x3>

   //Increment counter
   g_timeMills = ++tmp;
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	a1 1d       	adc	r26, r1
     eee:	b1 1d       	adc	r27, r1
     ef0:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <g_timeMills>
     ef4:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <g_timeMills+0x1>
     ef8:	a0 93 33 02 	sts	0x0233, r26	; 0x800233 <g_timeMills+0x2>
     efc:	b0 93 34 02 	sts	0x0234, r27	; 0x800234 <g_timeMills+0x3>

   //Reset timer counter base
   TCNT2 = 0x06;   
     f00:	86 e0       	ldi	r24, 0x06	; 6
     f02:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   //Timer2 ISR wakeup automatic in SLEEP_MODE_PWR_SAVE mode
   //sleep_disable();
}
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <TempSensorsTask>:
                Read Top, Bottom, Passenger and Outside mirror temperature sensors for automatic temperature controls

   PARAMETERS: pTASK task. UNIT_STATE model unit controller 
   RETURN: void
*** */
void TempSensorsTask(pTASK task) {
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
   //Get task parameter
   pTEMP_SENSORS_INFO pSensorInfo = (pTEMP_SENSORS_INFO) task->parameter;
     f1c:	fc 01       	movw	r30, r24
     f1e:	c5 85       	ldd	r28, Z+13	; 0x0d
     f20:	d6 85       	ldd	r29, Z+14	; 0x0e
   if (pSensorInfo == NULL) {
     f22:	20 97       	sbiw	r28, 0x00	; 0
     f24:	09 f4       	brne	.+2      	; 0xf28 <TempSensorsTask+0x10>
     f26:	0c c1       	rjmp	.+536    	; 0x1140 <TempSensorsTask+0x228>
   RETURN: float: Temperature in Celsius degree
*** */
static float TSGetTemperatureBeta(uint16_t tsChannel, uint16_t fixedR0, uint16_t nominalR0, uint16_t Bcoefficient) {
   
   // Read NTC temp sensor from ADC channel
   uint16_t tsADC = ADCReadAsValue(tsChannel);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 18 04 	call	0x830	; 0x830 <ADCReadAsValue>
   // Get NTC read voltage as resistor
   // Equation. Rntc = FIXED_RESISTOR / ((1023/ADC) - 1)
   float Rntc = fixedR0 / ((ADC_RESOLUTION / tsADC) - 1);
   float fTemp = 0.0;
  
   fTemp = Rntc / nominalR0;                          //Rntc/R0
     f2e:	bc 01       	movw	r22, r24
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__floatunsisf>
     f38:	9b 01       	movw	r18, r22
     f3a:	ac 01       	movw	r20, r24
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	80 e8       	ldi	r24, 0x80	; 128
     f42:	94 e4       	ldi	r25, 0x44	; 68
     f44:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
     f54:	9b 01       	movw	r18, r22
     f56:	ac 01       	movw	r20, r24
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e8       	ldi	r23, 0x80	; 128
     f5c:	8b eb       	ldi	r24, 0xBB	; 187
     f5e:	94 e4       	ldi	r25, 0x44	; 68
     f60:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e8       	ldi	r19, 0x80	; 128
     f68:	49 e0       	ldi	r20, 0x09	; 9
     f6a:	55 e4       	ldi	r21, 0x45	; 69
     f6c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp = log(fTemp);                                //ln(Rntc/R0)
     f70:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <log>
   fTemp /= Bcoefficient;                             //1/B * ln(Rntc/R0) == ln(Rntc/R0)/B
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e6       	ldi	r19, 0x60	; 96
     f78:	4a e7       	ldi	r20, 0x7A	; 122
     f7a:	55 e4       	ldi	r21, 0x45	; 69
     f7c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp += 0.00335401643468052993459667952373f;      //1/T0 + 1/B * ln(R/R0). 1/T0==1/(25+273.15)==1/298.15==0,00335402...
     f80:	2f e0       	ldi	r18, 0x0F	; 15
     f82:	3f ec       	ldi	r19, 0xCF	; 207
     f84:	4b e5       	ldi	r20, 0x5B	; 91
     f86:	5b e3       	ldi	r21, 0x3B	; 59
     f88:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__addsf3>
     f8c:	9b 01       	movw	r18, r22
     f8e:	ac 01       	movw	r20, r24
   fTemp = 1/fTemp;                                   //Inverse -> 1/T=1/T0+1/B*ln(R/R0) -> T = 1 / ( 1/T0 + 1/B*ln(R/R0) )
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 e8       	ldi	r24, 0x80	; 128
     f96:	9f e3       	ldi	r25, 0x3F	; 63
     f98:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   if (pSensorInfo == NULL) {
      return;
   }

   //Read NTC sensors
   pSensorInfo->Passenger = TSPassenger();
     f9c:	23 e3       	ldi	r18, 0x33	; 51
     f9e:	33 e9       	ldi	r19, 0x93	; 147
     fa0:	48 e8       	ldi	r20, 0x88	; 136
     fa2:	53 e4       	ldi	r21, 0x43	; 67
     fa4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
     fa8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__fixsfsi>
     fac:	6b 83       	std	Y+3, r22	; 0x03
   RETURN: float: Temperature in Celsius degree
*** */
static float TSGetTemperatureBeta(uint16_t tsChannel, uint16_t fixedR0, uint16_t nominalR0, uint16_t Bcoefficient) {
   
   // Read NTC temp sensor from ADC channel
   uint16_t tsADC = ADCReadAsValue(tsChannel);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0e 94 18 04 	call	0x830	; 0x830 <ADCReadAsValue>
   // Get NTC read voltage as resistor
   // Equation. Rntc = FIXED_RESISTOR / ((1023/ADC) - 1)
   float Rntc = fixedR0 / ((ADC_RESOLUTION / tsADC) - 1);
   float fTemp = 0.0;
  
   fTemp = Rntc / nominalR0;                          //Rntc/R0
     fb4:	bc 01       	movw	r22, r24
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__floatunsisf>
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	94 e4       	ldi	r25, 0x44	; 68
     fca:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
     fda:	9b 01       	movw	r18, r22
     fdc:	ac 01       	movw	r20, r24
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	78 ee       	ldi	r23, 0xE8	; 232
     fe2:	80 e8       	ldi	r24, 0x80	; 128
     fe4:	96 e4       	ldi	r25, 0x46	; 70
     fe6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e4       	ldi	r19, 0x40	; 64
     fee:	4c e1       	ldi	r20, 0x1C	; 28
     ff0:	56 e4       	ldi	r21, 0x46	; 70
     ff2:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp = log(fTemp);                                //ln(Rntc/R0)
     ff6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <log>
   fTemp /= Bcoefficient;                             //1/B * ln(Rntc/R0) == ln(Rntc/R0)/B
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e1       	ldi	r19, 0x10	; 16
     ffe:	46 e7       	ldi	r20, 0x76	; 118
    1000:	55 e4       	ldi	r21, 0x45	; 69
    1002:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp += 0.00335401643468052993459667952373f;      //1/T0 + 1/B * ln(R/R0). 1/T0==1/(25+273.15)==1/298.15==0,00335402...
    1006:	2f e0       	ldi	r18, 0x0F	; 15
    1008:	3f ec       	ldi	r19, 0xCF	; 207
    100a:	4b e5       	ldi	r20, 0x5B	; 91
    100c:	5b e3       	ldi	r21, 0x3B	; 59
    100e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__addsf3>
    1012:	9b 01       	movw	r18, r22
    1014:	ac 01       	movw	r20, r24
   fTemp = 1/fTemp;                                   //Inverse -> 1/T=1/T0+1/B*ln(R/R0) -> T = 1 / ( 1/T0 + 1/B*ln(R/R0) )
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	9f e3       	ldi	r25, 0x3F	; 63
    101e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
      return;
   }

   //Read NTC sensors
   pSensorInfo->Passenger = TSPassenger();
   pSensorInfo->OutsideMirror = TSOutsideMirror();
    1022:	23 e3       	ldi	r18, 0x33	; 51
    1024:	33 e9       	ldi	r19, 0x93	; 147
    1026:	48 e8       	ldi	r20, 0x88	; 136
    1028:	53 e4       	ldi	r21, 0x43	; 67
    102a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
    102e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__fixsfsi>
    1032:	6a 83       	std	Y+2, r22	; 0x02
   RETURN: float: Temperature in Celsius degree
*** */
static float TSGetTemperatureBeta(uint16_t tsChannel, uint16_t fixedR0, uint16_t nominalR0, uint16_t Bcoefficient) {
   
   // Read NTC temp sensor from ADC channel
   uint16_t tsADC = ADCReadAsValue(tsChannel);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	0e 94 18 04 	call	0x830	; 0x830 <ADCReadAsValue>
   // Get NTC read voltage as resistor
   // Equation. Rntc = FIXED_RESISTOR / ((1023/ADC) - 1)
   float Rntc = fixedR0 / ((ADC_RESOLUTION / tsADC) - 1);
   float fTemp = 0.0;
  
   fTemp = Rntc / nominalR0;                          //Rntc/R0
    103a:	bc 01       	movw	r22, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__floatunsisf>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e8       	ldi	r24, 0x80	; 128
    104e:	94 e4       	ldi	r25, 0x44	; 68
    1050:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	85 e7       	ldi	r24, 0x75	; 117
    106a:	95 e4       	ldi	r25, 0x45	; 69
    106c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e4       	ldi	r19, 0x40	; 64
    1074:	4c e1       	ldi	r20, 0x1C	; 28
    1076:	56 e4       	ldi	r21, 0x46	; 70
    1078:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp = log(fTemp);                                //ln(Rntc/R0)
    107c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <log>
   fTemp /= Bcoefficient;                             //1/B * ln(Rntc/R0) == ln(Rntc/R0)/B
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e1       	ldi	r19, 0x10	; 16
    1084:	46 e7       	ldi	r20, 0x76	; 118
    1086:	55 e4       	ldi	r21, 0x45	; 69
    1088:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp += 0.00335401643468052993459667952373f;      //1/T0 + 1/B * ln(R/R0). 1/T0==1/(25+273.15)==1/298.15==0,00335402...
    108c:	2f e0       	ldi	r18, 0x0F	; 15
    108e:	3f ec       	ldi	r19, 0xCF	; 207
    1090:	4b e5       	ldi	r20, 0x5B	; 91
    1092:	5b e3       	ldi	r21, 0x3B	; 59
    1094:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__addsf3>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
   fTemp = 1/fTemp;                                   //Inverse -> 1/T=1/T0+1/B*ln(R/R0) -> T = 1 / ( 1/T0 + 1/B*ln(R/R0) )
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	80 e8       	ldi	r24, 0x80	; 128
    10a2:	9f e3       	ldi	r25, 0x3F	; 63
    10a4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   }

   //Read NTC sensors
   pSensorInfo->Passenger = TSPassenger();
   pSensorInfo->OutsideMirror = TSOutsideMirror();
   pSensorInfo->BottomBlended = TSBottomBlended();
    10a8:	23 e3       	ldi	r18, 0x33	; 51
    10aa:	33 e9       	ldi	r19, 0x93	; 147
    10ac:	48 e8       	ldi	r20, 0x88	; 136
    10ae:	53 e4       	ldi	r21, 0x43	; 67
    10b0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
    10b4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__fixsfsi>
    10b8:	69 83       	std	Y+1, r22	; 0x01
   RETURN: float: Temperature in Celsius degree
*** */
static float TSGetTemperatureBeta(uint16_t tsChannel, uint16_t fixedR0, uint16_t nominalR0, uint16_t Bcoefficient) {
   
   // Read NTC temp sensor from ADC channel
   uint16_t tsADC = ADCReadAsValue(tsChannel);
    10ba:	85 e0       	ldi	r24, 0x05	; 5
    10bc:	0e 94 18 04 	call	0x830	; 0x830 <ADCReadAsValue>
   // Get NTC read voltage as resistor
   // Equation. Rntc = FIXED_RESISTOR / ((1023/ADC) - 1)
   float Rntc = fixedR0 / ((ADC_RESOLUTION / tsADC) - 1);
   float fTemp = 0.0;
  
   fTemp = Rntc / nominalR0;                          //Rntc/R0
    10c0:	bc 01       	movw	r22, r24
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__floatunsisf>
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	94 e4       	ldi	r25, 0x44	; 68
    10d6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
    10e6:	9b 01       	movw	r18, r22
    10e8:	ac 01       	movw	r20, r24
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	85 e7       	ldi	r24, 0x75	; 117
    10f0:	95 e4       	ldi	r25, 0x45	; 69
    10f2:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e4       	ldi	r19, 0x40	; 64
    10fa:	4c e1       	ldi	r20, 0x1C	; 28
    10fc:	56 e4       	ldi	r21, 0x46	; 70
    10fe:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp = log(fTemp);                                //ln(Rntc/R0)
    1102:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <log>
   fTemp /= Bcoefficient;                             //1/B * ln(Rntc/R0) == ln(Rntc/R0)/B
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e1       	ldi	r19, 0x10	; 16
    110a:	46 e7       	ldi	r20, 0x76	; 118
    110c:	55 e4       	ldi	r21, 0x45	; 69
    110e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
   fTemp += 0.00335401643468052993459667952373f;      //1/T0 + 1/B * ln(R/R0). 1/T0==1/(25+273.15)==1/298.15==0,00335402...
    1112:	2f e0       	ldi	r18, 0x0F	; 15
    1114:	3f ec       	ldi	r19, 0xCF	; 207
    1116:	4b e5       	ldi	r20, 0x5B	; 91
    1118:	5b e3       	ldi	r21, 0x3B	; 59
    111a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__addsf3>
    111e:	9b 01       	movw	r18, r22
    1120:	ac 01       	movw	r20, r24
   fTemp = 1/fTemp;                                   //Inverse -> 1/T=1/T0+1/B*ln(R/R0) -> T = 1 / ( 1/T0 + 1/B*ln(R/R0) )
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	80 e8       	ldi	r24, 0x80	; 128
    1128:	9f e3       	ldi	r25, 0x3F	; 63
    112a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>

   //Read NTC sensors
   pSensorInfo->Passenger = TSPassenger();
   pSensorInfo->OutsideMirror = TSOutsideMirror();
   pSensorInfo->BottomBlended = TSBottomBlended();
   pSensorInfo->TopBlended = TSTopBlended();
    112e:	23 e3       	ldi	r18, 0x33	; 51
    1130:	33 e9       	ldi	r19, 0x93	; 147
    1132:	48 e8       	ldi	r20, 0x88	; 136
    1134:	53 e4       	ldi	r21, 0x43	; 67
    1136:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
    113a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__fixsfsi>
    113e:	68 83       	st	Y, r22

   #ifdef DEBUG_TASK
      sprintf(str, "<Temperature Sensors: Task>\nPassenger: %d\nOutside Mirror: %d\nBottom Blended: %d\nTop Blended: %d\n\n", pSensorInfo->Passenger, pSensorInfo->OutsideMirror, pSensorInfo->BottomBlended, pSensorInfo->TopBlended);
      USARTPrintString(str);
   #endif
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <ExtTempTask>:
   PARAMETERS: pTASK task. UNIT_STATE model for automatic controller 
   RETURN: void
*** */
void ExtTempTask(pTASK task) {
   //Get task parameter
   pUNIT_STATE pUnitState = (pUNIT_STATE) task->parameter;
    1146:	dc 01       	movw	r26, r24
    1148:	1d 96       	adiw	r26, 0x0d	; 13
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	1e 97       	sbiw	r26, 0x0e	; 14
   if (pUnitState == NULL) {
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	31 f0       	breq	.+12     	; 0x1160 <ExtTempTask+0x1a>
      return;
   }

   //Stop Aperiodic task
   task->status = TS_IDLE;
    1154:	19 96       	adiw	r26, 0x09	; 9
    1156:	1c 92       	st	X, r1

   //SIGNAL: Extern Temperature display changed
   pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
    1158:	82 85       	ldd	r24, Z+10	; 0x0a
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    115a:	8f 7b       	andi	r24, 0xBF	; 191
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	82 87       	std	Z+10, r24	; 0x0a
    1160:	08 95       	ret

00001162 <UnitInit>:

   PARAMETERS: void
   RETURN: void
*** */
void UnitInit(pUNIT_STATE pUnitState, pADM_POSITION_INFO pPosInfo, 
              pESR_SPEED_INFO pSpeedInfo, pTEMP_SENSORS_INFO pSensorInfo) {
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
   
   // Initialize data structures 
   memset(pUnitState, 0, sizeof(UNIT_STATE));
    1168:	8b e0       	ldi	r24, 0x0B	; 11
    116a:	fe 01       	movw	r30, r28
    116c:	11 92       	st	Z+, r1
    116e:	8a 95       	dec	r24
    1170:	e9 f7       	brne	.-6      	; 0x116c <UnitInit+0xa>
   memset(pPosInfo, 0, sizeof(ADM_POSITION_INFO));
    1172:	87 e0       	ldi	r24, 0x07	; 7
    1174:	fb 01       	movw	r30, r22
    1176:	11 92       	st	Z+, r1
    1178:	8a 95       	dec	r24
    117a:	e9 f7       	brne	.-6      	; 0x1176 <UnitInit+0x14>
   memset(pSpeedInfo, 0, sizeof(ESR_SPEED_INFO));
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	fa 01       	movw	r30, r20
    1180:	11 92       	st	Z+, r1
    1182:	8a 95       	dec	r24
    1184:	e9 f7       	brne	.-6      	; 0x1180 <UnitInit+0x1e>
   memset(pSensorInfo, 0, sizeof(TEMP_SENSORS_INFO));
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	f9 01       	movw	r30, r18
    118a:	11 92       	st	Z+, r1
    118c:	8a 95       	dec	r24
    118e:	e9 f7       	brne	.-6      	; 0x118a <UnitInit+0x28>

   // Unit resetting
   pUnitState->Status = US_RESET;
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	88 83       	st	Y, r24

   // Load unit last state from EEPROM data. From AUTOmatic or Working last state
   pUnitState->Auto = EEPROMRead_byte(EEADDRSS_US_AUTOMATIC_WRK);
    1194:	89 e0       	ldi	r24, 0x09	; 9
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    119c:	89 83       	std	Y+1, r24	; 0x01
   pUnitState->Economic = EEPROMRead_byte(EEADDRSS_US_ECONOMIC_WRK);
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    11a6:	8a 83       	std	Y+2, r24	; 0x02
   pUnitState->Recirculate = EEPROMRead_byte(EEADDRSS_US_RECIRCULATE_WRK);
    11a8:	8b e0       	ldi	r24, 0x0B	; 11
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    11b0:	8b 83       	std	Y+3, r24	; 0x03
   pUnitState->AirDistMotor = EEPROMRead_byte(EEADDRSS_US_AIR_DIST_MOTOR_WRK);
    11b2:	8c e0       	ldi	r24, 0x0C	; 12
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    11ba:	8e 83       	std	Y+6, r24	; 0x06
   pUnitState->SelectedTemp = EEPROMRead_byte(EEADDRSS_US_TEMPERATURE_WRK);
    11bc:	8f e0       	ldi	r24, 0x0F	; 15
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    11c4:	8c 83       	std	Y+4, r24	; 0x04
   pUnitState->Speed = EEPROMRead_byte(EEADDRSS_US_SPEED_WRK);
    11c6:	80 e1       	ldi	r24, 0x10	; 16
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    11ce:	8d 83       	std	Y+5, r24	; 0x05

   // Not implemented yet!
   //pUnitState->CockBlendMotor = EEPROMRead_byte(EEADDRSS_US_COCK_BLEND_MOTOR_WRK);
   //pUnitState->AirIntakeMotor = EEPROMRead_byte(EEADDRSS_US_AIR_INTAKE_MOTOR_WRK);
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <UnitSaveState>:
   DESCRIPTION: This function save to EEPROM memory the last unit operating state

   PARAMETERS: pUNIT_STATE
   RETURN: void
*** */
void UnitSaveState(pUNIT_STATE pUnitState) {
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24

   // This is unit dirty state
   EEPROMWrite_byte(EEADDRSS_US_LAST_STATE_WRK, pUnitState->Status);
    11dc:	68 81       	ld	r22, Y
    11de:	81 e1       	ldi	r24, 0x11	; 17
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EEPROMWrite_byte>

   // Last operating unit state
   EEPROMWrite_byte(EEADDRSS_US_AUTOMATIC_WRK, pUnitState->Auto);
    11e6:	69 81       	ldd	r22, Y+1	; 0x01
    11e8:	89 e0       	ldi	r24, 0x09	; 9
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EEPROMWrite_byte>
   EEPROMWrite_byte(EEADDRSS_US_ECONOMIC_WRK, pUnitState->Economic);
    11f0:	6a 81       	ldd	r22, Y+2	; 0x02
    11f2:	8a e0       	ldi	r24, 0x0A	; 10
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EEPROMWrite_byte>
   EEPROMWrite_byte(EEADDRSS_US_RECIRCULATE_WRK, pUnitState->Recirculate);
    11fa:	6b 81       	ldd	r22, Y+3	; 0x03
    11fc:	8b e0       	ldi	r24, 0x0B	; 11
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EEPROMWrite_byte>
   EEPROMWrite_byte(EEADDRSS_US_TEMPERATURE_WRK, pUnitState->SelectedTemp);
    1204:	6c 81       	ldd	r22, Y+4	; 0x04
    1206:	8f e0       	ldi	r24, 0x0F	; 15
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EEPROMWrite_byte>
   EEPROMWrite_byte(EEADDRSS_US_SPEED_WRK, pUnitState->Speed);
    120e:	6d 81       	ldd	r22, Y+5	; 0x05
    1210:	80 e1       	ldi	r24, 0x10	; 16
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EEPROMWrite_byte>
   EEPROMWrite_byte(EEADDRSS_US_AIR_DIST_MOTOR_WRK, pUnitState->AirDistMotor);
    1218:	6e 81       	ldd	r22, Y+6	; 0x06
    121a:	8c e0       	ldi	r24, 0x0C	; 12
    121c:	90 e0       	ldi	r25, 0x00	; 0
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
   EEPROMWrite_byte(EEADDRSS_US_AUTOMATIC_WRK, pUnitState->Auto);
   EEPROMWrite_byte(EEADDRSS_US_ECONOMIC_WRK, pUnitState->Economic);
   EEPROMWrite_byte(EEADDRSS_US_RECIRCULATE_WRK, pUnitState->Recirculate);
   EEPROMWrite_byte(EEADDRSS_US_TEMPERATURE_WRK, pUnitState->SelectedTemp);
   EEPROMWrite_byte(EEADDRSS_US_SPEED_WRK, pUnitState->Speed);
   EEPROMWrite_byte(EEADDRSS_US_AIR_DIST_MOTOR_WRK, pUnitState->AirDistMotor);
    1222:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <EEPROMWrite_byte>

00001226 <UnitLastState>:
   DESCRIPTION: Setup unit to the last operating state

   PARAMETERS: pUNIT_STATE
   RETURN: void
*** */
void UnitLastState(pUNIT_STATE pUnitState) {
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24

   // Read last state saved
   uint8_t lastState = EEPROMRead_byte(EEADDRSS_US_LAST_STATE_WRK);
    122c:	81 e1       	ldi	r24, 0x11	; 17
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>

   // If last state is ON, mean that ignition key was turned from MAR to STOP without pressing unit OFF button
   if (lastState == US_ON) {      
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	39 f0       	breq	.+14     	; 0x1246 <UnitLastState+0x20>
      
      // SIGNAL: Update Air Dist. Motor position
      pUnitState->flags.fAirDistMotor = UNIT_FLAG_ON;
   }
   else { 
      pUnitState->Status = US_OFF;
    1238:	18 82       	st	Y, r1
   }

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    123a:	8a 85       	ldd	r24, Y+10	; 0x0a
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	8a 87       	std	Y+10, r24	; 0x0a
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret
   // Read last state saved
   uint8_t lastState = EEPROMRead_byte(EEADDRSS_US_LAST_STATE_WRK);

   // If last state is ON, mean that ignition key was turned from MAR to STOP without pressing unit OFF button
   if (lastState == US_ON) {      
      pUnitState->Status = US_ON;   // Turn unit On
    1246:	88 83       	st	Y, r24

      // SIGNAL: Update Electronic Speed Regulator (Blower Speed)
      pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1248:	8a 85       	ldd	r24, Y+10	; 0x0a
      
      // SIGNAL: Update Air Dist. Motor position
      pUnitState->flags.fAirDistMotor = UNIT_FLAG_ON;
    124a:	80 62       	ori	r24, 0x20	; 32
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	8a 87       	std	Y+10, r24	; 0x0a
   else { 
      pUnitState->Status = US_OFF;
   }

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1250:	8a 85       	ldd	r24, Y+10	; 0x0a
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	8a 87       	std	Y+10, r24	; 0x0a
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <UnitOff>:
   DESCRIPTION: Set off A/A Unit state

   PARAMETERS: void
   RETURN: void
*** */
void UnitOff(pUNIT_STATE pUnitState) {
    125c:	fc 01       	movw	r30, r24

   if (pUnitState->Status == US_ON) {
    125e:	80 81       	ld	r24, Z
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	29 f4       	brne	.+10     	; 0x126e <UnitOff+0x12>
      pUnitState->Status = US_OFF;
    1264:	10 82       	st	Z, r1

      // SIGNAL: Unit controller state changed
      pUnitState->flags.fPassengerTemp = UNIT_FLAG_OFF;     //No temperature display
    1266:	82 85       	ldd	r24, Z+10	; 0x0a
      pUnitState->flags.fAirDistMotor = UNIT_FLAG_OFF;      //ADM No move
      pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;           //No extern temperature display
      pUnitState->flags.fSpeed = UNIT_FLAG_ON;              //Shutdown electronic speed regulator
    1268:	8d 7a       	andi	r24, 0xAD	; 173
    126a:	80 62       	ori	r24, 0x20	; 32
    126c:	82 87       	std	Z+10, r24	; 0x0a
   }

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    126e:	82 85       	ldd	r24, Z+10	; 0x0a
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	82 87       	std	Z+10, r24	; 0x0a
    1274:	08 95       	ret

00001276 <UnitAutomatic>:
   DESCRIPTION: Change to AUTOmatic mode

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitAutomatic(pUNIT_STATE pUnitState) {
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
   
   // If previous status was on, toggle
   if (pUnitState->Status == US_ON) {
    127c:	98 81       	ld	r25, Y
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	91 30       	cpi	r25, 0x01	; 1
    1282:	41 f1       	breq	.+80     	; 0x12d4 <UnitAutomatic+0x5e>
      pUnitState->Auto ^= (1 | pUnitState->Auto);
   }

   // Is AUTOmatic pUnitState? then, set AUTOmatic mode
   if (pUnitState->Auto) {
    1284:	88 23       	and	r24, r24
    1286:	e9 f0       	breq	.+58     	; 0x12c2 <UnitAutomatic+0x4c>
      pUnitState->Economic = EEPROMRead_byte(EEADDRSS_US_ECONOMIC);
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    1290:	8a 83       	std	Y+2, r24	; 0x02
      pUnitState->Recirculate = EEPROMRead_byte(EEADDRSS_US_RECIRCULATE);
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    129a:	8b 83       	std	Y+3, r24	; 0x03
      pUnitState->AirDistMotor = EEPROMRead_byte(EEADDRSS_US_AIR_DIST_MOTOR);
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    12a4:	8e 83       	std	Y+6, r24	; 0x06
      pUnitState->SelectedTemp = EEPROMRead_byte(EEADDRSS_US_TEMPERATURE);
    12a6:	86 e0       	ldi	r24, 0x06	; 6
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    12ae:	8c 83       	std	Y+4, r24	; 0x04
      pUnitState->Speed = EEPROMRead_byte(EEADDRSS_US_SPEED);
    12b0:	87 e0       	ldi	r24, 0x07	; 7
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EEPROMRead_byte>
    12b8:	8d 83       	std	Y+5, r24	; 0x05
      //Not implemented yet!
      //pUnitState->CockBlendMotor = EEPROMRead_byte(EEADDRSS_US_COCK_BLEND_MOTOR); //Automatic function contolled by speed/temperature
      //pUnitState->AirIntakeMotor = EEPROMRead_byte(EEADDRSS_US_AIR_INTAKE_MOTOR); //Controlled by recirculate button and speed/temperature

      //SIGNAL: Air Distribution Motor position
      pUnitState->flags.fAirDistMotor = UNIT_FLAG_ON;
    12ba:	8a 85       	ldd	r24, Y+10	; 0x0a
      pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	8f 7b       	andi	r24, 0xBF	; 191
    12c0:	8a 87       	std	Y+10, r24	; 0x0a
   }

   //SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	88 83       	st	Y, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    12c6:	8a 85       	ldd	r24, Y+10	; 0x0a
   
   //SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    12c8:	80 62       	ori	r24, 0x20	; 32
    12ca:	81 60       	ori	r24, 0x01	; 1
    12cc:	8a 87       	std	Y+10, r24	; 0x0a
}
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	89 27       	eor	r24, r25
*** */
void UnitAutomatic(pUNIT_STATE pUnitState) {
   
   // If previous status was on, toggle
   if (pUnitState->Status == US_ON) {
      pUnitState->Auto ^= (1 | pUnitState->Auto);
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	d4 cf       	rjmp	.-88     	; 0x1284 <UnitAutomatic+0xe>

000012dc <UnitEconomic>:
   DESCRIPTION: Change to ECOnomics mode

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitEconomic(pUNIT_STATE pUnitState) {   
    12dc:	fc 01       	movw	r30, r24
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    12de:	11 82       	std	Z+1, r1	; 0x01
   
   // If previous status was on, toggle
   if (pUnitState->Status == US_ON) {
    12e0:	80 81       	ld	r24, Z
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <UnitEconomic+0x1c>
      pUnitState->Economic ^= (1 | pUnitState->Economic);
   }      
   else {
      pUnitState->Economic = UNIT_ECON_ON;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	82 83       	std	Z+2, r24	; 0x02
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    12ee:	82 85       	ldd	r24, Z+10	; 0x0a
   
   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    12f0:	80 62       	ori	r24, 0x20	; 32
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	82 87       	std	Z+10, r24	; 0x0a
    12f6:	08 95       	ret
    12f8:	92 81       	ldd	r25, Z+2	; 0x02
    12fa:	91 70       	andi	r25, 0x01	; 1
    12fc:	89 27       	eor	r24, r25
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
   
   // If previous status was on, toggle
   if (pUnitState->Status == US_ON) {
      pUnitState->Economic ^= (1 | pUnitState->Economic);
    12fe:	82 83       	std	Z+2, r24	; 0x02
   else {
      pUnitState->Economic = UNIT_ECON_ON;
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1304:	82 85       	ldd	r24, Z+10	; 0x0a
   
   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	82 87       	std	Z+10, r24	; 0x0a
    130c:	08 95       	ret

0000130e <UnitRecirculate>:
   DESCRIPTION: Change to RECIRculate mode

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitRecirculate(pUNIT_STATE pUnitState) {
    130e:	fc 01       	movw	r30, r24
   
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    1310:	11 82       	std	Z+1, r1	; 0x01
   
   // If previous status was on, toggle
   if (pUnitState->Status == US_ON) {
    1312:	80 81       	ld	r24, Z
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	49 f0       	breq	.+18     	; 0x132a <UnitRecirculate+0x1c>
      pUnitState->Recirculate ^= (1 | pUnitState->Recirculate);
   }
   else {
      pUnitState->Recirculate = UNIT_RECI_ON;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	83 83       	std	Z+3, r24	; 0x03
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1320:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	82 87       	std	Z+10, r24	; 0x0a
    1328:	08 95       	ret
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	91 70       	andi	r25, 0x01	; 1
    132e:	89 27       	eor	r24, r25
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
   
   // If previous status was on, toggle
   if (pUnitState->Status == US_ON) {
      pUnitState->Recirculate ^= (1 | pUnitState->Recirculate);
    1330:	83 83       	std	Z+3, r24	; 0x03
   else {
      pUnitState->Recirculate = UNIT_RECI_ON;
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1336:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1338:	80 62       	ori	r24, 0x20	; 32
    133a:	81 60       	ori	r24, 0x01	; 1
    133c:	82 87       	std	Z+10, r24	; 0x0a
    133e:	08 95       	ret

00001340 <UnitTempInc>:
   DESCRIPTION: Increment passenger compartment temperature one unit 

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitTempInc(pUNIT_STATE pUnitState) {
    1340:	fc 01       	movw	r30, r24
   
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    1342:	11 82       	std	Z+1, r1	; 0x01
   
   // If previous status was on change temp
   if (pUnitState->Status == US_ON) {
    1344:	80 81       	ld	r24, Z
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	39 f0       	breq	.+14     	; 0x1358 <UnitTempInc+0x18>
      pUnitState->flags.fPassengerTemp = UNIT_FLAG_ON;
      pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    134e:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1350:	80 62       	ori	r24, 0x20	; 32
    1352:	81 60       	ori	r24, 0x01	; 1
    1354:	82 87       	std	Z+10, r24	; 0x0a
    1356:	08 95       	ret
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
   
   // If previous status was on change temp
   if (pUnitState->Status == US_ON) {
      if (++pUnitState->SelectedTemp > UNIT_TEMP_HIGH) {
    1358:	84 81       	ldd	r24, Z+4	; 0x04
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	82 32       	cpi	r24, 0x22	; 34
    135e:	08 f0       	brcs	.+2      	; 0x1362 <UnitTempInc+0x22>
         pUnitState->SelectedTemp = UNIT_TEMP_HIGH;
    1360:	81 e2       	ldi	r24, 0x21	; 33
    1362:	84 83       	std	Z+4, r24	; 0x04
      }

      // SIGNAL: Passenger Temperature changed
      pUnitState->flags.fPassengerTemp = UNIT_FLAG_ON;
    1364:	82 85       	ldd	r24, Z+10	; 0x0a
      pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
    1366:	80 61       	ori	r24, 0x10	; 16
    1368:	8f 7b       	andi	r24, 0xBF	; 191
    136a:	82 87       	std	Z+10, r24	; 0x0a
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1370:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1372:	80 62       	ori	r24, 0x20	; 32
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	82 87       	std	Z+10, r24	; 0x0a
    1378:	08 95       	ret

0000137a <UnitTempDec>:
   DESCRIPTION: Decrement passenger compartment temperature one unit 

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitTempDec(pUNIT_STATE pUnitState) {
    137a:	fc 01       	movw	r30, r24
   
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    137c:	11 82       	std	Z+1, r1	; 0x01
   
   // If previous status was on change temp
   if (pUnitState->Status == US_ON) {
    137e:	80 81       	ld	r24, Z
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	39 f0       	breq	.+14     	; 0x1392 <UnitTempDec+0x18>
      pUnitState->flags.fPassengerTemp = UNIT_FLAG_ON;
      pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1388:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    138a:	80 62       	ori	r24, 0x20	; 32
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	82 87       	std	Z+10, r24	; 0x0a
    1390:	08 95       	ret
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
   
   // If previous status was on change temp
   if (pUnitState->Status == US_ON) {
      if (--pUnitState->SelectedTemp < UNIT_TEMP_LOW) {
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	81 50       	subi	r24, 0x01	; 1
    1396:	81 31       	cpi	r24, 0x11	; 17
    1398:	08 f4       	brcc	.+2      	; 0x139c <UnitTempDec+0x22>
         pUnitState->SelectedTemp = UNIT_TEMP_LOW;
    139a:	81 e1       	ldi	r24, 0x11	; 17
    139c:	84 83       	std	Z+4, r24	; 0x04
      }

      // SIGNAL: Passenger Temperature changed
      pUnitState->flags.fPassengerTemp = UNIT_FLAG_ON;
    139e:	82 85       	ldd	r24, Z+10	; 0x0a
      pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
    13a0:	80 61       	ori	r24, 0x10	; 16
    13a2:	8f 7b       	andi	r24, 0xBF	; 191
    13a4:	82 87       	std	Z+10, r24	; 0x0a
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    13aa:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    13ac:	80 62       	ori	r24, 0x20	; 32
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	82 87       	std	Z+10, r24	; 0x0a
    13b2:	08 95       	ret

000013b4 <UnitExternTemp>:
   DESCRIPTION: Show extern temperature info

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitExternTemp(pUNIT_STATE pUnitState) {
    13b4:	fc 01       	movw	r30, r24
   
   pUnitState->flags.fExtTemp ^= (1 | pUnitState->flags.fExtTemp);
    13b6:	92 85       	ldd	r25, Z+10	; 0x0a
    13b8:	96 fb       	bst	r25, 6
    13ba:	88 27       	eor	r24, r24
    13bc:	80 f9       	bld	r24, 0
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	28 27       	eor	r18, r24
    13c2:	20 fb       	bst	r18, 0
    13c4:	96 f9       	bld	r25, 6

   //SIGNAL: Extern Temperature display
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    13c6:	91 60       	ori	r25, 0x01	; 1
    13c8:	92 87       	std	Z+10, r25	; 0x0a
    13ca:	08 95       	ret

000013cc <UnitSpeedInc>:
                         New Speed = 0b0000-0010 (0x02) + 1 = 0b0000-0011 (0x03)

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitSpeedInc(pUNIT_STATE pUnitState) {
    13cc:	fc 01       	movw	r30, r24
   
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    13ce:	11 82       	std	Z+1, r1	; 0x01

   // If previous status was on change speed
   if (pUnitState->Status == US_ON) {
    13d0:	80 81       	ld	r24, Z
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	39 f0       	breq	.+14     	; 0x13e4 <UnitSpeedInc+0x18>
         pUnitState->Speed++;
      }
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    13da:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    13dc:	80 62       	ori	r24, 0x20	; 32
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	82 87       	std	Z+10, r24	; 0x0a
    13e2:	08 95       	ret
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;

   // If previous status was on change speed
   if (pUnitState->Status == US_ON) {
      if (pUnitState->Speed < ESR_SPEED_8) {
    13e4:	85 81       	ldd	r24, Z+5	; 0x05
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	b0 f7       	brcc	.-20     	; 0x13d6 <UnitSpeedInc+0xa>
         pUnitState->Speed++;
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	85 83       	std	Z+5, r24	; 0x05
      }
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    13f2:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    13f4:	80 62       	ori	r24, 0x20	; 32
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	82 87       	std	Z+10, r24	; 0x0a
    13fa:	08 95       	ret

000013fc <UnitSpeedDec>:
                         New Speed = 0b0000-0011 (0x03) >> 1 = 0b0000-0001 (0x01)

   PARAMETERS: pUNIT_STATE pUnitState. Unit state
   RETURN: void
*** */
void UnitSpeedDec(pUNIT_STATE pUnitState) {
    13fc:	fc 01       	movw	r30, r24
   
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    13fe:	11 82       	std	Z+1, r1	; 0x01

   // If previous status was on change speed
   if (pUnitState->Status == US_ON) {
    1400:	80 81       	ld	r24, Z
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	39 f0       	breq	.+14     	; 0x1414 <UnitSpeedDec+0x18>
         pUnitState->Speed--;
      }
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    140a:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    140c:	80 62       	ori	r24, 0x20	; 32
    140e:	81 60       	ori	r24, 0x01	; 1
    1410:	82 87       	std	Z+10, r24	; 0x0a
    1412:	08 95       	ret
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;

   // If previous status was on change speed
   if (pUnitState->Status == US_ON) {
      if (pUnitState->Speed > ESR_SPEED_1) {
    1414:	85 81       	ldd	r24, Z+5	; 0x05
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	b0 f3       	brcs	.-20     	; 0x1406 <UnitSpeedDec+0xa>
         pUnitState->Speed--;
    141a:	81 50       	subi	r24, 0x01	; 1
    141c:	85 83       	std	Z+5, r24	; 0x05
      }
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1422:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	82 87       	std	Z+10, r24	; 0x0a
    142a:	08 95       	ret

0000142c <UnitAirDistMotor>:
   PARAMETERS: pUNIT_STATE pUnitState. Unit state
               uint8_t admPosition. ADM-Position = KEY_ADM-Position
                                    Example: ADM_FEET == KEY_FEET
   RETURN: void
*** */
void UnitAirDistMotor(pUNIT_STATE pUnitState, ADM_POSITION admPosition) {
    142c:	fc 01       	movw	r30, r24
   
   // Set AUTOmatic off
   pUnitState->Auto = UNIT_AUTO_OFF;
    142e:	11 82       	std	Z+1, r1	; 0x01
   
   if (pUnitState->AirDistMotor != admPosition) {
    1430:	86 81       	ldd	r24, Z+6	; 0x06
    1432:	86 17       	cp	r24, r22
    1434:	21 f0       	breq	.+8      	; 0x143e <UnitAirDistMotor+0x12>
      pUnitState->AirDistMotor = admPosition;
    1436:	66 83       	std	Z+6, r22	; 0x06

      // SIGNAL: Air Distribution Motor position changed
      pUnitState->flags.fAirDistMotor = UNIT_FLAG_ON;
    1438:	82 85       	ldd	r24, Z+10	; 0x0a
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	82 87       	std	Z+10, r24	; 0x0a
   }

   // SIGNAL: Unit controller state changed
   pUnitState->Status = US_ON;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	80 83       	st	Z, r24
   pUnitState->flags.fSpeed = UNIT_FLAG_ON;
    1442:	82 85       	ldd	r24, Z+10	; 0x0a

   // SIGNAL: Update User Interface
   pUnitState->flags.fUI = UNIT_FLAG_ON;
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	82 87       	std	Z+10, r24	; 0x0a
    144a:	08 95       	ret

0000144c <UnitUIUpdate>:

   PARAMETERS: void
   RETURN: void
*** */
void UnitUIUpdate(pUNIT_STATE pUnitState, pTEMP_SENSORS_INFO pTempSensors)
{
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	28 97       	sbiw	r28, 0x08	; 8
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	8c 01       	movw	r16, r24
    146a:	7b 01       	movw	r14, r22
   //Fresh canvas
   UNIT_UI ui;
   memset(&ui, 0, sizeof(UNIT_UI));
    146c:	fe 01       	movw	r30, r28
    146e:	31 96       	adiw	r30, 0x01	; 1
    1470:	88 e0       	ldi	r24, 0x08	; 8
    1472:	df 01       	movw	r26, r30
    1474:	1d 92       	st	X+, r1
    1476:	8a 95       	dec	r24
    1478:	e9 f7       	brne	.-6      	; 0x1474 <UnitUIUpdate+0x28>

   LEDClear();
    147a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LEDClear>
   LCDClear();
    147e:	0e 94 c3 03 	call	0x786	; 0x786 <LCDClear>

   //<-Unit status <ON> info->
   if (pUnitState->Status == US_ON) {
    1482:	f8 01       	movw	r30, r16
    1484:	80 81       	ld	r24, Z
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	e1 f0       	breq	.+56     	; 0x14c2 <UnitUIUpdate+0x76>

      //Set on LCD Temp and Speed display lamps
      LampsSetState(LAMP_TEMPERATURE_ON | LAMP_SPEED_ON);
   }
   else {   //Status <OFF>
      ui.LEDStatus |= LED_OFF;
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	80 68       	ori	r24, 0x80	; 128
    148e:	8d 83       	std	Y+5, r24	; 0x05

   PARAMETERS: void
   RETURN: void
*** */
static void updateLED(pUNIT_UI pUI) {
   LEDSendData(pUI->LEDStatus,        //byte1=LED4:1
    1490:	28 85       	ldd	r18, Y+8	; 0x08
    1492:	4f 81       	ldd	r20, Y+7	; 0x07
    1494:	6e 81       	ldd	r22, Y+6	; 0x06
    1496:	0e 94 ce 03 	call	0x79c	; 0x79c <LEDSendData>
   else {   //Status <OFF>
      ui.LEDStatus |= LED_OFF;
      updateLED(&ui);

      //When unit is off and Extern Temp. is selected, show temperature info for 10s
      if (pUnitState->flags.fExtTemp) {
    149a:	f8 01       	movw	r30, r16
    149c:	82 85       	ldd	r24, Z+10	; 0x0a
    149e:	86 fd       	sbrc	r24, 6
    14a0:	a6 c0       	rjmp	.+332    	; 0x15ee <UnitUIUpdate+0x1a2>
         updateExternTemp(&ui, pTempSensors->OutsideMirror);
         LampsSetState(LAMP_TEMPERATURE_ON);
         updateLCD(&ui);
      }
      else {
         LampsSetState(LAMP_TEMPERATURE_OFF | LAMP_SPEED_OFF);
    14a2:	8a e0       	ldi	r24, 0x0A	; 10
    14a4:	0e 94 11 03 	call	0x622	; 0x622 <LampsSetState>
      }
   }
}
    14a8:	28 96       	adiw	r28, 0x08	; 8
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	08 95       	ret
   LCDClear();

   //<-Unit status <ON> info->
   if (pUnitState->Status == US_ON) {
      //Display fixed LED and LCD symbols
      ui.LEDOn = LED_ON;
    14c2:	80 e1       	ldi	r24, 0x10	; 16
    14c4:	8f 83       	std	Y+7, r24	; 0x07
      ui.LCDSymbols = LCD_SPEED_SEP;

      //Turn off <OFF> LED
      ui.LEDStatus &= ~LED_OFF;
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	28 2f       	mov	r18, r24
    14ca:	2f 77       	andi	r18, 0x7F	; 127

      //->AUTOmatics On?
      ui.LCDSymbols &= ~(LCD_MANUAL | LCD_AUTO);
      if (pUnitState->Auto == UNIT_AUTO_ON) {
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	91 30       	cpi	r25, 0x01	; 1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <UnitUIUpdate+0x88>
    14d2:	d4 c0       	rjmp	.+424    	; 0x167c <UnitUIUpdate+0x230>
         ui.LEDStatus  |= LED_AUTO;       //Set on 'AUTO' LED (LED 1)
         ui.LCDSymbols |= LCD_AUTO;   
      }
      else {
         ui.LEDStatus  &= ~LED_AUTO;
    14d4:	8f 76       	andi	r24, 0x6F	; 111
         ui.LCDSymbols |= LCD_MANUAL;
    14d6:	94 e1       	ldi	r25, 0x14	; 20
    14d8:	9b 83       	std	Y+3, r25	; 0x03
      }   

      //->ECOnomics On?
      ui.LEDStatus &= ~LED_ECONOMICS;   
    14da:	8f 7d       	andi	r24, 0xDF	; 223
      if (pUnitState->Economic == UNIT_ECON_ON) {
    14dc:	d8 01       	movw	r26, r16
    14de:	12 96       	adiw	r26, 0x02	; 2
    14e0:	9c 91       	ld	r25, X
    14e2:	91 30       	cpi	r25, 0x01	; 1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <UnitUIUpdate+0x9c>
    14e6:	c8 c0       	rjmp	.+400    	; 0x1678 <UnitUIUpdate+0x22c>
         ui.LEDStatus |= LED_ECONOMICS;  //Set on 'ECO' LED (LED 2)
      }

      //->RECirculate On?
      ui.LEDStatus &= ~LED_RECIRCULATE;
    14e8:	8f 7b       	andi	r24, 0xBF	; 191
    14ea:	8d 83       	std	Y+5, r24	; 0x05
      if (pUnitState->Recirculate == UNIT_RECI_ON) {
    14ec:	f8 01       	movw	r30, r16
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	91 30       	cpi	r25, 0x01	; 1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <UnitUIUpdate+0xaa>
    14f4:	be c0       	rjmp	.+380    	; 0x1672 <UnitUIUpdate+0x226>
         ui.LEDStatus |= LED_RECIRCULATE; //Set on 'RECI' LED (LED 3)
      }

      //->Air Distribution Motor Position info
      if (pUnitState->AirDistMotor == ADM_WINDSHIELD) {
    14f6:	d8 01       	movw	r26, r16
    14f8:	16 96       	adiw	r26, 0x06	; 6
    14fa:	8c 91       	ld	r24, X
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	09 f4       	brne	.+2      	; 0x1502 <UnitUIUpdate+0xb6>
    1500:	b5 c0       	rjmp	.+362    	; 0x166c <UnitUIUpdate+0x220>
         ui.LEDAirDistMotor = LED_WINDSHIELD;     //Set on LED WINDSHIELD (LED 5)
      }

      if (pUnitState->AirDistMotor == ADM_FRONT) {
    1502:	81 11       	cpse	r24, r1
    1504:	c0 c0       	rjmp	.+384    	; 0x1686 <UnitUIUpdate+0x23a>
         ui.LEDAirDistMotor = LED_FRONT;          //Set on LED FRONT (LED 6)
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	8e 83       	std	Y+6, r24	; 0x06
      if (pUnitState->AirDistMotor == ADM_FEET) {
         ui.LEDAirDistMotor = LED_FEET;           //Set on LED FEET (LED 8)
      }
      
      //See lcd.h for speed display definition. LCD speed display = (2^Speed) - 1  
      ui.LCDSpeed =  (( 1 << pUnitState->Speed) - 1);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	f8 01       	movw	r30, r16
    1510:	05 80       	ldd	r0, Z+5	; 0x05
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <UnitUIUpdate+0xcc>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <UnitUIUpdate+0xc8>
    151c:	81 50       	subi	r24, 0x01	; 1
    151e:	8c 83       	std	Y+4, r24	; 0x04

      //Show Extern Temperature?
      if (pUnitState->flags.fExtTemp) {
    1520:	82 85       	ldd	r24, Z+10	; 0x0a
    1522:	86 ff       	sbrs	r24, 6
    1524:	37 c0       	rjmp	.+110    	; 0x1594 <UnitUIUpdate+0x148>
         updateExternTemp(&ui, pTempSensors->OutsideMirror);
    1526:	d7 01       	movw	r26, r14
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	ec 90       	ld	r14, X
   }
}

static void updateExternTemp(pUNIT_UI pUI, int8_t temp) {
   //Clean extern temperature symbols
   pUI->LCDSymbols &= ~(LCD_MINUS | LCD_HUNDREDS);
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	8e 7d       	andi	r24, 0xDE	; 222
   pUI->LCDSymbols |= LCD_EXT;

   //Minus is special symbol
   if (temp < 0) {
    1530:	e7 fc       	sbrc	r14, 7
    1532:	98 c0       	rjmp	.+304    	; 0x1664 <UnitUIUpdate+0x218>
}

static void updateExternTemp(pUNIT_UI pUI, int8_t temp) {
   //Clean extern temperature symbols
   pUI->LCDSymbols &= ~(LCD_MINUS | LCD_HUNDREDS);
   pUI->LCDSymbols |= LCD_EXT;
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	8b 83       	std	Y+3, r24	; 0x03
      pUI->LCDSymbols |= LCD_MINUS;
      temp *= -1;
   }

   //Hundred is special symbol, truncate temp last two digits
   if (temp >= 100) {
    1538:	b3 e6       	ldi	r27, 0x63	; 99
    153a:	be 15       	cp	r27, r14
    153c:	8c f4       	brge	.+34     	; 0x1560 <UnitUIUpdate+0x114>
      pUI->LCDSymbols |= LCD_HUNDREDS;
    153e:	80 62       	ori	r24, 0x20	; 32
    1540:	8b 83       	std	Y+3, r24	; 0x03
      temp %= 100;
    1542:	89 e2       	ldi	r24, 0x29	; 41
    1544:	ee 2d       	mov	r30, r14
    1546:	e8 02       	muls	r30, r24
    1548:	81 2d       	mov	r24, r1
    154a:	11 24       	eor	r1, r1
    154c:	85 95       	asr	r24
    154e:	85 95       	asr	r24
    1550:	85 95       	asr	r24
    1552:	85 95       	asr	r24
    1554:	e7 fc       	sbrc	r14, 7
    1556:	83 95       	inc	r24
    1558:	f4 e6       	ldi	r31, 0x64	; 100
    155a:	8f 9f       	mul	r24, r31
    155c:	e0 18       	sub	r14, r0
    155e:	11 24       	eor	r1, r1
   }

   //Convert outside mirror temp to LCD digits
   pUI->LCDDigit2 = LCDNumberToDigit(temp / 10);  //Get Tens, only integer part
    1560:	87 e6       	ldi	r24, 0x67	; 103
    1562:	9e 2d       	mov	r25, r14
    1564:	98 02       	muls	r25, r24
    1566:	f1 2c       	mov	r15, r1
    1568:	11 24       	eor	r1, r1
    156a:	f5 94       	asr	r15
    156c:	f5 94       	asr	r15
    156e:	e7 fc       	sbrc	r14, 7
    1570:	f3 94       	inc	r15
    1572:	8f 2d       	mov	r24, r15
    1574:	0e 94 c8 03 	call	0x790	; 0x790 <LCDNumberToDigit>
    1578:	8a 83       	std	Y+2, r24	; 0x02
   pUI->LCDDigit1 = LCDNumberToDigit(temp % 10);  //Get Ones, is the rest from the MOD operation
    157a:	8e 2d       	mov	r24, r14
    157c:	aa e0       	ldi	r26, 0x0A	; 10
    157e:	fa 9e       	mul	r15, r26
    1580:	80 19       	sub	r24, r0
    1582:	11 24       	eor	r1, r1
    1584:	0e 94 c8 03 	call	0x790	; 0x790 <LCDNumberToDigit>
    1588:	89 83       	std	Y+1, r24	; 0x01
      ui.LCDSpeed =  (( 1 << pUnitState->Speed) - 1);

      //Show Extern Temperature?
      if (pUnitState->flags.fExtTemp) {
         updateExternTemp(&ui, pTempSensors->OutsideMirror);
         pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
    158a:	f8 01       	movw	r30, r16
    158c:	82 85       	ldd	r24, Z+10	; 0x0a
    158e:	8f 7b       	andi	r24, 0xBF	; 191
    1590:	82 87       	std	Z+10, r24	; 0x0a
    1592:	1d c0       	rjmp	.+58     	; 0x15ce <UnitUIUpdate+0x182>
      }
      else {
         updateRoomTemp(&ui, pUnitState->SelectedTemp);
    1594:	14 81       	ldd	r17, Z+4	; 0x04
               pUI->LEDDummy);        //byte4=LED14:13. Dummy byte
}

static void updateRoomTemp(pUNIT_UI pUI, uint8_t temp) {
   //Clean extern temperature symbols
   pUI->LCDSymbols &= ~(LCD_EXT | LCD_MINUS | LCD_HUNDREDS);
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	8c 7d       	andi	r24, 0xDC	; 220
    159a:	8b 83       	std	Y+3, r24	; 0x03

   //Show 'LO' or 'HI' message. (Right->Left)
   if (temp == UNIT_TEMP_LOW) {
    159c:	11 31       	cpi	r17, 0x11	; 17
    159e:	09 f4       	brne	.+2      	; 0x15a2 <UnitUIUpdate+0x156>
    15a0:	80 c0       	rjmp	.+256    	; 0x16a2 <UnitUIUpdate+0x256>
      pUI->LCDDigit2 = LCD_L; pUI->LCDDigit1 = LCD_O;
   }
   else if (temp == UNIT_TEMP_HIGH) {
    15a2:	11 32       	cpi	r17, 0x21	; 33
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <UnitUIUpdate+0x15c>
    15a6:	74 c0       	rjmp	.+232    	; 0x1690 <UnitUIUpdate+0x244>
      //Get DIGIT2:1 from selected temperature
      //Example formula:
      // 43928 / 10000 = 4; 43928 % 10000 = 3928; 3928 /1000 = 3; 3928 %1000 = 928, etc...

      //Convert room temp to LCD digits
      pUI->LCDDigit2 = LCDNumberToDigit(temp / 10);  //Get Tens, only integer part
    15a8:	0d ec       	ldi	r16, 0xCD	; 205
    15aa:	10 9f       	mul	r17, r16
    15ac:	01 2d       	mov	r16, r1
    15ae:	11 24       	eor	r1, r1
    15b0:	06 95       	lsr	r16
    15b2:	06 95       	lsr	r16
    15b4:	06 95       	lsr	r16
    15b6:	80 2f       	mov	r24, r16
    15b8:	0e 94 c8 03 	call	0x790	; 0x790 <LCDNumberToDigit>
    15bc:	8a 83       	std	Y+2, r24	; 0x02
      pUI->LCDDigit1 = LCDNumberToDigit(temp % 10);  //Get Ones, is the rest from the MOD operation
    15be:	81 2f       	mov	r24, r17
    15c0:	ba e0       	ldi	r27, 0x0A	; 10
    15c2:	0b 9f       	mul	r16, r27
    15c4:	80 19       	sub	r24, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	0e 94 c8 03 	call	0x790	; 0x790 <LCDNumberToDigit>
    15cc:	89 83       	std	Y+1, r24	; 0x01

   PARAMETERS: void
   RETURN: void
*** */
static void updateLED(pUNIT_UI pUI) {
   LEDSendData(pUI->LEDStatus,        //byte1=LED4:1
    15ce:	28 85       	ldd	r18, Y+8	; 0x08
    15d0:	4f 81       	ldd	r20, Y+7	; 0x07
    15d2:	6e 81       	ldd	r22, Y+6	; 0x06
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	0e 94 ce 03 	call	0x79c	; 0x79c <LEDSendData>

   PARAMETERS: void
   RETURN: void
*** */
static void updateLCD(pUNIT_UI pUI) {
   LCDSendData(pUI->LCDDigit1,        //byte1=S8:1
    15da:	2c 81       	ldd	r18, Y+4	; 0x04
    15dc:	4b 81       	ldd	r20, Y+3	; 0x03
    15de:	6a 81       	ldd	r22, Y+2	; 0x02
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	0e 94 a3 03 	call	0x746	; 0x746 <LCDSendData>
      //Update physic UI
      updateLED(&ui);
      updateLCD(&ui);

      //Set on LCD Temp and Speed display lamps
      LampsSetState(LAMP_TEMPERATURE_ON | LAMP_SPEED_ON);
    15e6:	85 e0       	ldi	r24, 0x05	; 5
    15e8:	0e 94 11 03 	call	0x622	; 0x622 <LampsSetState>
    15ec:	5d cf       	rjmp	.-326    	; 0x14a8 <UnitUIUpdate+0x5c>
      ui.LEDStatus |= LED_OFF;
      updateLED(&ui);

      //When unit is off and Extern Temp. is selected, show temperature info for 10s
      if (pUnitState->flags.fExtTemp) {
         pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;
    15ee:	8f 7b       	andi	r24, 0xBF	; 191
    15f0:	82 87       	std	Z+10, r24	; 0x0a

         updateExternTemp(&ui, pTempSensors->OutsideMirror);
    15f2:	d7 01       	movw	r26, r14
    15f4:	12 96       	adiw	r26, 0x02	; 2
    15f6:	0c 91       	ld	r16, X
   }
}

static void updateExternTemp(pUNIT_UI pUI, int8_t temp) {
   //Clean extern temperature symbols
   pUI->LCDSymbols &= ~(LCD_MINUS | LCD_HUNDREDS);
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	8e 7d       	andi	r24, 0xDE	; 222
   pUI->LCDSymbols |= LCD_EXT;

   //Minus is special symbol
   if (temp < 0) {
    15fc:	07 fd       	sbrc	r16, 7
    15fe:	4d c0       	rjmp	.+154    	; 0x169a <UnitUIUpdate+0x24e>
}

static void updateExternTemp(pUNIT_UI pUI, int8_t temp) {
   //Clean extern temperature symbols
   pUI->LCDSymbols &= ~(LCD_MINUS | LCD_HUNDREDS);
   pUI->LCDSymbols |= LCD_EXT;
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	8b 83       	std	Y+3, r24	; 0x03
      pUI->LCDSymbols |= LCD_MINUS;
      temp *= -1;
   }

   //Hundred is special symbol, truncate temp last two digits
   if (temp >= 100) {
    1604:	04 36       	cpi	r16, 0x64	; 100
    1606:	84 f0       	brlt	.+32     	; 0x1628 <UnitUIUpdate+0x1dc>
      pUI->LCDSymbols |= LCD_HUNDREDS;
    1608:	80 62       	ori	r24, 0x20	; 32
    160a:	8b 83       	std	Y+3, r24	; 0x03
      temp %= 100;
    160c:	89 e2       	ldi	r24, 0x29	; 41
    160e:	08 02       	muls	r16, r24
    1610:	81 2d       	mov	r24, r1
    1612:	11 24       	eor	r1, r1
    1614:	85 95       	asr	r24
    1616:	85 95       	asr	r24
    1618:	85 95       	asr	r24
    161a:	85 95       	asr	r24
    161c:	07 fd       	sbrc	r16, 7
    161e:	83 95       	inc	r24
    1620:	b4 e6       	ldi	r27, 0x64	; 100
    1622:	8b 9f       	mul	r24, r27
    1624:	00 19       	sub	r16, r0
    1626:	11 24       	eor	r1, r1
   }

   //Convert outside mirror temp to LCD digits
   pUI->LCDDigit2 = LCDNumberToDigit(temp / 10);  //Get Tens, only integer part
    1628:	17 e6       	ldi	r17, 0x67	; 103
    162a:	01 02       	muls	r16, r17
    162c:	11 2d       	mov	r17, r1
    162e:	11 24       	eor	r1, r1
    1630:	15 95       	asr	r17
    1632:	15 95       	asr	r17
    1634:	07 fd       	sbrc	r16, 7
    1636:	13 95       	inc	r17
    1638:	81 2f       	mov	r24, r17
    163a:	0e 94 c8 03 	call	0x790	; 0x790 <LCDNumberToDigit>
    163e:	8a 83       	std	Y+2, r24	; 0x02
   pUI->LCDDigit1 = LCDNumberToDigit(temp % 10);  //Get Ones, is the rest from the MOD operation
    1640:	80 2f       	mov	r24, r16
    1642:	ea e0       	ldi	r30, 0x0A	; 10
    1644:	1e 9f       	mul	r17, r30
    1646:	80 19       	sub	r24, r0
    1648:	11 24       	eor	r1, r1
    164a:	0e 94 c8 03 	call	0x790	; 0x790 <LCDNumberToDigit>
    164e:	89 83       	std	Y+1, r24	; 0x01
      //When unit is off and Extern Temp. is selected, show temperature info for 10s
      if (pUnitState->flags.fExtTemp) {
         pUnitState->flags.fExtTemp = UNIT_FLAG_OFF;

         updateExternTemp(&ui, pTempSensors->OutsideMirror);
         LampsSetState(LAMP_TEMPERATURE_ON);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 11 03 	call	0x622	; 0x622 <LampsSetState>

   PARAMETERS: void
   RETURN: void
*** */
static void updateLCD(pUNIT_UI pUI) {
   LCDSendData(pUI->LCDDigit1,        //byte1=S8:1
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	4b 81       	ldd	r20, Y+3	; 0x03
    165a:	6a 81       	ldd	r22, Y+2	; 0x02
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	0e 94 a3 03 	call	0x746	; 0x746 <LCDSendData>
    1662:	22 cf       	rjmp	.-444    	; 0x14a8 <UnitUIUpdate+0x5c>
   pUI->LCDSymbols &= ~(LCD_MINUS | LCD_HUNDREDS);
   pUI->LCDSymbols |= LCD_EXT;

   //Minus is special symbol
   if (temp < 0) {
      pUI->LCDSymbols |= LCD_MINUS;
    1664:	83 60       	ori	r24, 0x03	; 3
    1666:	8b 83       	std	Y+3, r24	; 0x03
      temp *= -1;
    1668:	e1 94       	neg	r14
    166a:	66 cf       	rjmp	.-308    	; 0x1538 <UnitUIUpdate+0xec>
         ui.LEDStatus |= LED_RECIRCULATE; //Set on 'RECI' LED (LED 3)
      }

      //->Air Distribution Motor Position info
      if (pUnitState->AirDistMotor == ADM_WINDSHIELD) {
         ui.LEDAirDistMotor = LED_WINDSHIELD;     //Set on LED WINDSHIELD (LED 5)
    166c:	80 e1       	ldi	r24, 0x10	; 16
    166e:	8e 83       	std	Y+6, r24	; 0x06
    1670:	4c cf       	rjmp	.-360    	; 0x150a <UnitUIUpdate+0xbe>
      }

      //->RECirculate On?
      ui.LEDStatus &= ~LED_RECIRCULATE;
      if (pUnitState->Recirculate == UNIT_RECI_ON) {
         ui.LEDStatus |= LED_RECIRCULATE; //Set on 'RECI' LED (LED 3)
    1672:	80 64       	ori	r24, 0x40	; 64
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	3f cf       	rjmp	.-386    	; 0x14f6 <UnitUIUpdate+0xaa>
      }   

      //->ECOnomics On?
      ui.LEDStatus &= ~LED_ECONOMICS;   
      if (pUnitState->Economic == UNIT_ECON_ON) {
         ui.LEDStatus |= LED_ECONOMICS;  //Set on 'ECO' LED (LED 2)
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	36 cf       	rjmp	.-404    	; 0x14e8 <UnitUIUpdate+0x9c>
      ui.LEDStatus &= ~LED_OFF;

      //->AUTOmatics On?
      ui.LCDSymbols &= ~(LCD_MANUAL | LCD_AUTO);
      if (pUnitState->Auto == UNIT_AUTO_ON) {
         ui.LEDStatus  |= LED_AUTO;       //Set on 'AUTO' LED (LED 1)
    167c:	82 2f       	mov	r24, r18
    167e:	80 61       	ori	r24, 0x10	; 16
         ui.LCDSymbols |= LCD_AUTO;   
    1680:	98 e1       	ldi	r25, 0x18	; 24
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	2a cf       	rjmp	.-428    	; 0x14da <UnitUIUpdate+0x8e>

      if (pUnitState->AirDistMotor == ADM_FRONT) {
         ui.LEDAirDistMotor = LED_FRONT;          //Set on LED FRONT (LED 6)
      }

      if (pUnitState->AirDistMotor== ADM_FRONT_FEET) {
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	89 f4       	brne	.+34     	; 0x16ac <UnitUIUpdate+0x260>
         ui.LEDAirDistMotor = LED_FRONT_FEET;     //Set on LED FRONT/FEET (LED 7)
    168a:	80 e4       	ldi	r24, 0x40	; 64
    168c:	8e 83       	std	Y+6, r24	; 0x06
    168e:	3d cf       	rjmp	.-390    	; 0x150a <UnitUIUpdate+0xbe>
   //Show 'LO' or 'HI' message. (Right->Left)
   if (temp == UNIT_TEMP_LOW) {
      pUI->LCDDigit2 = LCD_L; pUI->LCDDigit1 = LCD_O;
   }
   else if (temp == UNIT_TEMP_HIGH) {
      pUI->LCDDigit2 = LCD_H; pUI->LCDDigit1 = LCD_I;
    1690:	8e e6       	ldi	r24, 0x6E	; 110
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	80 e6       	ldi	r24, 0x60	; 96
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	9a cf       	rjmp	.-204    	; 0x15ce <UnitUIUpdate+0x182>
   pUI->LCDSymbols &= ~(LCD_MINUS | LCD_HUNDREDS);
   pUI->LCDSymbols |= LCD_EXT;

   //Minus is special symbol
   if (temp < 0) {
      pUI->LCDSymbols |= LCD_MINUS;
    169a:	83 60       	ori	r24, 0x03	; 3
    169c:	8b 83       	std	Y+3, r24	; 0x03
      temp *= -1;
    169e:	01 95       	neg	r16
    16a0:	b1 cf       	rjmp	.-158    	; 0x1604 <UnitUIUpdate+0x1b8>
   //Clean extern temperature symbols
   pUI->LCDSymbols &= ~(LCD_EXT | LCD_MINUS | LCD_HUNDREDS);

   //Show 'LO' or 'HI' message. (Right->Left)
   if (temp == UNIT_TEMP_LOW) {
      pUI->LCDDigit2 = LCD_L; pUI->LCDDigit1 = LCD_O;
    16a2:	80 e7       	ldi	r24, 0x70	; 112
    16a4:	8a 83       	std	Y+2, r24	; 0x02
    16a6:	8b e7       	ldi	r24, 0x7B	; 123
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	91 cf       	rjmp	.-222    	; 0x15ce <UnitUIUpdate+0x182>

      if (pUnitState->AirDistMotor== ADM_FRONT_FEET) {
         ui.LEDAirDistMotor = LED_FRONT_FEET;     //Set on LED FRONT/FEET (LED 7)
      }

      if (pUnitState->AirDistMotor == ADM_FEET) {
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <UnitUIUpdate+0x266>
    16b0:	2c cf       	rjmp	.-424    	; 0x150a <UnitUIUpdate+0xbe>
         ui.LEDAirDistMotor = LED_FEET;           //Set on LED FEET (LED 8)
    16b2:	80 e8       	ldi	r24, 0x80	; 128
    16b4:	8e 83       	std	Y+6, r24	; 0x06
    16b6:	29 cf       	rjmp	.-430    	; 0x150a <UnitUIUpdate+0xbe>

000016b8 <main>:
extern void ESRTask(pTASK task);
extern void ExtTempTask(pTASK task);


//--- MAIN task ---//
int main(void) {
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	a0 97       	sbiw	r28, 0x20	; 32
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61

   //--- Initialize Electronic A/A Unit ---//

   BoardInit();   //HAL module. Execute before calling any other HAL function, like USART, ADC, etc...
    16cc:	0e 94 97 04 	call	0x92e	; 0x92e <BoardInit>
   TimerInit();   //Time counting and task scheduling module
    16d0:	0e 94 16 07 	call	0xe2c	; 0xe2c <TimerInit>
   TaskInit();    //Tasks module
    16d4:	0e 94 35 05 	call	0xa6a	; 0xa6a <TaskInit>
   // Unit Controller and Model setup
   UNIT_STATE           unitState;           //Unit state controller
   ADM_POSITION_INFO    admPosInfo;          //Air Dist. Motor driver controller
   ESR_SPEED_INFO       esrSpeedInfo;        //Electronic Speed Regulator driver controller
   TEMP_SENSORS_INFO    tempSensorsInfo;     //Temperature sensors controller
   UnitInit(&unitState, &admPosInfo, &esrSpeedInfo, &tempSensorsInfo);
    16d8:	9e 01       	movw	r18, r28
    16da:	27 5e       	subi	r18, 0xE7	; 231
    16dc:	3f 4f       	sbci	r19, 0xFF	; 255
    16de:	ae 01       	movw	r20, r28
    16e0:	43 5e       	subi	r20, 0xE3	; 227
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	be 01       	movw	r22, r28
    16e6:	64 5f       	subi	r22, 0xF4	; 244
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	0e 94 b1 08 	call	0x1162	; 0x1162 <UnitInit>

   // Temporal variables
   KEY_ID key = KEYPAD_NO_KEY_PRESS;      // Last key pressed
   uint8_t esrSpeed = 0;                  // Actual blower speed
   tTime timer = TimerNow();              // Normal operation check
    16f2:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    16f6:	2b 01       	movw	r4, r22
    16f8:	3c 01       	movw	r6, r24

   // Create tasks (SIGNALed IDLE by default)
   tTaskId tskKey = TaskCreate("Keypad_Task", TimerNow(), TRE_HUNDRED_MSECOND, TT_PERIODIC, &KeypadTask, NULL);
    16fa:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    16fe:	ab 01       	movw	r20, r22
    1700:	bc 01       	movw	r22, r24
    1702:	a1 2c       	mov	r10, r1
    1704:	b1 2c       	mov	r11, r1
    1706:	88 eb       	ldi	r24, 0xB8	; 184
    1708:	c8 2e       	mov	r12, r24
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	d8 2e       	mov	r13, r24
    170e:	e1 2c       	mov	r14, r1
    1710:	04 e6       	ldi	r16, 0x64	; 100
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	87 e3       	ldi	r24, 0x37	; 55
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 44 05 	call	0xa88	; 0xa88 <TaskCreate>
    1720:	98 2e       	mov	r9, r24
   tTaskId tskTS = TaskCreate("TempSensors_Task", TimerNow(), TRE_ONE_SECOND, TT_PERIODIC, &TempSensorsTask, &tempSensorsInfo);
    1722:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    1726:	ab 01       	movw	r20, r22
    1728:	bc 01       	movw	r22, r24
    172a:	9e 01       	movw	r18, r28
    172c:	27 5e       	subi	r18, 0xE7	; 231
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	59 01       	movw	r10, r18
    1732:	9c e8       	ldi	r25, 0x8C	; 140
    1734:	c9 2e       	mov	r12, r25
    1736:	97 e0       	ldi	r25, 0x07	; 7
    1738:	d9 2e       	mov	r13, r25
    173a:	08 ee       	ldi	r16, 0xE8	; 232
    173c:	13 e0       	ldi	r17, 0x03	; 3
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	83 e4       	ldi	r24, 0x43	; 67
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 44 05 	call	0xa88	; 0xa88 <TaskCreate>
    174a:	f8 2e       	mov	r15, r24
   tTaskId tskESR = TaskCreate("ElecSpeedReg_Task", TimerNow(), TRE_TEN_MSECOND, TT_APERIODIC, &ESRTask, &esrSpeedInfo);
    174c:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    1750:	ab 01       	movw	r20, r22
    1752:	bc 01       	movw	r22, r24
    1754:	ce 01       	movw	r24, r28
    1756:	4d 96       	adiw	r24, 0x1d	; 29
    1758:	5c 01       	movw	r10, r24
    175a:	2e ee       	ldi	r18, 0xEE	; 238
    175c:	c2 2e       	mov	r12, r18
    175e:	22 e0       	ldi	r18, 0x02	; 2
    1760:	d2 2e       	mov	r13, r18
    1762:	32 e0       	ldi	r19, 0x02	; 2
    1764:	e3 2e       	mov	r14, r19
    1766:	0a e0       	ldi	r16, 0x0A	; 10
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	84 e5       	ldi	r24, 0x54	; 84
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 44 05 	call	0xa88	; 0xa88 <TaskCreate>
    1776:	38 2e       	mov	r3, r24
   tTaskId tskADM = TaskCreate("AirDistMotor_Task", TimerNow(), TRE_TEN_MSECOND, TT_APERIODIC, &ADMTask, &admPosInfo);
    1778:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    177c:	ab 01       	movw	r20, r22
    177e:	bc 01       	movw	r22, r24
    1780:	9e 01       	movw	r18, r28
    1782:	24 5f       	subi	r18, 0xF4	; 244
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	59 01       	movw	r10, r18
    1788:	e7 e1       	ldi	r30, 0x17	; 23
    178a:	ce 2e       	mov	r12, r30
    178c:	e2 e0       	ldi	r30, 0x02	; 2
    178e:	de 2e       	mov	r13, r30
    1790:	0a e0       	ldi	r16, 0x0A	; 10
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	86 e6       	ldi	r24, 0x66	; 102
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	0e 94 44 05 	call	0xa88	; 0xa88 <TaskCreate>
    17a0:	88 a3       	std	Y+32, r24	; 0x20
   tTaskId tskExtTemp = TaskCreate("ExternTemp_Task",  TimerNow(), TRE_TEN_SECONDS, TT_APERIODIC, &ExtTempTask, &unitState);
    17a2:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    17a6:	ab 01       	movw	r20, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	5c 01       	movw	r10, r24
    17b0:	f3 ea       	ldi	r31, 0xA3	; 163
    17b2:	cf 2e       	mov	r12, r31
    17b4:	f8 e0       	ldi	r31, 0x08	; 8
    17b6:	df 2e       	mov	r13, r31
    17b8:	00 e1       	ldi	r16, 0x10	; 16
    17ba:	17 e2       	ldi	r17, 0x27	; 39
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	88 e7       	ldi	r24, 0x78	; 120
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	0e 94 44 05 	call	0xa88	; 0xa88 <TaskCreate>
    17c8:	28 2e       	mov	r2, r24

   // Startup periodic tasks (Keypad, Temp Sensors, others...)
   TaskSetStatus(tskKey, TS_READY);
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	89 2d       	mov	r24, r9
    17ce:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TaskSetStatus>
   TaskSetStatus(tskTS, TS_READY);
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	8f 2d       	mov	r24, r15
    17d6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TaskSetStatus>

   // Set unit in last state mode
   UnitLastState(&unitState);
    17da:	c5 01       	movw	r24, r10
    17dc:	0e 94 13 09 	call	0x1226	; 0x1226 <UnitLastState>

   // Prepare for SLEEP the CPU in power save mode
   set_sleep_mode(SLEEP_MODE_IDLE);
    17e0:	83 b7       	in	r24, 0x33	; 51
    17e2:	81 7f       	andi	r24, 0xF1	; 241
    17e4:	83 bf       	out	0x33, r24	; 51

   // Enable global interrupt for scheduling
   sei();
    17e6:	78 94       	sei
    17e8:	9e 01       	movw	r18, r28
    17ea:	2d 5e       	subi	r18, 0xED	; 237
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	69 01       	movw	r12, r18
      if (unitState.flags.fUI) {
         unitState.flags.fUI = UNIT_FLAG_OFF;

         #ifdef DEBUG
            // Send unit state data for SignalR debug application
            sprintf(str, "US|%d|%d|%d|%d|%d|%d|%d|%d|\n", unitState.Status,
    17f0:	a8 e8       	ldi	r26, 0x88	; 136
    17f2:	8a 2e       	mov	r8, r26
    17f4:	a1 e0       	ldi	r26, 0x01	; 1
    17f6:	9a 2e       	mov	r9, r26
    17f8:	b5 e3       	ldi	r27, 0x35	; 53
    17fa:	eb 2e       	mov	r14, r27
    17fc:	b2 e0       	ldi	r27, 0x02	; 2
    17fe:	fb 2e       	mov	r15, r27
            
            // Transform Vref to string (like stdlib atof())
            dtostrf(fVref, 2, 3, strVref);

            // Send operation state data for SignalR debug application
            sprintf(str, "OS|%s|%d|%d|%d|%d|%d|\n", strVref,
    1800:	15 ea       	ldi	r17, 0xA5	; 165
    1802:	a1 2e       	mov	r10, r17
    1804:	11 e0       	ldi	r17, 0x01	; 1
    1806:	b1 2e       	mov	r11, r17

   // main() loop task
   while (1) {

      // Process tasks and sleep if not more tasks active, if is possible :(
      RunScheduler();
    1808:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <RunScheduler>

      // Process the key press button that change the UI and set new operating mode
      key = KeypadGetLastKey();
    180c:	0e 94 28 05 	call	0xa50	; 0xa50 <KeypadGetLastKey>
      if (key != KEYPAD_NO_KEY_PRESS) {
    1810:	80 31       	cpi	r24, 0x10	; 16
    1812:	89 f0       	breq	.+34     	; 0x1836 <main+0x17e>
         switch (key) {
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	8f 30       	cpi	r24, 0x0F	; 15
    1818:	91 05       	cpc	r25, r1
    181a:	48 f4       	brcc	.+18     	; 0x182e <main+0x176>
    181c:	fc 01       	movw	r30, r24
    181e:	e2 5c       	subi	r30, 0xC2	; 194
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__tablejump2__>
               break;
            case KEY_TEMP_EXTERN:            //Extern Temp. =|
               UnitExternTemp(&unitState);
               break;
            case KEY_AUTO:                   //Automatic A/A
               UnitAutomatic(&unitState);
    1826:	ce 01       	movw	r24, r28
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	0e 94 3b 09 	call	0x1276	; 0x1276 <UnitAutomatic>
            default:
               break;
         }

         // Save modified unit state in EEPROM memory
         UnitSaveState(&unitState);
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnitSaveState>
      }

      //--- Main unit controller task ---//

      // Update UI?
      if (unitState.flags.fUI) {
    1836:	8b 85       	ldd	r24, Y+11	; 0x0b
    1838:	80 fd       	sbrc	r24, 0
    183a:	95 c0       	rjmp	.+298    	; 0x1966 <main+0x2ae>
         // Change UI
         UnitUIUpdate(&unitState, &tempSensorsInfo);
      }

      // Check normal working operation every 2 seconds
      if (TimerElapsed(timer) >= TRE_TWO_SECONDS) {
    183c:	c3 01       	movw	r24, r6
    183e:	b2 01       	movw	r22, r4
    1840:	0e 94 38 07 	call	0xe70	; 0xe70 <TimerElapsed>
    1844:	60 3d       	cpi	r22, 0xD0	; 208
    1846:	77 40       	sbci	r23, 0x07	; 7
    1848:	81 05       	cpc	r24, r1
    184a:	91 05       	cpc	r25, r1
    184c:	08 f4       	brcc	.+2      	; 0x1850 <main+0x198>
    184e:	40 c0       	rjmp	.+128    	; 0x18d0 <main+0x218>

         if (unitState.Status == US_ON) {
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	09 f4       	brne	.+2      	; 0x1858 <main+0x1a0>
    1856:	d6 c0       	rjmp	.+428    	; 0x1a04 <main+0x34c>
         }

         #ifdef DEBUG

            // Get voltage regulator info
            float fVref = ADCReadAsVoltage(AN6_L4947_VOLTAGE_REG);
    1858:	86 e0       	ldi	r24, 0x06	; 6
    185a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <ADCReadAsVoltage>
            char strVref[6];
            
            // Transform Vref to string (like stdlib atof())
            dtostrf(fVref, 2, 3, strVref);
    185e:	86 01       	movw	r16, r12
    1860:	23 e0       	ldi	r18, 0x03	; 3
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	0e 94 1c 10 	call	0x2038	; 0x2038 <dtostrf>

            // Send operation state data for SignalR debug application
            sprintf(str, "OS|%s|%d|%d|%d|%d|%d|\n", strVref,
    1868:	8a 8d       	ldd	r24, Y+26	; 0x1a
    186a:	28 2f       	mov	r18, r24
    186c:	08 2e       	mov	r0, r24
    186e:	00 0c       	add	r0, r0
    1870:	33 0b       	sbc	r19, r19
    1872:	3f 93       	push	r19
    1874:	8f 93       	push	r24
    1876:	89 8d       	ldd	r24, Y+25	; 0x19
    1878:	28 2f       	mov	r18, r24
    187a:	08 2e       	mov	r0, r24
    187c:	00 0c       	add	r0, r0
    187e:	33 0b       	sbc	r19, r19
    1880:	3f 93       	push	r19
    1882:	8f 93       	push	r24
    1884:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1886:	28 2f       	mov	r18, r24
    1888:	08 2e       	mov	r0, r24
    188a:	00 0c       	add	r0, r0
    188c:	33 0b       	sbc	r19, r19
    188e:	3f 93       	push	r19
    1890:	8f 93       	push	r24
    1892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1894:	28 2f       	mov	r18, r24
    1896:	08 2e       	mov	r0, r24
    1898:	00 0c       	add	r0, r0
    189a:	33 0b       	sbc	r19, r19
    189c:	3f 93       	push	r19
    189e:	8f 93       	push	r24
    18a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a2:	1f 92       	push	r1
    18a4:	8f 93       	push	r24
    18a6:	df 92       	push	r13
    18a8:	cf 92       	push	r12
    18aa:	bf 92       	push	r11
    18ac:	af 92       	push	r10
    18ae:	ff 92       	push	r15
    18b0:	ef 92       	push	r14
    18b2:	0e 94 3c 10 	call	0x2078	; 0x2078 <sprintf>
                                                    unitState.ThreeLevelSwitch,
                                                    tempSensorsInfo.OutsideMirror,
                                                    tempSensorsInfo.Passenger,
                                                    tempSensorsInfo.TopBlended,
                                                    tempSensorsInfo.BottomBlended);
             USARTPrintString(str);
    18b6:	85 e3       	ldi	r24, 0x35	; 53
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	0e 94 77 03 	call	0x6ee	; 0x6ee <USARTPrintString>
         #endif

         // Reload timer trigger
         timer = TimerNow();
    18be:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    18c2:	2b 01       	movw	r4, r22
    18c4:	3c 01       	movw	r6, r24
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
      }
      
      // Save some power      
      cli();
    18d0:	f8 94       	cli
      sleep_enable();
    18d2:	83 b7       	in	r24, 0x33	; 51
    18d4:	81 60       	ori	r24, 0x01	; 1
    18d6:	83 bf       	out	0x33, r24	; 51
      sei();
    18d8:	78 94       	sei
      sleep_cpu();      // Goto Sleep CPU, Mimimimimimi!
    18da:	88 95       	sleep
      sleep_disable();
    18dc:	83 b7       	in	r24, 0x33	; 51
    18de:	8e 7f       	andi	r24, 0xFE	; 254
    18e0:	83 bf       	out	0x33, r24	; 51
      sei();
    18e2:	78 94       	sei

   } // END while() {}
    18e4:	91 cf       	rjmp	.-222    	; 0x1808 <main+0x150>
               break;
            case KEY_AUTO:                   //Automatic A/A
               UnitAutomatic(&unitState);
               break;
            case KEY_ECONOMICS:              //Economics A/A
               UnitEconomic(&unitState);
    18e6:	ce 01       	movw	r24, r28
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	0e 94 6e 09 	call	0x12dc	; 0x12dc <UnitEconomic>
               break;
    18ee:	9f cf       	rjmp	.-194    	; 0x182e <main+0x176>
               break;
            case KEY_TEMP_MINUS:             //<| Temperature
               UnitTempDec(&unitState);
               break;
            case KEY_TEMP_PLUS:              //Temperature |>
               UnitTempInc(&unitState);
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	0e 94 a0 09 	call	0x1340	; 0x1340 <UnitTempInc>
               break;
    18f8:	9a cf       	rjmp	.-204    	; 0x182e <main+0x176>
               break;
            case KEY_RECIRCULATE:            //Recirculate A/A
               UnitRecirculate(&unitState);
               break;
            case KEY_WINDSHIELD:             //AirDistMotor: Windshield
               UnitAirDistMotor(&unitState, ADM_WINDSHIELD);
    18fa:	63 e0       	ldi	r22, 0x03	; 3
    18fc:	ce 01       	movw	r24, r28
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	0e 94 16 0a 	call	0x142c	; 0x142c <UnitAirDistMotor>
               break;
    1904:	94 cf       	rjmp	.-216    	; 0x182e <main+0x176>
            case KEY_FRONT:                  //AirDistMotor: Front
               UnitAirDistMotor(&unitState, ADM_FRONT);
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	0e 94 16 0a 	call	0x142c	; 0x142c <UnitAirDistMotor>
               break;
    1910:	8e cf       	rjmp	.-228    	; 0x182e <main+0x176>
            case KEY_FRONT_FEET:             //AirDistMotor: Front+Feet
               UnitAirDistMotor(&unitState, ADM_FRONT_FEET);
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	ce 01       	movw	r24, r28
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	0e 94 16 0a 	call	0x142c	; 0x142c <UnitAirDistMotor>
               break;
    191c:	88 cf       	rjmp	.-240    	; 0x182e <main+0x176>
            case KEY_FEET:                   //AirDistMotor: Feet
               UnitAirDistMotor(&unitState, ADM_FEET);
    191e:	62 e0       	ldi	r22, 0x02	; 2
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 16 0a 	call	0x142c	; 0x142c <UnitAirDistMotor>
               break;
    1928:	82 cf       	rjmp	.-252    	; 0x182e <main+0x176>
      // Process the key press button that change the UI and set new operating mode
      key = KeypadGetLastKey();
      if (key != KEYPAD_NO_KEY_PRESS) {
         switch (key) {
            case KEY_OFF:
               UnitOff(&unitState);          //Process OFF key first
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	0e 94 2e 09 	call	0x125c	; 0x125c <UnitOff>
               break;
    1932:	7d cf       	rjmp	.-262    	; 0x182e <main+0x176>
               break;
            case KEY_ECONOMICS:              //Economics A/A
               UnitEconomic(&unitState);
               break;
            case KEY_RECIRCULATE:            //Recirculate A/A
               UnitRecirculate(&unitState);
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 87 09 	call	0x130e	; 0x130e <UnitRecirculate>
               break;
    193c:	78 cf       	rjmp	.-272    	; 0x182e <main+0x176>
               break;
            case KEY_TEMP_PLUS:              //Temperature |>
               UnitTempInc(&unitState);
               break;
            case KEY_SPEED_MINUS:            //<| Speed
               UnitSpeedDec(&unitState);
    193e:	ce 01       	movw	r24, r28
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	0e 94 fe 09 	call	0x13fc	; 0x13fc <UnitSpeedDec>
               break;
    1946:	73 cf       	rjmp	.-282    	; 0x182e <main+0x176>
         switch (key) {
            case KEY_OFF:
               UnitOff(&unitState);          //Process OFF key first
               break;
            case KEY_TEMP_MINUS:             //<| Temperature
               UnitTempDec(&unitState);
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	0e 94 bd 09 	call	0x137a	; 0x137a <UnitTempDec>
               break;
    1950:	6e cf       	rjmp	.-292    	; 0x182e <main+0x176>
               break;
            case KEY_SPEED_PLUS:             //Speed |>
               UnitSpeedInc(&unitState);
               break;
            case KEY_TEMP_EXTERN:            //Extern Temp. =|
               UnitExternTemp(&unitState);
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 da 09 	call	0x13b4	; 0x13b4 <UnitExternTemp>
               break;
    195a:	69 cf       	rjmp	.-302    	; 0x182e <main+0x176>
               break;
            case KEY_SPEED_MINUS:            //<| Speed
               UnitSpeedDec(&unitState);
               break;
            case KEY_SPEED_PLUS:             //Speed |>
               UnitSpeedInc(&unitState);
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 e6 09 	call	0x13cc	; 0x13cc <UnitSpeedInc>
               break;
    1964:	64 cf       	rjmp	.-312    	; 0x182e <main+0x176>

      //--- Main unit controller task ---//

      // Update UI?
      if (unitState.flags.fUI) {
         unitState.flags.fUI = UNIT_FLAG_OFF;
    1966:	8e 7f       	andi	r24, 0xFE	; 254
    1968:	8b 87       	std	Y+11, r24	; 0x0b
                                                          unitState.Economic,
                                                          unitState.Recirculate,
                                                          unitState.AirDistMotor,
                                                          unitState.SelectedTemp,
                                                          unitState.Speed,
                                                          unitState.flags.fExtTemp);
    196a:	86 fb       	bst	r24, 6
    196c:	88 27       	eor	r24, r24
    196e:	80 f9       	bld	r24, 0
      if (unitState.flags.fUI) {
         unitState.flags.fUI = UNIT_FLAG_OFF;

         #ifdef DEBUG
            // Send unit state data for SignalR debug application
            sprintf(str, "US|%d|%d|%d|%d|%d|%d|%d|%d|\n", unitState.Status,
    1970:	1f 92       	push	r1
    1972:	8f 93       	push	r24
    1974:	8e 81       	ldd	r24, Y+6	; 0x06
    1976:	1f 92       	push	r1
    1978:	8f 93       	push	r24
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	1f 92       	push	r1
    197e:	8f 93       	push	r24
    1980:	8f 81       	ldd	r24, Y+7	; 0x07
    1982:	1f 92       	push	r1
    1984:	8f 93       	push	r24
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	1f 92       	push	r1
    198a:	8f 93       	push	r24
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	1f 92       	push	r1
    1990:	8f 93       	push	r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	1f 92       	push	r1
    1996:	8f 93       	push	r24
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	1f 92       	push	r1
    199c:	8f 93       	push	r24
    199e:	9f 92       	push	r9
    19a0:	8f 92       	push	r8
    19a2:	ff 92       	push	r15
    19a4:	ef 92       	push	r14
    19a6:	0e 94 3c 10 	call	0x2078	; 0x2078 <sprintf>
                                                          unitState.Recirculate,
                                                          unitState.AirDistMotor,
                                                          unitState.SelectedTemp,
                                                          unitState.Speed,
                                                          unitState.flags.fExtTemp);
            USARTPrintString(str);
    19aa:	85 e3       	ldi	r24, 0x35	; 53
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	0e 94 77 03 	call	0x6ee	; 0x6ee <USARTPrintString>
         #endif

         // Display extern temperature for about 10 seconds
         if (unitState.flags.fExtTemp) {
    19b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	86 fd       	sbrc	r24, 6
    19c0:	6d c0       	rjmp	.+218    	; 0x1a9c <main+0x3e4>
            TaskSetStatus(tskExtTemp, TS_READY);   //SIGNAL
         }

         // If Air Dist. Motor position changed
         if (unitState.flags.fAirDistMotor) {
    19c2:	81 fd       	sbrc	r24, 1
    19c4:	58 c0       	rjmp	.+176    	; 0x1a76 <main+0x3be>
               TaskSetStatus(tskADM, TS_READY);    //SIGNAL
            }
         }

         // Blower speed changed. Turn on/off the electronic speed regulator?
         if (unitState.flags.fSpeed) {
    19c6:	85 ff       	sbrs	r24, 5
    19c8:	11 c0       	rjmp	.+34     	; 0x19ec <main+0x334>
            unitState.flags.fSpeed = UNIT_FLAG_OFF;
    19ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    19cc:	8f 7d       	andi	r24, 0xDF	; 223
    19ce:	8b 87       	std	Y+11, r24	; 0x0b
            
            esrSpeed = (unitState.Speed * 2) - 1;  // Adjust for speed lookup table. See elecSpeedReg.c
    19d0:	6e 81       	ldd	r22, Y+6	; 0x06
            if (unitState.Status == US_OFF) {
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	88 23       	and	r24, r24
    19d6:	09 f4       	brne	.+2      	; 0x19da <main+0x322>
    19d8:	6b c0       	rjmp	.+214    	; 0x1ab0 <main+0x3f8>

         // Blower speed changed. Turn on/off the electronic speed regulator?
         if (unitState.flags.fSpeed) {
            unitState.flags.fSpeed = UNIT_FLAG_OFF;
            
            esrSpeed = (unitState.Speed * 2) - 1;  // Adjust for speed lookup table. See elecSpeedReg.c
    19da:	66 0f       	add	r22, r22
    19dc:	61 50       	subi	r22, 0x01	; 1
            if (unitState.Status == US_OFF) {
               esrSpeed = 0;  //Off
            }

            ESRUpdateSpeedInfo(&esrSpeedInfo, esrSpeed);
    19de:	ce 01       	movw	r24, r28
    19e0:	4d 96       	adiw	r24, 0x1d	; 29
    19e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ESRUpdateSpeedInfo>
            if (esrSpeedInfo.esrMove) {
    19e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19e8:	81 11       	cpse	r24, r1
    19ea:	6b c0       	rjmp	.+214    	; 0x1ac2 <main+0x40a>
               TaskSetStatus(tskESR, TS_READY);                         //SIGNAL task
            }
         }
         
         // Turn off compressor pulley
         if (unitState.Status == US_OFF) {
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <main+0x33c>
    19f2:	5a c0       	rjmp	.+180    	; 0x1aa8 <main+0x3f0>
            unitState.ThreeLevelSwitch = TLPSS_OFF;
            TLPSSetState(TLPSS_OFF);
         }

         // Change UI
         UnitUIUpdate(&unitState, &tempSensorsInfo);
    19f4:	be 01       	movw	r22, r28
    19f6:	67 5e       	subi	r22, 0xE7	; 231
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	ce 01       	movw	r24, r28
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	0e 94 26 0a 	call	0x144c	; 0x144c <UnitUIUpdate>
    1a02:	1c cf       	rjmp	.-456    	; 0x183c <main+0x184>
      if (TimerElapsed(timer) >= TRE_TWO_SECONDS) {

         if (unitState.Status == US_ON) {
            
            // Unit:OFF or ECONomics:ON or passenger temperature below selected temperature
            if ((unitState.Economic) || (tempSensorsInfo.Passenger < unitState.SelectedTemp)) {
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	91 11       	cpse	r25, r1
    1a08:	33 c0       	rjmp	.+102    	; 0x1a70 <main+0x3b8>
    1a0a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1a0c:	04 2e       	mov	r0, r20
    1a0e:	00 0c       	add	r0, r0
    1a10:	55 0b       	sbc	r21, r21
    1a12:	2d 81       	ldd	r18, Y+5	; 0x05
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	42 17       	cp	r20, r18
    1a18:	53 07       	cpc	r21, r19
    1a1a:	54 f1       	brlt	.+84     	; 0x1a70 <main+0x3b8>
               unitState.ThreeLevelSwitch = TLPSS_OFF;
            }
            else {
               unitState.ThreeLevelSwitch = TLPSS_ON;
    1a1c:	8a 87       	std	Y+10, r24	; 0x0a
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
            }

            // SIGNAL: Three Level Pressure Switch controller sensor (Compressor Pulley)
            TLPSSetState(unitState.ThreeLevelSwitch);
    1a20:	0e 94 1d 03 	call	0x63a	; 0x63a <TLPSSetState>

            // If we are in AUTOmatic mode control automatic blower speed
            if (unitState.Auto) {
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 23       	and	r24, r24
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <main+0x374>
    1a2a:	16 cf       	rjmp	.-468    	; 0x1858 <main+0x1a0>
               esrSpeed = (tempSensorsInfo.Passenger - 18) + 1;  // Adjust for speed lookup table. See elecSpeedReg.c
    1a2c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1a2e:	61 51       	subi	r22, 0x11	; 17
               // Check index range. The unit is limit for operating temperature from 18 to 32 Celsius degree, lower or higher
               // temps. are show as LO/HI respectively, but temps. sensor still sense this, because of that we need validate
               // out of range values for lookup table. 
               // Example: Lower temp. tempSensorsInfo.Passenger = 16. esrSpeed = (16 - 18) + 1 = -1
               // Example: Higher temp. tempSensorsInfo.Passenger = 33. esrSpeed = (33 - 18) + 1 = 16
               if (esrSpeed <= 0) {
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <main+0x37c>
    1a32:	5a c0       	rjmp	.+180    	; 0x1ae8 <main+0x430>
                  esrSpeed = ESR_SPEED_1;    //Set min. speed
               }

               if (esrSpeed >= ESR_MAX_SPEED) {
    1a34:	60 31       	cpi	r22, 0x10	; 16
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <main+0x382>
                  esrSpeed = ESR_SPEED_15;   //Set max. speed
    1a38:	6f e0       	ldi	r22, 0x0F	; 15
               }

               ESRUpdateSpeedInfo(&esrSpeedInfo, esrSpeed);
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	4d 96       	adiw	r24, 0x1d	; 29
    1a3e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ESRUpdateSpeedInfo>
               if (esrSpeedInfo.esrMove) {
    1a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <main+0x392>
    1a48:	07 cf       	rjmp	.-498    	; 0x1858 <main+0x1a0>
                  TaskSetTimers(tskESR, TimerNow() + TRE_ONE_SECOND, 0);   //Run in the next 1s. Wait while user end setting new speed
    1a4a:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    1a4e:	ab 01       	movw	r20, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	48 51       	subi	r20, 0x18	; 24
    1a54:	5c 4f       	sbci	r21, 0xFC	; 252
    1a56:	6f 4f       	sbci	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	00 e0       	ldi	r16, 0x00	; 0
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	98 01       	movw	r18, r16
    1a60:	83 2d       	mov	r24, r3
    1a62:	0e 94 97 05 	call	0xb2e	; 0xb2e <TaskSetTimers>
                  TaskSetStatus(tskESR, TS_READY);                         //SIGNAL task
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	83 2d       	mov	r24, r3
    1a6a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TaskSetStatus>
    1a6e:	f4 ce       	rjmp	.-536    	; 0x1858 <main+0x1a0>

         if (unitState.Status == US_ON) {
            
            // Unit:OFF or ECONomics:ON or passenger temperature below selected temperature
            if ((unitState.Economic) || (tempSensorsInfo.Passenger < unitState.SelectedTemp)) {
               unitState.ThreeLevelSwitch = TLPSS_OFF;
    1a70:	1a 86       	std	Y+10, r1	; 0x0a
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	d5 cf       	rjmp	.-86     	; 0x1a20 <main+0x368>
            TaskSetStatus(tskExtTemp, TS_READY);   //SIGNAL
         }

         // If Air Dist. Motor position changed
         if (unitState.flags.fAirDistMotor) {
            unitState.flags.fAirDistMotor = UNIT_FLAG_OFF;
    1a76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a78:	8d 7f       	andi	r24, 0xFD	; 253
    1a7a:	8b 87       	std	Y+11, r24	; 0x0b

            ADMUpdatePositionInfo(&admPosInfo, unitState.AirDistMotor);
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	ce 01       	movw	r24, r28
    1a80:	0c 96       	adiw	r24, 0x0c	; 12
    1a82:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADMUpdatePositionInfo>
            if (admPosInfo.admMove) {
    1a86:	88 89       	ldd	r24, Y+16	; 0x10
    1a88:	81 11       	cpse	r24, r1
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <main+0x3d8>
    1a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8e:	9b cf       	rjmp	.-202    	; 0x19c6 <main+0x30e>
               TaskSetStatus(tskADM, TS_READY);    //SIGNAL
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	88 a1       	ldd	r24, Y+32	; 0x20
    1a94:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TaskSetStatus>
    1a98:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a9a:	95 cf       	rjmp	.-214    	; 0x19c6 <main+0x30e>
            USARTPrintString(str);
         #endif

         // Display extern temperature for about 10 seconds
         if (unitState.flags.fExtTemp) {
            TaskSetStatus(tskExtTemp, TS_READY);   //SIGNAL
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	82 2d       	mov	r24, r2
    1aa0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TaskSetStatus>
    1aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa6:	8d cf       	rjmp	.-230    	; 0x19c2 <main+0x30a>
            }
         }
         
         // Turn off compressor pulley
         if (unitState.Status == US_OFF) {
            unitState.ThreeLevelSwitch = TLPSS_OFF;
    1aa8:	1a 86       	std	Y+10, r1	; 0x0a
            TLPSSetState(TLPSS_OFF);
    1aaa:	0e 94 1d 03 	call	0x63a	; 0x63a <TLPSSetState>
    1aae:	a2 cf       	rjmp	.-188    	; 0x19f4 <main+0x33c>
         if (unitState.flags.fSpeed) {
            unitState.flags.fSpeed = UNIT_FLAG_OFF;
            
            esrSpeed = (unitState.Speed * 2) - 1;  // Adjust for speed lookup table. See elecSpeedReg.c
            if (unitState.Status == US_OFF) {
               esrSpeed = 0;  //Off
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
            }

            ESRUpdateSpeedInfo(&esrSpeedInfo, esrSpeed);
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	4d 96       	adiw	r24, 0x1d	; 29
    1ab6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <ESRUpdateSpeedInfo>
            if (esrSpeedInfo.esrMove) {
    1aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abc:	88 23       	and	r24, r24
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <main+0x40a>
    1ac0:	95 cf       	rjmp	.-214    	; 0x19ec <main+0x334>
               TaskSetTimers(tskESR, TimerNow() + TRE_ONE_SECOND, 0);   //Run in the next 1s. Wait while user end setting new speed
    1ac2:	0e 94 2c 07 	call	0xe58	; 0xe58 <TimerNow>
    1ac6:	ab 01       	movw	r20, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	48 51       	subi	r20, 0x18	; 24
    1acc:	5c 4f       	sbci	r21, 0xFC	; 252
    1ace:	6f 4f       	sbci	r22, 0xFF	; 255
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	00 e0       	ldi	r16, 0x00	; 0
    1ad4:	10 e0       	ldi	r17, 0x00	; 0
    1ad6:	98 01       	movw	r18, r16
    1ad8:	83 2d       	mov	r24, r3
    1ada:	0e 94 97 05 	call	0xb2e	; 0xb2e <TaskSetTimers>
               TaskSetStatus(tskESR, TS_READY);                         //SIGNAL task
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	83 2d       	mov	r24, r3
    1ae2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TaskSetStatus>
    1ae6:	82 cf       	rjmp	.-252    	; 0x19ec <main+0x334>
               // temps. are show as LO/HI respectively, but temps. sensor still sense this, because of that we need validate
               // out of range values for lookup table. 
               // Example: Lower temp. tempSensorsInfo.Passenger = 16. esrSpeed = (16 - 18) + 1 = -1
               // Example: Higher temp. tempSensorsInfo.Passenger = 33. esrSpeed = (33 - 18) + 1 = 16
               if (esrSpeed <= 0) {
                  esrSpeed = ESR_SPEED_1;    //Set min. speed
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	a7 cf       	rjmp	.-178    	; 0x1a3a <main+0x382>

00001aec <__tablejump2__>:
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	05 90       	lpm	r0, Z+
    1af2:	f4 91       	lpm	r31, Z
    1af4:	e0 2d       	mov	r30, r0
    1af6:	09 94       	ijmp

00001af8 <__umulhisi3>:
    1af8:	a2 9f       	mul	r26, r18
    1afa:	b0 01       	movw	r22, r0
    1afc:	b3 9f       	mul	r27, r19
    1afe:	c0 01       	movw	r24, r0
    1b00:	a3 9f       	mul	r26, r19
    1b02:	70 0d       	add	r23, r0
    1b04:	81 1d       	adc	r24, r1
    1b06:	11 24       	eor	r1, r1
    1b08:	91 1d       	adc	r25, r1
    1b0a:	b2 9f       	mul	r27, r18
    1b0c:	70 0d       	add	r23, r0
    1b0e:	81 1d       	adc	r24, r1
    1b10:	11 24       	eor	r1, r1
    1b12:	91 1d       	adc	r25, r1
    1b14:	08 95       	ret

00001b16 <__subsf3>:
    1b16:	50 58       	subi	r21, 0x80	; 128

00001b18 <__addsf3>:
    1b18:	bb 27       	eor	r27, r27
    1b1a:	aa 27       	eor	r26, r26
    1b1c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__addsf3x>
    1b20:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_round>
    1b24:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__fp_pscA>
    1b28:	38 f0       	brcs	.+14     	; 0x1b38 <__addsf3+0x20>
    1b2a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__fp_pscB>
    1b2e:	20 f0       	brcs	.+8      	; 0x1b38 <__addsf3+0x20>
    1b30:	39 f4       	brne	.+14     	; 0x1b40 <__addsf3+0x28>
    1b32:	9f 3f       	cpi	r25, 0xFF	; 255
    1b34:	19 f4       	brne	.+6      	; 0x1b3c <__addsf3+0x24>
    1b36:	26 f4       	brtc	.+8      	; 0x1b40 <__addsf3+0x28>
    1b38:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_nan>
    1b3c:	0e f4       	brtc	.+2      	; 0x1b40 <__addsf3+0x28>
    1b3e:	e0 95       	com	r30
    1b40:	e7 fb       	bst	r30, 7
    1b42:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>

00001b46 <__addsf3x>:
    1b46:	e9 2f       	mov	r30, r25
    1b48:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__fp_split3>
    1b4c:	58 f3       	brcs	.-42     	; 0x1b24 <__addsf3+0xc>
    1b4e:	ba 17       	cp	r27, r26
    1b50:	62 07       	cpc	r22, r18
    1b52:	73 07       	cpc	r23, r19
    1b54:	84 07       	cpc	r24, r20
    1b56:	95 07       	cpc	r25, r21
    1b58:	20 f0       	brcs	.+8      	; 0x1b62 <__addsf3x+0x1c>
    1b5a:	79 f4       	brne	.+30     	; 0x1b7a <__addsf3x+0x34>
    1b5c:	a6 f5       	brtc	.+104    	; 0x1bc6 <__addsf3x+0x80>
    1b5e:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__fp_zero>
    1b62:	0e f4       	brtc	.+2      	; 0x1b66 <__addsf3x+0x20>
    1b64:	e0 95       	com	r30
    1b66:	0b 2e       	mov	r0, r27
    1b68:	ba 2f       	mov	r27, r26
    1b6a:	a0 2d       	mov	r26, r0
    1b6c:	0b 01       	movw	r0, r22
    1b6e:	b9 01       	movw	r22, r18
    1b70:	90 01       	movw	r18, r0
    1b72:	0c 01       	movw	r0, r24
    1b74:	ca 01       	movw	r24, r20
    1b76:	a0 01       	movw	r20, r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	ff 27       	eor	r31, r31
    1b7c:	59 1b       	sub	r21, r25
    1b7e:	99 f0       	breq	.+38     	; 0x1ba6 <__addsf3x+0x60>
    1b80:	59 3f       	cpi	r21, 0xF9	; 249
    1b82:	50 f4       	brcc	.+20     	; 0x1b98 <__addsf3x+0x52>
    1b84:	50 3e       	cpi	r21, 0xE0	; 224
    1b86:	68 f1       	brcs	.+90     	; 0x1be2 <__addsf3x+0x9c>
    1b88:	1a 16       	cp	r1, r26
    1b8a:	f0 40       	sbci	r31, 0x00	; 0
    1b8c:	a2 2f       	mov	r26, r18
    1b8e:	23 2f       	mov	r18, r19
    1b90:	34 2f       	mov	r19, r20
    1b92:	44 27       	eor	r20, r20
    1b94:	58 5f       	subi	r21, 0xF8	; 248
    1b96:	f3 cf       	rjmp	.-26     	; 0x1b7e <__addsf3x+0x38>
    1b98:	46 95       	lsr	r20
    1b9a:	37 95       	ror	r19
    1b9c:	27 95       	ror	r18
    1b9e:	a7 95       	ror	r26
    1ba0:	f0 40       	sbci	r31, 0x00	; 0
    1ba2:	53 95       	inc	r21
    1ba4:	c9 f7       	brne	.-14     	; 0x1b98 <__addsf3x+0x52>
    1ba6:	7e f4       	brtc	.+30     	; 0x1bc6 <__addsf3x+0x80>
    1ba8:	1f 16       	cp	r1, r31
    1baa:	ba 0b       	sbc	r27, r26
    1bac:	62 0b       	sbc	r22, r18
    1bae:	73 0b       	sbc	r23, r19
    1bb0:	84 0b       	sbc	r24, r20
    1bb2:	ba f0       	brmi	.+46     	; 0x1be2 <__addsf3x+0x9c>
    1bb4:	91 50       	subi	r25, 0x01	; 1
    1bb6:	a1 f0       	breq	.+40     	; 0x1be0 <__addsf3x+0x9a>
    1bb8:	ff 0f       	add	r31, r31
    1bba:	bb 1f       	adc	r27, r27
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	88 1f       	adc	r24, r24
    1bc2:	c2 f7       	brpl	.-16     	; 0x1bb4 <__addsf3x+0x6e>
    1bc4:	0e c0       	rjmp	.+28     	; 0x1be2 <__addsf3x+0x9c>
    1bc6:	ba 0f       	add	r27, r26
    1bc8:	62 1f       	adc	r22, r18
    1bca:	73 1f       	adc	r23, r19
    1bcc:	84 1f       	adc	r24, r20
    1bce:	48 f4       	brcc	.+18     	; 0x1be2 <__addsf3x+0x9c>
    1bd0:	87 95       	ror	r24
    1bd2:	77 95       	ror	r23
    1bd4:	67 95       	ror	r22
    1bd6:	b7 95       	ror	r27
    1bd8:	f7 95       	ror	r31
    1bda:	9e 3f       	cpi	r25, 0xFE	; 254
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <__addsf3x+0x9a>
    1bde:	b0 cf       	rjmp	.-160    	; 0x1b40 <__addsf3+0x28>
    1be0:	93 95       	inc	r25
    1be2:	88 0f       	add	r24, r24
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <__addsf3x+0xa2>
    1be6:	99 27       	eor	r25, r25
    1be8:	ee 0f       	add	r30, r30
    1bea:	97 95       	ror	r25
    1bec:	87 95       	ror	r24
    1bee:	08 95       	ret

00001bf0 <__divsf3>:
    1bf0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__divsf3x>
    1bf4:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_round>
    1bf8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__fp_pscB>
    1bfc:	58 f0       	brcs	.+22     	; 0x1c14 <__divsf3+0x24>
    1bfe:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__fp_pscA>
    1c02:	40 f0       	brcs	.+16     	; 0x1c14 <__divsf3+0x24>
    1c04:	29 f4       	brne	.+10     	; 0x1c10 <__divsf3+0x20>
    1c06:	5f 3f       	cpi	r21, 0xFF	; 255
    1c08:	29 f0       	breq	.+10     	; 0x1c14 <__divsf3+0x24>
    1c0a:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>
    1c0e:	51 11       	cpse	r21, r1
    1c10:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>
    1c14:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_nan>

00001c18 <__divsf3x>:
    1c18:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__fp_split3>
    1c1c:	68 f3       	brcs	.-38     	; 0x1bf8 <__divsf3+0x8>

00001c1e <__divsf3_pse>:
    1c1e:	99 23       	and	r25, r25
    1c20:	b1 f3       	breq	.-20     	; 0x1c0e <__divsf3+0x1e>
    1c22:	55 23       	and	r21, r21
    1c24:	91 f3       	breq	.-28     	; 0x1c0a <__divsf3+0x1a>
    1c26:	95 1b       	sub	r25, r21
    1c28:	55 0b       	sbc	r21, r21
    1c2a:	bb 27       	eor	r27, r27
    1c2c:	aa 27       	eor	r26, r26
    1c2e:	62 17       	cp	r22, r18
    1c30:	73 07       	cpc	r23, r19
    1c32:	84 07       	cpc	r24, r20
    1c34:	38 f0       	brcs	.+14     	; 0x1c44 <__divsf3_pse+0x26>
    1c36:	9f 5f       	subi	r25, 0xFF	; 255
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	44 1f       	adc	r20, r20
    1c40:	aa 1f       	adc	r26, r26
    1c42:	a9 f3       	breq	.-22     	; 0x1c2e <__divsf3_pse+0x10>
    1c44:	35 d0       	rcall	.+106    	; 0x1cb0 <__divsf3_pse+0x92>
    1c46:	0e 2e       	mov	r0, r30
    1c48:	3a f0       	brmi	.+14     	; 0x1c58 <__divsf3_pse+0x3a>
    1c4a:	e0 e8       	ldi	r30, 0x80	; 128
    1c4c:	32 d0       	rcall	.+100    	; 0x1cb2 <__divsf3_pse+0x94>
    1c4e:	91 50       	subi	r25, 0x01	; 1
    1c50:	50 40       	sbci	r21, 0x00	; 0
    1c52:	e6 95       	lsr	r30
    1c54:	00 1c       	adc	r0, r0
    1c56:	ca f7       	brpl	.-14     	; 0x1c4a <__divsf3_pse+0x2c>
    1c58:	2b d0       	rcall	.+86     	; 0x1cb0 <__divsf3_pse+0x92>
    1c5a:	fe 2f       	mov	r31, r30
    1c5c:	29 d0       	rcall	.+82     	; 0x1cb0 <__divsf3_pse+0x92>
    1c5e:	66 0f       	add	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	bb 1f       	adc	r27, r27
    1c66:	26 17       	cp	r18, r22
    1c68:	37 07       	cpc	r19, r23
    1c6a:	48 07       	cpc	r20, r24
    1c6c:	ab 07       	cpc	r26, r27
    1c6e:	b0 e8       	ldi	r27, 0x80	; 128
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <__divsf3_pse+0x56>
    1c72:	bb 0b       	sbc	r27, r27
    1c74:	80 2d       	mov	r24, r0
    1c76:	bf 01       	movw	r22, r30
    1c78:	ff 27       	eor	r31, r31
    1c7a:	93 58       	subi	r25, 0x83	; 131
    1c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7e:	3a f0       	brmi	.+14     	; 0x1c8e <__divsf3_pse+0x70>
    1c80:	9e 3f       	cpi	r25, 0xFE	; 254
    1c82:	51 05       	cpc	r21, r1
    1c84:	78 f0       	brcs	.+30     	; 0x1ca4 <__divsf3_pse+0x86>
    1c86:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>
    1c8a:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>
    1c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c90:	e4 f3       	brlt	.-8      	; 0x1c8a <__divsf3_pse+0x6c>
    1c92:	98 3e       	cpi	r25, 0xE8	; 232
    1c94:	d4 f3       	brlt	.-12     	; 0x1c8a <__divsf3_pse+0x6c>
    1c96:	86 95       	lsr	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	b7 95       	ror	r27
    1c9e:	f7 95       	ror	r31
    1ca0:	9f 5f       	subi	r25, 0xFF	; 255
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <__divsf3_pse+0x78>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	96 95       	lsr	r25
    1caa:	87 95       	ror	r24
    1cac:	97 f9       	bld	r25, 7
    1cae:	08 95       	ret
    1cb0:	e1 e0       	ldi	r30, 0x01	; 1
    1cb2:	66 0f       	add	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	62 17       	cp	r22, r18
    1cbc:	73 07       	cpc	r23, r19
    1cbe:	84 07       	cpc	r24, r20
    1cc0:	ba 07       	cpc	r27, r26
    1cc2:	20 f0       	brcs	.+8      	; 0x1ccc <__divsf3_pse+0xae>
    1cc4:	62 1b       	sub	r22, r18
    1cc6:	73 0b       	sbc	r23, r19
    1cc8:	84 0b       	sbc	r24, r20
    1cca:	ba 0b       	sbc	r27, r26
    1ccc:	ee 1f       	adc	r30, r30
    1cce:	88 f7       	brcc	.-30     	; 0x1cb2 <__divsf3_pse+0x94>
    1cd0:	e0 95       	com	r30
    1cd2:	08 95       	ret

00001cd4 <__fixsfsi>:
    1cd4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
    1cd8:	68 94       	set
    1cda:	b1 11       	cpse	r27, r1
    1cdc:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>
    1ce0:	08 95       	ret

00001ce2 <__fixunssfsi>:
    1ce2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fp_splitA>
    1ce6:	88 f0       	brcs	.+34     	; 0x1d0a <__fixunssfsi+0x28>
    1ce8:	9f 57       	subi	r25, 0x7F	; 127
    1cea:	98 f0       	brcs	.+38     	; 0x1d12 <__fixunssfsi+0x30>
    1cec:	b9 2f       	mov	r27, r25
    1cee:	99 27       	eor	r25, r25
    1cf0:	b7 51       	subi	r27, 0x17	; 23
    1cf2:	b0 f0       	brcs	.+44     	; 0x1d20 <__fixunssfsi+0x3e>
    1cf4:	e1 f0       	breq	.+56     	; 0x1d2e <__fixunssfsi+0x4c>
    1cf6:	66 0f       	add	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	1a f0       	brmi	.+6      	; 0x1d06 <__fixunssfsi+0x24>
    1d00:	ba 95       	dec	r27
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__fixunssfsi+0x14>
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <__fixunssfsi+0x4c>
    1d06:	b1 30       	cpi	r27, 0x01	; 1
    1d08:	91 f0       	breq	.+36     	; 0x1d2e <__fixunssfsi+0x4c>
    1d0a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_zero>
    1d0e:	b1 e0       	ldi	r27, 0x01	; 1
    1d10:	08 95       	ret
    1d12:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__fp_zero>
    1d16:	67 2f       	mov	r22, r23
    1d18:	78 2f       	mov	r23, r24
    1d1a:	88 27       	eor	r24, r24
    1d1c:	b8 5f       	subi	r27, 0xF8	; 248
    1d1e:	39 f0       	breq	.+14     	; 0x1d2e <__fixunssfsi+0x4c>
    1d20:	b9 3f       	cpi	r27, 0xF9	; 249
    1d22:	cc f3       	brlt	.-14     	; 0x1d16 <__fixunssfsi+0x34>
    1d24:	86 95       	lsr	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	b3 95       	inc	r27
    1d2c:	d9 f7       	brne	.-10     	; 0x1d24 <__fixunssfsi+0x42>
    1d2e:	3e f4       	brtc	.+14     	; 0x1d3e <__fixunssfsi+0x5c>
    1d30:	90 95       	com	r25
    1d32:	80 95       	com	r24
    1d34:	70 95       	com	r23
    1d36:	61 95       	neg	r22
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	08 95       	ret

00001d40 <__floatunsisf>:
    1d40:	e8 94       	clt
    1d42:	09 c0       	rjmp	.+18     	; 0x1d56 <__floatsisf+0x12>

00001d44 <__floatsisf>:
    1d44:	97 fb       	bst	r25, 7
    1d46:	3e f4       	brtc	.+14     	; 0x1d56 <__floatsisf+0x12>
    1d48:	90 95       	com	r25
    1d4a:	80 95       	com	r24
    1d4c:	70 95       	com	r23
    1d4e:	61 95       	neg	r22
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	8f 4f       	sbci	r24, 0xFF	; 255
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	99 23       	and	r25, r25
    1d58:	a9 f0       	breq	.+42     	; 0x1d84 <__floatsisf+0x40>
    1d5a:	f9 2f       	mov	r31, r25
    1d5c:	96 e9       	ldi	r25, 0x96	; 150
    1d5e:	bb 27       	eor	r27, r27
    1d60:	93 95       	inc	r25
    1d62:	f6 95       	lsr	r31
    1d64:	87 95       	ror	r24
    1d66:	77 95       	ror	r23
    1d68:	67 95       	ror	r22
    1d6a:	b7 95       	ror	r27
    1d6c:	f1 11       	cpse	r31, r1
    1d6e:	f8 cf       	rjmp	.-16     	; 0x1d60 <__floatsisf+0x1c>
    1d70:	fa f4       	brpl	.+62     	; 0x1db0 <__floatsisf+0x6c>
    1d72:	bb 0f       	add	r27, r27
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <__floatsisf+0x36>
    1d76:	60 ff       	sbrs	r22, 0
    1d78:	1b c0       	rjmp	.+54     	; 0x1db0 <__floatsisf+0x6c>
    1d7a:	6f 5f       	subi	r22, 0xFF	; 255
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	16 c0       	rjmp	.+44     	; 0x1db0 <__floatsisf+0x6c>
    1d84:	88 23       	and	r24, r24
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <__floatsisf+0x48>
    1d88:	96 e9       	ldi	r25, 0x96	; 150
    1d8a:	11 c0       	rjmp	.+34     	; 0x1dae <__floatsisf+0x6a>
    1d8c:	77 23       	and	r23, r23
    1d8e:	21 f0       	breq	.+8      	; 0x1d98 <__floatsisf+0x54>
    1d90:	9e e8       	ldi	r25, 0x8E	; 142
    1d92:	87 2f       	mov	r24, r23
    1d94:	76 2f       	mov	r23, r22
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <__floatsisf+0x5e>
    1d98:	66 23       	and	r22, r22
    1d9a:	71 f0       	breq	.+28     	; 0x1db8 <__floatsisf+0x74>
    1d9c:	96 e8       	ldi	r25, 0x86	; 134
    1d9e:	86 2f       	mov	r24, r22
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	2a f0       	brmi	.+10     	; 0x1db0 <__floatsisf+0x6c>
    1da6:	9a 95       	dec	r25
    1da8:	66 0f       	add	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	da f7       	brpl	.-10     	; 0x1da6 <__floatsisf+0x62>
    1db0:	88 0f       	add	r24, r24
    1db2:	96 95       	lsr	r25
    1db4:	87 95       	ror	r24
    1db6:	97 f9       	bld	r25, 7
    1db8:	08 95       	ret

00001dba <__fp_inf>:
    1dba:	97 f9       	bld	r25, 7
    1dbc:	9f 67       	ori	r25, 0x7F	; 127
    1dbe:	80 e8       	ldi	r24, 0x80	; 128
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	08 95       	ret

00001dc6 <__fp_nan>:
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
    1dc8:	80 ec       	ldi	r24, 0xC0	; 192
    1dca:	08 95       	ret

00001dcc <__fp_pscA>:
    1dcc:	00 24       	eor	r0, r0
    1dce:	0a 94       	dec	r0
    1dd0:	16 16       	cp	r1, r22
    1dd2:	17 06       	cpc	r1, r23
    1dd4:	18 06       	cpc	r1, r24
    1dd6:	09 06       	cpc	r0, r25
    1dd8:	08 95       	ret

00001dda <__fp_pscB>:
    1dda:	00 24       	eor	r0, r0
    1ddc:	0a 94       	dec	r0
    1dde:	12 16       	cp	r1, r18
    1de0:	13 06       	cpc	r1, r19
    1de2:	14 06       	cpc	r1, r20
    1de4:	05 06       	cpc	r0, r21
    1de6:	08 95       	ret

00001de8 <__fp_round>:
    1de8:	09 2e       	mov	r0, r25
    1dea:	03 94       	inc	r0
    1dec:	00 0c       	add	r0, r0
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <__fp_round+0xc>
    1df0:	88 23       	and	r24, r24
    1df2:	52 f0       	brmi	.+20     	; 0x1e08 <__fp_round+0x20>
    1df4:	bb 0f       	add	r27, r27
    1df6:	40 f4       	brcc	.+16     	; 0x1e08 <__fp_round+0x20>
    1df8:	bf 2b       	or	r27, r31
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__fp_round+0x18>
    1dfc:	60 ff       	sbrs	r22, 0
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <__fp_round+0x20>
    1e00:	6f 5f       	subi	r22, 0xFF	; 255
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	8f 4f       	sbci	r24, 0xFF	; 255
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	08 95       	ret

00001e0a <__fp_split3>:
    1e0a:	57 fd       	sbrc	r21, 7
    1e0c:	90 58       	subi	r25, 0x80	; 128
    1e0e:	44 0f       	add	r20, r20
    1e10:	55 1f       	adc	r21, r21
    1e12:	59 f0       	breq	.+22     	; 0x1e2a <__fp_splitA+0x10>
    1e14:	5f 3f       	cpi	r21, 0xFF	; 255
    1e16:	71 f0       	breq	.+28     	; 0x1e34 <__fp_splitA+0x1a>
    1e18:	47 95       	ror	r20

00001e1a <__fp_splitA>:
    1e1a:	88 0f       	add	r24, r24
    1e1c:	97 fb       	bst	r25, 7
    1e1e:	99 1f       	adc	r25, r25
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <__fp_splitA+0x20>
    1e22:	9f 3f       	cpi	r25, 0xFF	; 255
    1e24:	79 f0       	breq	.+30     	; 0x1e44 <__fp_splitA+0x2a>
    1e26:	87 95       	ror	r24
    1e28:	08 95       	ret
    1e2a:	12 16       	cp	r1, r18
    1e2c:	13 06       	cpc	r1, r19
    1e2e:	14 06       	cpc	r1, r20
    1e30:	55 1f       	adc	r21, r21
    1e32:	f2 cf       	rjmp	.-28     	; 0x1e18 <__fp_split3+0xe>
    1e34:	46 95       	lsr	r20
    1e36:	f1 df       	rcall	.-30     	; 0x1e1a <__fp_splitA>
    1e38:	08 c0       	rjmp	.+16     	; 0x1e4a <__fp_splitA+0x30>
    1e3a:	16 16       	cp	r1, r22
    1e3c:	17 06       	cpc	r1, r23
    1e3e:	18 06       	cpc	r1, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	f1 cf       	rjmp	.-30     	; 0x1e26 <__fp_splitA+0xc>
    1e44:	86 95       	lsr	r24
    1e46:	71 05       	cpc	r23, r1
    1e48:	61 05       	cpc	r22, r1
    1e4a:	08 94       	sec
    1e4c:	08 95       	ret

00001e4e <__fp_zero>:
    1e4e:	e8 94       	clt

00001e50 <__fp_szero>:
    1e50:	bb 27       	eor	r27, r27
    1e52:	66 27       	eor	r22, r22
    1e54:	77 27       	eor	r23, r23
    1e56:	cb 01       	movw	r24, r22
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret
    1e5c:	16 f0       	brts	.+4      	; 0x1e62 <__fp_szero+0x12>
    1e5e:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_mpack>
    1e62:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_nan>
    1e66:	68 94       	set
    1e68:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>

00001e6c <log>:
    1e6c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fp_splitA>
    1e70:	a8 f3       	brcs	.-22     	; 0x1e5c <__fp_szero+0xc>
    1e72:	99 23       	and	r25, r25
    1e74:	c1 f3       	breq	.-16     	; 0x1e66 <__fp_szero+0x16>
    1e76:	ae f3       	brts	.-22     	; 0x1e62 <__fp_szero+0x12>
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	1f 93       	push	r17
    1e7e:	0f 93       	push	r16
    1e80:	ff 92       	push	r15
    1e82:	c9 2f       	mov	r28, r25
    1e84:	dd 27       	eor	r29, r29
    1e86:	88 23       	and	r24, r24
    1e88:	2a f0       	brmi	.+10     	; 0x1e94 <log+0x28>
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	66 0f       	add	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	88 1f       	adc	r24, r24
    1e92:	da f7       	brpl	.-10     	; 0x1e8a <log+0x1e>
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f eb       	ldi	r21, 0xBF	; 191
    1e9c:	9f e3       	ldi	r25, 0x3F	; 63
    1e9e:	88 39       	cpi	r24, 0x98	; 152
    1ea0:	20 f0       	brcs	.+8      	; 0x1eaa <log+0x3e>
    1ea2:	80 3e       	cpi	r24, 0xE0	; 224
    1ea4:	38 f0       	brcs	.+14     	; 0x1eb4 <log+0x48>
    1ea6:	21 96       	adiw	r28, 0x01	; 1
    1ea8:	8f 77       	andi	r24, 0x7F	; 127
    1eaa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__addsf3>
    1eae:	ea e9       	ldi	r30, 0x9A	; 154
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <log+0x50>
    1eb4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__addsf3>
    1eb8:	e7 ec       	ldi	r30, 0xC7	; 199
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fp_powser>
    1ec0:	8b 01       	movw	r16, r22
    1ec2:	be 01       	movw	r22, r28
    1ec4:	ec 01       	movw	r28, r24
    1ec6:	fb 2e       	mov	r15, r27
    1ec8:	6f 57       	subi	r22, 0x7F	; 127
    1eca:	71 09       	sbc	r23, r1
    1ecc:	75 95       	asr	r23
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 0b       	sbc	r24, r24
    1ed2:	99 0b       	sbc	r25, r25
    1ed4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__floatsisf>
    1ed8:	28 e1       	ldi	r18, 0x18	; 24
    1eda:	32 e7       	ldi	r19, 0x72	; 114
    1edc:	41 e3       	ldi	r20, 0x31	; 49
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__mulsf3x>
    1ee4:	af 2d       	mov	r26, r15
    1ee6:	98 01       	movw	r18, r16
    1ee8:	ae 01       	movw	r20, r28
    1eea:	ff 90       	pop	r15
    1eec:	0f 91       	pop	r16
    1eee:	1f 91       	pop	r17
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__addsf3x>
    1ef8:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_round>
    1efc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__fp_pscA>
    1f00:	38 f0       	brcs	.+14     	; 0x1f10 <log+0xa4>
    1f02:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__fp_pscB>
    1f06:	20 f0       	brcs	.+8      	; 0x1f10 <log+0xa4>
    1f08:	95 23       	and	r25, r21
    1f0a:	11 f0       	breq	.+4      	; 0x1f10 <log+0xa4>
    1f0c:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>
    1f10:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_nan>
    1f14:	11 24       	eor	r1, r1
    1f16:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>

00001f1a <__mulsf3x>:
    1f1a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__fp_split3>
    1f1e:	70 f3       	brcs	.-36     	; 0x1efc <log+0x90>

00001f20 <__mulsf3_pse>:
    1f20:	95 9f       	mul	r25, r21
    1f22:	c1 f3       	breq	.-16     	; 0x1f14 <log+0xa8>
    1f24:	95 0f       	add	r25, r21
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	55 1f       	adc	r21, r21
    1f2a:	62 9f       	mul	r22, r18
    1f2c:	f0 01       	movw	r30, r0
    1f2e:	72 9f       	mul	r23, r18
    1f30:	bb 27       	eor	r27, r27
    1f32:	f0 0d       	add	r31, r0
    1f34:	b1 1d       	adc	r27, r1
    1f36:	63 9f       	mul	r22, r19
    1f38:	aa 27       	eor	r26, r26
    1f3a:	f0 0d       	add	r31, r0
    1f3c:	b1 1d       	adc	r27, r1
    1f3e:	aa 1f       	adc	r26, r26
    1f40:	64 9f       	mul	r22, r20
    1f42:	66 27       	eor	r22, r22
    1f44:	b0 0d       	add	r27, r0
    1f46:	a1 1d       	adc	r26, r1
    1f48:	66 1f       	adc	r22, r22
    1f4a:	82 9f       	mul	r24, r18
    1f4c:	22 27       	eor	r18, r18
    1f4e:	b0 0d       	add	r27, r0
    1f50:	a1 1d       	adc	r26, r1
    1f52:	62 1f       	adc	r22, r18
    1f54:	73 9f       	mul	r23, r19
    1f56:	b0 0d       	add	r27, r0
    1f58:	a1 1d       	adc	r26, r1
    1f5a:	62 1f       	adc	r22, r18
    1f5c:	83 9f       	mul	r24, r19
    1f5e:	a0 0d       	add	r26, r0
    1f60:	61 1d       	adc	r22, r1
    1f62:	22 1f       	adc	r18, r18
    1f64:	74 9f       	mul	r23, r20
    1f66:	33 27       	eor	r19, r19
    1f68:	a0 0d       	add	r26, r0
    1f6a:	61 1d       	adc	r22, r1
    1f6c:	23 1f       	adc	r18, r19
    1f6e:	84 9f       	mul	r24, r20
    1f70:	60 0d       	add	r22, r0
    1f72:	21 1d       	adc	r18, r1
    1f74:	82 2f       	mov	r24, r18
    1f76:	76 2f       	mov	r23, r22
    1f78:	6a 2f       	mov	r22, r26
    1f7a:	11 24       	eor	r1, r1
    1f7c:	9f 57       	subi	r25, 0x7F	; 127
    1f7e:	50 40       	sbci	r21, 0x00	; 0
    1f80:	9a f0       	brmi	.+38     	; 0x1fa8 <__mulsf3_pse+0x88>
    1f82:	f1 f0       	breq	.+60     	; 0x1fc0 <__mulsf3_pse+0xa0>
    1f84:	88 23       	and	r24, r24
    1f86:	4a f0       	brmi	.+18     	; 0x1f9a <__mulsf3_pse+0x7a>
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	66 1f       	adc	r22, r22
    1f90:	77 1f       	adc	r23, r23
    1f92:	88 1f       	adc	r24, r24
    1f94:	91 50       	subi	r25, 0x01	; 1
    1f96:	50 40       	sbci	r21, 0x00	; 0
    1f98:	a9 f7       	brne	.-22     	; 0x1f84 <__mulsf3_pse+0x64>
    1f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f9c:	51 05       	cpc	r21, r1
    1f9e:	80 f0       	brcs	.+32     	; 0x1fc0 <__mulsf3_pse+0xa0>
    1fa0:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>
    1fa4:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>
    1fa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1faa:	e4 f3       	brlt	.-8      	; 0x1fa4 <__mulsf3_pse+0x84>
    1fac:	98 3e       	cpi	r25, 0xE8	; 232
    1fae:	d4 f3       	brlt	.-12     	; 0x1fa4 <__mulsf3_pse+0x84>
    1fb0:	86 95       	lsr	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	b7 95       	ror	r27
    1fb8:	f7 95       	ror	r31
    1fba:	e7 95       	ror	r30
    1fbc:	9f 5f       	subi	r25, 0xFF	; 255
    1fbe:	c1 f7       	brne	.-16     	; 0x1fb0 <__mulsf3_pse+0x90>
    1fc0:	fe 2b       	or	r31, r30
    1fc2:	88 0f       	add	r24, r24
    1fc4:	91 1d       	adc	r25, r1
    1fc6:	96 95       	lsr	r25
    1fc8:	87 95       	ror	r24
    1fca:	97 f9       	bld	r25, 7
    1fcc:	08 95       	ret

00001fce <__fp_mpack>:
    1fce:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd0:	31 f0       	breq	.+12     	; 0x1fde <__fp_mpack_finite+0xc>

00001fd2 <__fp_mpack_finite>:
    1fd2:	91 50       	subi	r25, 0x01	; 1
    1fd4:	20 f4       	brcc	.+8      	; 0x1fde <__fp_mpack_finite+0xc>
    1fd6:	87 95       	ror	r24
    1fd8:	77 95       	ror	r23
    1fda:	67 95       	ror	r22
    1fdc:	b7 95       	ror	r27
    1fde:	88 0f       	add	r24, r24
    1fe0:	91 1d       	adc	r25, r1
    1fe2:	96 95       	lsr	r25
    1fe4:	87 95       	ror	r24
    1fe6:	97 f9       	bld	r25, 7
    1fe8:	08 95       	ret

00001fea <__fp_powser>:
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	1f 93       	push	r17
    1ff0:	0f 93       	push	r16
    1ff2:	ff 92       	push	r15
    1ff4:	ef 92       	push	r14
    1ff6:	df 92       	push	r13
    1ff8:	7b 01       	movw	r14, r22
    1ffa:	8c 01       	movw	r16, r24
    1ffc:	68 94       	set
    1ffe:	06 c0       	rjmp	.+12     	; 0x200c <__fp_powser+0x22>
    2000:	da 2e       	mov	r13, r26
    2002:	ef 01       	movw	r28, r30
    2004:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__mulsf3x>
    2008:	fe 01       	movw	r30, r28
    200a:	e8 94       	clt
    200c:	a5 91       	lpm	r26, Z+
    200e:	25 91       	lpm	r18, Z+
    2010:	35 91       	lpm	r19, Z+
    2012:	45 91       	lpm	r20, Z+
    2014:	55 91       	lpm	r21, Z+
    2016:	a6 f3       	brts	.-24     	; 0x2000 <__fp_powser+0x16>
    2018:	ef 01       	movw	r28, r30
    201a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__addsf3x>
    201e:	fe 01       	movw	r30, r28
    2020:	97 01       	movw	r18, r14
    2022:	a8 01       	movw	r20, r16
    2024:	da 94       	dec	r13
    2026:	69 f7       	brne	.-38     	; 0x2002 <__fp_powser+0x18>
    2028:	df 90       	pop	r13
    202a:	ef 90       	pop	r14
    202c:	ff 90       	pop	r15
    202e:	0f 91       	pop	r16
    2030:	1f 91       	pop	r17
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <dtostrf>:
    2038:	ef 92       	push	r14
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	e8 01       	movw	r28, r16
    2044:	47 fd       	sbrc	r20, 7
    2046:	02 c0       	rjmp	.+4      	; 0x204c <dtostrf+0x14>
    2048:	34 e0       	ldi	r19, 0x04	; 4
    204a:	01 c0       	rjmp	.+2      	; 0x204e <dtostrf+0x16>
    204c:	34 e1       	ldi	r19, 0x14	; 20
    204e:	04 2e       	mov	r0, r20
    2050:	00 0c       	add	r0, r0
    2052:	55 0b       	sbc	r21, r21
    2054:	57 ff       	sbrs	r21, 7
    2056:	03 c0       	rjmp	.+6      	; 0x205e <dtostrf+0x26>
    2058:	51 95       	neg	r21
    205a:	41 95       	neg	r20
    205c:	51 09       	sbc	r21, r1
    205e:	e3 2e       	mov	r14, r19
    2060:	02 2f       	mov	r16, r18
    2062:	24 2f       	mov	r18, r20
    2064:	ae 01       	movw	r20, r28
    2066:	0e 94 48 12 	call	0x2490	; 0x2490 <dtoa_prf>
    206a:	ce 01       	movw	r24, r28
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ef 90       	pop	r14
    2076:	08 95       	ret

00002078 <sprintf>:
    2078:	ae e0       	ldi	r26, 0x0E	; 14
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e2 e4       	ldi	r30, 0x42	; 66
    207e:	f0 e1       	ldi	r31, 0x10	; 16
    2080:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x1c>
    2084:	0d 89       	ldd	r16, Y+21	; 0x15
    2086:	1e 89       	ldd	r17, Y+22	; 0x16
    2088:	86 e0       	ldi	r24, 0x06	; 6
    208a:	8c 83       	std	Y+4, r24	; 0x04
    208c:	1a 83       	std	Y+2, r17	; 0x02
    208e:	09 83       	std	Y+1, r16	; 0x01
    2090:	8f ef       	ldi	r24, 0xFF	; 255
    2092:	9f e7       	ldi	r25, 0x7F	; 127
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	ae 01       	movw	r20, r28
    209a:	47 5e       	subi	r20, 0xE7	; 231
    209c:	5f 4f       	sbci	r21, 0xFF	; 255
    209e:	6f 89       	ldd	r22, Y+23	; 0x17
    20a0:	78 8d       	ldd	r23, Y+24	; 0x18
    20a2:	ce 01       	movw	r24, r28
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	0e 94 67 10 	call	0x20ce	; 0x20ce <vfprintf>
    20aa:	ef 81       	ldd	r30, Y+7	; 0x07
    20ac:	f8 85       	ldd	r31, Y+8	; 0x08
    20ae:	e0 0f       	add	r30, r16
    20b0:	f1 1f       	adc	r31, r17
    20b2:	10 82       	st	Z, r1
    20b4:	2e 96       	adiw	r28, 0x0e	; 14
    20b6:	e4 e0       	ldi	r30, 0x04	; 4
    20b8:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x1c>

000020bc <vprintf>:
    20bc:	ab 01       	movw	r20, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <__iob+0x2>
    20c4:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <__iob+0x3>
    20c8:	0e 94 67 10 	call	0x20ce	; 0x20ce <vfprintf>
    20cc:	08 95       	ret

000020ce <vfprintf>:
    20ce:	ab e0       	ldi	r26, 0x0B	; 11
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ed e6       	ldi	r30, 0x6D	; 109
    20d4:	f0 e1       	ldi	r31, 0x10	; 16
    20d6:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
    20da:	6c 01       	movw	r12, r24
    20dc:	7b 01       	movw	r14, r22
    20de:	8a 01       	movw	r16, r20
    20e0:	fc 01       	movw	r30, r24
    20e2:	17 82       	std	Z+7, r1	; 0x07
    20e4:	16 82       	std	Z+6, r1	; 0x06
    20e6:	83 81       	ldd	r24, Z+3	; 0x03
    20e8:	81 ff       	sbrs	r24, 1
    20ea:	cc c1       	rjmp	.+920    	; 0x2484 <vfprintf+0x3b6>
    20ec:	ce 01       	movw	r24, r28
    20ee:	01 96       	adiw	r24, 0x01	; 1
    20f0:	3c 01       	movw	r6, r24
    20f2:	f6 01       	movw	r30, r12
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	f7 01       	movw	r30, r14
    20f8:	93 fd       	sbrc	r25, 3
    20fa:	85 91       	lpm	r24, Z+
    20fc:	93 ff       	sbrs	r25, 3
    20fe:	81 91       	ld	r24, Z+
    2100:	7f 01       	movw	r14, r30
    2102:	88 23       	and	r24, r24
    2104:	09 f4       	brne	.+2      	; 0x2108 <vfprintf+0x3a>
    2106:	ba c1       	rjmp	.+884    	; 0x247c <vfprintf+0x3ae>
    2108:	85 32       	cpi	r24, 0x25	; 37
    210a:	39 f4       	brne	.+14     	; 0x211a <vfprintf+0x4c>
    210c:	93 fd       	sbrc	r25, 3
    210e:	85 91       	lpm	r24, Z+
    2110:	93 ff       	sbrs	r25, 3
    2112:	81 91       	ld	r24, Z+
    2114:	7f 01       	movw	r14, r30
    2116:	85 32       	cpi	r24, 0x25	; 37
    2118:	29 f4       	brne	.+10     	; 0x2124 <vfprintf+0x56>
    211a:	b6 01       	movw	r22, r12
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    2122:	e7 cf       	rjmp	.-50     	; 0x20f2 <vfprintf+0x24>
    2124:	91 2c       	mov	r9, r1
    2126:	21 2c       	mov	r2, r1
    2128:	31 2c       	mov	r3, r1
    212a:	ff e1       	ldi	r31, 0x1F	; 31
    212c:	f3 15       	cp	r31, r3
    212e:	d8 f0       	brcs	.+54     	; 0x2166 <vfprintf+0x98>
    2130:	8b 32       	cpi	r24, 0x2B	; 43
    2132:	79 f0       	breq	.+30     	; 0x2152 <vfprintf+0x84>
    2134:	38 f4       	brcc	.+14     	; 0x2144 <vfprintf+0x76>
    2136:	80 32       	cpi	r24, 0x20	; 32
    2138:	79 f0       	breq	.+30     	; 0x2158 <vfprintf+0x8a>
    213a:	83 32       	cpi	r24, 0x23	; 35
    213c:	a1 f4       	brne	.+40     	; 0x2166 <vfprintf+0x98>
    213e:	23 2d       	mov	r18, r3
    2140:	20 61       	ori	r18, 0x10	; 16
    2142:	1d c0       	rjmp	.+58     	; 0x217e <vfprintf+0xb0>
    2144:	8d 32       	cpi	r24, 0x2D	; 45
    2146:	61 f0       	breq	.+24     	; 0x2160 <vfprintf+0x92>
    2148:	80 33       	cpi	r24, 0x30	; 48
    214a:	69 f4       	brne	.+26     	; 0x2166 <vfprintf+0x98>
    214c:	23 2d       	mov	r18, r3
    214e:	21 60       	ori	r18, 0x01	; 1
    2150:	16 c0       	rjmp	.+44     	; 0x217e <vfprintf+0xb0>
    2152:	83 2d       	mov	r24, r3
    2154:	82 60       	ori	r24, 0x02	; 2
    2156:	38 2e       	mov	r3, r24
    2158:	e3 2d       	mov	r30, r3
    215a:	e4 60       	ori	r30, 0x04	; 4
    215c:	3e 2e       	mov	r3, r30
    215e:	2a c0       	rjmp	.+84     	; 0x21b4 <vfprintf+0xe6>
    2160:	f3 2d       	mov	r31, r3
    2162:	f8 60       	ori	r31, 0x08	; 8
    2164:	1d c0       	rjmp	.+58     	; 0x21a0 <vfprintf+0xd2>
    2166:	37 fc       	sbrc	r3, 7
    2168:	2d c0       	rjmp	.+90     	; 0x21c4 <vfprintf+0xf6>
    216a:	20 ed       	ldi	r18, 0xD0	; 208
    216c:	28 0f       	add	r18, r24
    216e:	2a 30       	cpi	r18, 0x0A	; 10
    2170:	40 f0       	brcs	.+16     	; 0x2182 <vfprintf+0xb4>
    2172:	8e 32       	cpi	r24, 0x2E	; 46
    2174:	b9 f4       	brne	.+46     	; 0x21a4 <vfprintf+0xd6>
    2176:	36 fc       	sbrc	r3, 6
    2178:	81 c1       	rjmp	.+770    	; 0x247c <vfprintf+0x3ae>
    217a:	23 2d       	mov	r18, r3
    217c:	20 64       	ori	r18, 0x40	; 64
    217e:	32 2e       	mov	r3, r18
    2180:	19 c0       	rjmp	.+50     	; 0x21b4 <vfprintf+0xe6>
    2182:	36 fe       	sbrs	r3, 6
    2184:	06 c0       	rjmp	.+12     	; 0x2192 <vfprintf+0xc4>
    2186:	8a e0       	ldi	r24, 0x0A	; 10
    2188:	98 9e       	mul	r9, r24
    218a:	20 0d       	add	r18, r0
    218c:	11 24       	eor	r1, r1
    218e:	92 2e       	mov	r9, r18
    2190:	11 c0       	rjmp	.+34     	; 0x21b4 <vfprintf+0xe6>
    2192:	ea e0       	ldi	r30, 0x0A	; 10
    2194:	2e 9e       	mul	r2, r30
    2196:	20 0d       	add	r18, r0
    2198:	11 24       	eor	r1, r1
    219a:	22 2e       	mov	r2, r18
    219c:	f3 2d       	mov	r31, r3
    219e:	f0 62       	ori	r31, 0x20	; 32
    21a0:	3f 2e       	mov	r3, r31
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <vfprintf+0xe6>
    21a4:	8c 36       	cpi	r24, 0x6C	; 108
    21a6:	21 f4       	brne	.+8      	; 0x21b0 <vfprintf+0xe2>
    21a8:	83 2d       	mov	r24, r3
    21aa:	80 68       	ori	r24, 0x80	; 128
    21ac:	38 2e       	mov	r3, r24
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <vfprintf+0xe6>
    21b0:	88 36       	cpi	r24, 0x68	; 104
    21b2:	41 f4       	brne	.+16     	; 0x21c4 <vfprintf+0xf6>
    21b4:	f7 01       	movw	r30, r14
    21b6:	93 fd       	sbrc	r25, 3
    21b8:	85 91       	lpm	r24, Z+
    21ba:	93 ff       	sbrs	r25, 3
    21bc:	81 91       	ld	r24, Z+
    21be:	7f 01       	movw	r14, r30
    21c0:	81 11       	cpse	r24, r1
    21c2:	b3 cf       	rjmp	.-154    	; 0x212a <vfprintf+0x5c>
    21c4:	98 2f       	mov	r25, r24
    21c6:	9f 7d       	andi	r25, 0xDF	; 223
    21c8:	95 54       	subi	r25, 0x45	; 69
    21ca:	93 30       	cpi	r25, 0x03	; 3
    21cc:	28 f4       	brcc	.+10     	; 0x21d8 <vfprintf+0x10a>
    21ce:	0c 5f       	subi	r16, 0xFC	; 252
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	9f e3       	ldi	r25, 0x3F	; 63
    21d4:	99 83       	std	Y+1, r25	; 0x01
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <vfprintf+0x124>
    21d8:	83 36       	cpi	r24, 0x63	; 99
    21da:	31 f0       	breq	.+12     	; 0x21e8 <vfprintf+0x11a>
    21dc:	83 37       	cpi	r24, 0x73	; 115
    21de:	71 f0       	breq	.+28     	; 0x21fc <vfprintf+0x12e>
    21e0:	83 35       	cpi	r24, 0x53	; 83
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <vfprintf+0x118>
    21e4:	59 c0       	rjmp	.+178    	; 0x2298 <vfprintf+0x1ca>
    21e6:	21 c0       	rjmp	.+66     	; 0x222a <vfprintf+0x15c>
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 81       	ld	r24, Z
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	0e 5f       	subi	r16, 0xFE	; 254
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	88 24       	eor	r8, r8
    21f4:	83 94       	inc	r8
    21f6:	91 2c       	mov	r9, r1
    21f8:	53 01       	movw	r10, r6
    21fa:	13 c0       	rjmp	.+38     	; 0x2222 <vfprintf+0x154>
    21fc:	28 01       	movw	r4, r16
    21fe:	f2 e0       	ldi	r31, 0x02	; 2
    2200:	4f 0e       	add	r4, r31
    2202:	51 1c       	adc	r5, r1
    2204:	f8 01       	movw	r30, r16
    2206:	a0 80       	ld	r10, Z
    2208:	b1 80       	ldd	r11, Z+1	; 0x01
    220a:	36 fe       	sbrs	r3, 6
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <vfprintf+0x146>
    220e:	69 2d       	mov	r22, r9
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <vfprintf+0x14a>
    2214:	6f ef       	ldi	r22, 0xFF	; 255
    2216:	7f ef       	ldi	r23, 0xFF	; 255
    2218:	c5 01       	movw	r24, r10
    221a:	0e 94 85 14 	call	0x290a	; 0x290a <strnlen>
    221e:	4c 01       	movw	r8, r24
    2220:	82 01       	movw	r16, r4
    2222:	f3 2d       	mov	r31, r3
    2224:	ff 77       	andi	r31, 0x7F	; 127
    2226:	3f 2e       	mov	r3, r31
    2228:	16 c0       	rjmp	.+44     	; 0x2256 <vfprintf+0x188>
    222a:	28 01       	movw	r4, r16
    222c:	22 e0       	ldi	r18, 0x02	; 2
    222e:	42 0e       	add	r4, r18
    2230:	51 1c       	adc	r5, r1
    2232:	f8 01       	movw	r30, r16
    2234:	a0 80       	ld	r10, Z
    2236:	b1 80       	ldd	r11, Z+1	; 0x01
    2238:	36 fe       	sbrs	r3, 6
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <vfprintf+0x174>
    223c:	69 2d       	mov	r22, r9
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <vfprintf+0x178>
    2242:	6f ef       	ldi	r22, 0xFF	; 255
    2244:	7f ef       	ldi	r23, 0xFF	; 255
    2246:	c5 01       	movw	r24, r10
    2248:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <strnlen_P>
    224c:	4c 01       	movw	r8, r24
    224e:	f3 2d       	mov	r31, r3
    2250:	f0 68       	ori	r31, 0x80	; 128
    2252:	3f 2e       	mov	r3, r31
    2254:	82 01       	movw	r16, r4
    2256:	33 fc       	sbrc	r3, 3
    2258:	1b c0       	rjmp	.+54     	; 0x2290 <vfprintf+0x1c2>
    225a:	82 2d       	mov	r24, r2
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	88 16       	cp	r8, r24
    2260:	99 06       	cpc	r9, r25
    2262:	b0 f4       	brcc	.+44     	; 0x2290 <vfprintf+0x1c2>
    2264:	b6 01       	movw	r22, r12
    2266:	80 e2       	ldi	r24, 0x20	; 32
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    226e:	2a 94       	dec	r2
    2270:	f4 cf       	rjmp	.-24     	; 0x225a <vfprintf+0x18c>
    2272:	f5 01       	movw	r30, r10
    2274:	37 fc       	sbrc	r3, 7
    2276:	85 91       	lpm	r24, Z+
    2278:	37 fe       	sbrs	r3, 7
    227a:	81 91       	ld	r24, Z+
    227c:	5f 01       	movw	r10, r30
    227e:	b6 01       	movw	r22, r12
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    2286:	21 10       	cpse	r2, r1
    2288:	2a 94       	dec	r2
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	82 1a       	sub	r8, r18
    228e:	91 08       	sbc	r9, r1
    2290:	81 14       	cp	r8, r1
    2292:	91 04       	cpc	r9, r1
    2294:	71 f7       	brne	.-36     	; 0x2272 <vfprintf+0x1a4>
    2296:	e8 c0       	rjmp	.+464    	; 0x2468 <vfprintf+0x39a>
    2298:	84 36       	cpi	r24, 0x64	; 100
    229a:	11 f0       	breq	.+4      	; 0x22a0 <vfprintf+0x1d2>
    229c:	89 36       	cpi	r24, 0x69	; 105
    229e:	41 f5       	brne	.+80     	; 0x22f0 <vfprintf+0x222>
    22a0:	f8 01       	movw	r30, r16
    22a2:	37 fe       	sbrs	r3, 7
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <vfprintf+0x1e6>
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	0c 5f       	subi	r16, 0xFC	; 252
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	08 c0       	rjmp	.+16     	; 0x22c4 <vfprintf+0x1f6>
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	07 2e       	mov	r0, r23
    22ba:	00 0c       	add	r0, r0
    22bc:	88 0b       	sbc	r24, r24
    22be:	99 0b       	sbc	r25, r25
    22c0:	0e 5f       	subi	r16, 0xFE	; 254
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	f3 2d       	mov	r31, r3
    22c6:	ff 76       	andi	r31, 0x6F	; 111
    22c8:	3f 2e       	mov	r3, r31
    22ca:	97 ff       	sbrs	r25, 7
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <vfprintf+0x212>
    22ce:	90 95       	com	r25
    22d0:	80 95       	com	r24
    22d2:	70 95       	com	r23
    22d4:	61 95       	neg	r22
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	f0 68       	ori	r31, 0x80	; 128
    22de:	3f 2e       	mov	r3, r31
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	a3 01       	movw	r20, r6
    22e6:	0e 94 cc 14 	call	0x2998	; 0x2998 <__ultoa_invert>
    22ea:	88 2e       	mov	r8, r24
    22ec:	86 18       	sub	r8, r6
    22ee:	45 c0       	rjmp	.+138    	; 0x237a <vfprintf+0x2ac>
    22f0:	85 37       	cpi	r24, 0x75	; 117
    22f2:	31 f4       	brne	.+12     	; 0x2300 <vfprintf+0x232>
    22f4:	23 2d       	mov	r18, r3
    22f6:	2f 7e       	andi	r18, 0xEF	; 239
    22f8:	b2 2e       	mov	r11, r18
    22fa:	2a e0       	ldi	r18, 0x0A	; 10
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	25 c0       	rjmp	.+74     	; 0x234a <vfprintf+0x27c>
    2300:	93 2d       	mov	r25, r3
    2302:	99 7f       	andi	r25, 0xF9	; 249
    2304:	b9 2e       	mov	r11, r25
    2306:	8f 36       	cpi	r24, 0x6F	; 111
    2308:	c1 f0       	breq	.+48     	; 0x233a <vfprintf+0x26c>
    230a:	18 f4       	brcc	.+6      	; 0x2312 <vfprintf+0x244>
    230c:	88 35       	cpi	r24, 0x58	; 88
    230e:	79 f0       	breq	.+30     	; 0x232e <vfprintf+0x260>
    2310:	b5 c0       	rjmp	.+362    	; 0x247c <vfprintf+0x3ae>
    2312:	80 37       	cpi	r24, 0x70	; 112
    2314:	19 f0       	breq	.+6      	; 0x231c <vfprintf+0x24e>
    2316:	88 37       	cpi	r24, 0x78	; 120
    2318:	21 f0       	breq	.+8      	; 0x2322 <vfprintf+0x254>
    231a:	b0 c0       	rjmp	.+352    	; 0x247c <vfprintf+0x3ae>
    231c:	e9 2f       	mov	r30, r25
    231e:	e0 61       	ori	r30, 0x10	; 16
    2320:	be 2e       	mov	r11, r30
    2322:	b4 fe       	sbrs	r11, 4
    2324:	0d c0       	rjmp	.+26     	; 0x2340 <vfprintf+0x272>
    2326:	fb 2d       	mov	r31, r11
    2328:	f4 60       	ori	r31, 0x04	; 4
    232a:	bf 2e       	mov	r11, r31
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <vfprintf+0x272>
    232e:	34 fe       	sbrs	r3, 4
    2330:	0a c0       	rjmp	.+20     	; 0x2346 <vfprintf+0x278>
    2332:	29 2f       	mov	r18, r25
    2334:	26 60       	ori	r18, 0x06	; 6
    2336:	b2 2e       	mov	r11, r18
    2338:	06 c0       	rjmp	.+12     	; 0x2346 <vfprintf+0x278>
    233a:	28 e0       	ldi	r18, 0x08	; 8
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	05 c0       	rjmp	.+10     	; 0x234a <vfprintf+0x27c>
    2340:	20 e1       	ldi	r18, 0x10	; 16
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x27c>
    2346:	20 e1       	ldi	r18, 0x10	; 16
    2348:	32 e0       	ldi	r19, 0x02	; 2
    234a:	f8 01       	movw	r30, r16
    234c:	b7 fe       	sbrs	r11, 7
    234e:	07 c0       	rjmp	.+14     	; 0x235e <vfprintf+0x290>
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	0c 5f       	subi	r16, 0xFC	; 252
    235a:	1f 4f       	sbci	r17, 0xFF	; 255
    235c:	06 c0       	rjmp	.+12     	; 0x236a <vfprintf+0x29c>
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 5f       	subi	r16, 0xFE	; 254
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	a3 01       	movw	r20, r6
    236c:	0e 94 cc 14 	call	0x2998	; 0x2998 <__ultoa_invert>
    2370:	88 2e       	mov	r8, r24
    2372:	86 18       	sub	r8, r6
    2374:	fb 2d       	mov	r31, r11
    2376:	ff 77       	andi	r31, 0x7F	; 127
    2378:	3f 2e       	mov	r3, r31
    237a:	36 fe       	sbrs	r3, 6
    237c:	0d c0       	rjmp	.+26     	; 0x2398 <vfprintf+0x2ca>
    237e:	23 2d       	mov	r18, r3
    2380:	2e 7f       	andi	r18, 0xFE	; 254
    2382:	a2 2e       	mov	r10, r18
    2384:	89 14       	cp	r8, r9
    2386:	58 f4       	brcc	.+22     	; 0x239e <vfprintf+0x2d0>
    2388:	34 fe       	sbrs	r3, 4
    238a:	0b c0       	rjmp	.+22     	; 0x23a2 <vfprintf+0x2d4>
    238c:	32 fc       	sbrc	r3, 2
    238e:	09 c0       	rjmp	.+18     	; 0x23a2 <vfprintf+0x2d4>
    2390:	83 2d       	mov	r24, r3
    2392:	8e 7e       	andi	r24, 0xEE	; 238
    2394:	a8 2e       	mov	r10, r24
    2396:	05 c0       	rjmp	.+10     	; 0x23a2 <vfprintf+0x2d4>
    2398:	b8 2c       	mov	r11, r8
    239a:	a3 2c       	mov	r10, r3
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <vfprintf+0x2d6>
    239e:	b8 2c       	mov	r11, r8
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <vfprintf+0x2d6>
    23a2:	b9 2c       	mov	r11, r9
    23a4:	a4 fe       	sbrs	r10, 4
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <vfprintf+0x2f8>
    23a8:	fe 01       	movw	r30, r28
    23aa:	e8 0d       	add	r30, r8
    23ac:	f1 1d       	adc	r31, r1
    23ae:	80 81       	ld	r24, Z
    23b0:	80 33       	cpi	r24, 0x30	; 48
    23b2:	21 f4       	brne	.+8      	; 0x23bc <vfprintf+0x2ee>
    23b4:	9a 2d       	mov	r25, r10
    23b6:	99 7e       	andi	r25, 0xE9	; 233
    23b8:	a9 2e       	mov	r10, r25
    23ba:	09 c0       	rjmp	.+18     	; 0x23ce <vfprintf+0x300>
    23bc:	a2 fe       	sbrs	r10, 2
    23be:	06 c0       	rjmp	.+12     	; 0x23cc <vfprintf+0x2fe>
    23c0:	b3 94       	inc	r11
    23c2:	b3 94       	inc	r11
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <vfprintf+0x300>
    23c6:	8a 2d       	mov	r24, r10
    23c8:	86 78       	andi	r24, 0x86	; 134
    23ca:	09 f0       	breq	.+2      	; 0x23ce <vfprintf+0x300>
    23cc:	b3 94       	inc	r11
    23ce:	a3 fc       	sbrc	r10, 3
    23d0:	11 c0       	rjmp	.+34     	; 0x23f4 <vfprintf+0x326>
    23d2:	a0 fe       	sbrs	r10, 0
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <vfprintf+0x314>
    23d6:	b2 14       	cp	r11, r2
    23d8:	88 f4       	brcc	.+34     	; 0x23fc <vfprintf+0x32e>
    23da:	28 0c       	add	r2, r8
    23dc:	92 2c       	mov	r9, r2
    23de:	9b 18       	sub	r9, r11
    23e0:	0e c0       	rjmp	.+28     	; 0x23fe <vfprintf+0x330>
    23e2:	b2 14       	cp	r11, r2
    23e4:	60 f4       	brcc	.+24     	; 0x23fe <vfprintf+0x330>
    23e6:	b6 01       	movw	r22, r12
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    23f0:	b3 94       	inc	r11
    23f2:	f7 cf       	rjmp	.-18     	; 0x23e2 <vfprintf+0x314>
    23f4:	b2 14       	cp	r11, r2
    23f6:	18 f4       	brcc	.+6      	; 0x23fe <vfprintf+0x330>
    23f8:	2b 18       	sub	r2, r11
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfprintf+0x332>
    23fc:	98 2c       	mov	r9, r8
    23fe:	21 2c       	mov	r2, r1
    2400:	a4 fe       	sbrs	r10, 4
    2402:	10 c0       	rjmp	.+32     	; 0x2424 <vfprintf+0x356>
    2404:	b6 01       	movw	r22, r12
    2406:	80 e3       	ldi	r24, 0x30	; 48
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    240e:	a2 fe       	sbrs	r10, 2
    2410:	17 c0       	rjmp	.+46     	; 0x2440 <vfprintf+0x372>
    2412:	a1 fc       	sbrc	r10, 1
    2414:	03 c0       	rjmp	.+6      	; 0x241c <vfprintf+0x34e>
    2416:	88 e7       	ldi	r24, 0x78	; 120
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x352>
    241c:	88 e5       	ldi	r24, 0x58	; 88
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	b6 01       	movw	r22, r12
    2422:	0c c0       	rjmp	.+24     	; 0x243c <vfprintf+0x36e>
    2424:	8a 2d       	mov	r24, r10
    2426:	86 78       	andi	r24, 0x86	; 134
    2428:	59 f0       	breq	.+22     	; 0x2440 <vfprintf+0x372>
    242a:	a1 fe       	sbrs	r10, 1
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0x364>
    242e:	8b e2       	ldi	r24, 0x2B	; 43
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <vfprintf+0x366>
    2432:	80 e2       	ldi	r24, 0x20	; 32
    2434:	a7 fc       	sbrc	r10, 7
    2436:	8d e2       	ldi	r24, 0x2D	; 45
    2438:	b6 01       	movw	r22, r12
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    2440:	89 14       	cp	r8, r9
    2442:	38 f4       	brcc	.+14     	; 0x2452 <vfprintf+0x384>
    2444:	b6 01       	movw	r22, r12
    2446:	80 e3       	ldi	r24, 0x30	; 48
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    244e:	9a 94       	dec	r9
    2450:	f7 cf       	rjmp	.-18     	; 0x2440 <vfprintf+0x372>
    2452:	8a 94       	dec	r8
    2454:	f3 01       	movw	r30, r6
    2456:	e8 0d       	add	r30, r8
    2458:	f1 1d       	adc	r31, r1
    245a:	80 81       	ld	r24, Z
    245c:	b6 01       	movw	r22, r12
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    2464:	81 10       	cpse	r8, r1
    2466:	f5 cf       	rjmp	.-22     	; 0x2452 <vfprintf+0x384>
    2468:	22 20       	and	r2, r2
    246a:	09 f4       	brne	.+2      	; 0x246e <vfprintf+0x3a0>
    246c:	42 ce       	rjmp	.-892    	; 0x20f2 <vfprintf+0x24>
    246e:	b6 01       	movw	r22, r12
    2470:	80 e2       	ldi	r24, 0x20	; 32
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 90 14 	call	0x2920	; 0x2920 <fputc>
    2478:	2a 94       	dec	r2
    247a:	f6 cf       	rjmp	.-20     	; 0x2468 <vfprintf+0x39a>
    247c:	f6 01       	movw	r30, r12
    247e:	86 81       	ldd	r24, Z+6	; 0x06
    2480:	97 81       	ldd	r25, Z+7	; 0x07
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <vfprintf+0x3ba>
    2484:	8f ef       	ldi	r24, 0xFF	; 255
    2486:	9f ef       	ldi	r25, 0xFF	; 255
    2488:	2b 96       	adiw	r28, 0x0b	; 11
    248a:	e2 e1       	ldi	r30, 0x12	; 18
    248c:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00002490 <dtoa_prf>:
    2490:	a9 e0       	ldi	r26, 0x09	; 9
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ee e4       	ldi	r30, 0x4E	; 78
    2496:	f2 e1       	ldi	r31, 0x12	; 18
    2498:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__prologue_saves__+0xc>
    249c:	6a 01       	movw	r12, r20
    249e:	12 2f       	mov	r17, r18
    24a0:	b0 2e       	mov	r11, r16
    24a2:	2b e3       	ldi	r18, 0x3B	; 59
    24a4:	20 17       	cp	r18, r16
    24a6:	20 f0       	brcs	.+8      	; 0x24b0 <dtoa_prf+0x20>
    24a8:	ff 24       	eor	r15, r15
    24aa:	f3 94       	inc	r15
    24ac:	f0 0e       	add	r15, r16
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <dtoa_prf+0x24>
    24b0:	2c e3       	ldi	r18, 0x3C	; 60
    24b2:	f2 2e       	mov	r15, r18
    24b4:	0f 2d       	mov	r16, r15
    24b6:	27 e0       	ldi	r18, 0x07	; 7
    24b8:	ae 01       	movw	r20, r28
    24ba:	4f 5f       	subi	r20, 0xFF	; 255
    24bc:	5f 4f       	sbci	r21, 0xFF	; 255
    24be:	0e 94 a2 13 	call	0x2744	; 0x2744 <__ftoa_engine>
    24c2:	bc 01       	movw	r22, r24
    24c4:	49 81       	ldd	r20, Y+1	; 0x01
    24c6:	84 2f       	mov	r24, r20
    24c8:	89 70       	andi	r24, 0x09	; 9
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	31 f0       	breq	.+12     	; 0x24da <dtoa_prf+0x4a>
    24ce:	e1 fc       	sbrc	r14, 1
    24d0:	06 c0       	rjmp	.+12     	; 0x24de <dtoa_prf+0x4e>
    24d2:	e0 fe       	sbrs	r14, 0
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <dtoa_prf+0x52>
    24d6:	90 e2       	ldi	r25, 0x20	; 32
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <dtoa_prf+0x54>
    24da:	9d e2       	ldi	r25, 0x2D	; 45
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <dtoa_prf+0x54>
    24de:	9b e2       	ldi	r25, 0x2B	; 43
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <dtoa_prf+0x54>
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	5e 2d       	mov	r21, r14
    24e6:	50 71       	andi	r21, 0x10	; 16
    24e8:	43 ff       	sbrs	r20, 3
    24ea:	3c c0       	rjmp	.+120    	; 0x2564 <dtoa_prf+0xd4>
    24ec:	91 11       	cpse	r25, r1
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <dtoa_prf+0x64>
    24f0:	83 e0       	ldi	r24, 0x03	; 3
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <dtoa_prf+0x66>
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	81 17       	cp	r24, r17
    24f8:	18 f4       	brcc	.+6      	; 0x2500 <dtoa_prf+0x70>
    24fa:	21 2f       	mov	r18, r17
    24fc:	28 1b       	sub	r18, r24
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <dtoa_prf+0x72>
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	51 11       	cpse	r21, r1
    2504:	0b c0       	rjmp	.+22     	; 0x251c <dtoa_prf+0x8c>
    2506:	f6 01       	movw	r30, r12
    2508:	82 2f       	mov	r24, r18
    250a:	30 e2       	ldi	r19, 0x20	; 32
    250c:	88 23       	and	r24, r24
    250e:	19 f0       	breq	.+6      	; 0x2516 <dtoa_prf+0x86>
    2510:	31 93       	st	Z+, r19
    2512:	81 50       	subi	r24, 0x01	; 1
    2514:	fb cf       	rjmp	.-10     	; 0x250c <dtoa_prf+0x7c>
    2516:	c2 0e       	add	r12, r18
    2518:	d1 1c       	adc	r13, r1
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	99 23       	and	r25, r25
    251e:	29 f0       	breq	.+10     	; 0x252a <dtoa_prf+0x9a>
    2520:	d6 01       	movw	r26, r12
    2522:	9c 93       	st	X, r25
    2524:	f6 01       	movw	r30, r12
    2526:	31 96       	adiw	r30, 0x01	; 1
    2528:	6f 01       	movw	r12, r30
    252a:	c6 01       	movw	r24, r12
    252c:	03 96       	adiw	r24, 0x03	; 3
    252e:	e2 fe       	sbrs	r14, 2
    2530:	0a c0       	rjmp	.+20     	; 0x2546 <dtoa_prf+0xb6>
    2532:	3e e4       	ldi	r19, 0x4E	; 78
    2534:	d6 01       	movw	r26, r12
    2536:	3c 93       	st	X, r19
    2538:	41 e4       	ldi	r20, 0x41	; 65
    253a:	11 96       	adiw	r26, 0x01	; 1
    253c:	4c 93       	st	X, r20
    253e:	11 97       	sbiw	r26, 0x01	; 1
    2540:	12 96       	adiw	r26, 0x02	; 2
    2542:	3c 93       	st	X, r19
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <dtoa_prf+0xc2>
    2546:	3e e6       	ldi	r19, 0x6E	; 110
    2548:	f6 01       	movw	r30, r12
    254a:	30 83       	st	Z, r19
    254c:	41 e6       	ldi	r20, 0x61	; 97
    254e:	41 83       	std	Z+1, r20	; 0x01
    2550:	32 83       	std	Z+2, r19	; 0x02
    2552:	fc 01       	movw	r30, r24
    2554:	32 2f       	mov	r19, r18
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	33 23       	and	r19, r19
    255a:	09 f4       	brne	.+2      	; 0x255e <dtoa_prf+0xce>
    255c:	42 c0       	rjmp	.+132    	; 0x25e2 <dtoa_prf+0x152>
    255e:	41 93       	st	Z+, r20
    2560:	31 50       	subi	r19, 0x01	; 1
    2562:	fa cf       	rjmp	.-12     	; 0x2558 <dtoa_prf+0xc8>
    2564:	42 ff       	sbrs	r20, 2
    2566:	44 c0       	rjmp	.+136    	; 0x25f0 <dtoa_prf+0x160>
    2568:	91 11       	cpse	r25, r1
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <dtoa_prf+0xe0>
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <dtoa_prf+0xe2>
    2570:	84 e0       	ldi	r24, 0x04	; 4
    2572:	81 17       	cp	r24, r17
    2574:	18 f4       	brcc	.+6      	; 0x257c <dtoa_prf+0xec>
    2576:	21 2f       	mov	r18, r17
    2578:	28 1b       	sub	r18, r24
    257a:	01 c0       	rjmp	.+2      	; 0x257e <dtoa_prf+0xee>
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	51 11       	cpse	r21, r1
    2580:	0b c0       	rjmp	.+22     	; 0x2598 <dtoa_prf+0x108>
    2582:	f6 01       	movw	r30, r12
    2584:	82 2f       	mov	r24, r18
    2586:	30 e2       	ldi	r19, 0x20	; 32
    2588:	88 23       	and	r24, r24
    258a:	19 f0       	breq	.+6      	; 0x2592 <dtoa_prf+0x102>
    258c:	31 93       	st	Z+, r19
    258e:	81 50       	subi	r24, 0x01	; 1
    2590:	fb cf       	rjmp	.-10     	; 0x2588 <dtoa_prf+0xf8>
    2592:	c2 0e       	add	r12, r18
    2594:	d1 1c       	adc	r13, r1
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	99 23       	and	r25, r25
    259a:	29 f0       	breq	.+10     	; 0x25a6 <dtoa_prf+0x116>
    259c:	d6 01       	movw	r26, r12
    259e:	9c 93       	st	X, r25
    25a0:	f6 01       	movw	r30, r12
    25a2:	31 96       	adiw	r30, 0x01	; 1
    25a4:	6f 01       	movw	r12, r30
    25a6:	c6 01       	movw	r24, r12
    25a8:	03 96       	adiw	r24, 0x03	; 3
    25aa:	e2 fe       	sbrs	r14, 2
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <dtoa_prf+0x134>
    25ae:	39 e4       	ldi	r19, 0x49	; 73
    25b0:	d6 01       	movw	r26, r12
    25b2:	3c 93       	st	X, r19
    25b4:	3e e4       	ldi	r19, 0x4E	; 78
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	3c 93       	st	X, r19
    25ba:	11 97       	sbiw	r26, 0x01	; 1
    25bc:	36 e4       	ldi	r19, 0x46	; 70
    25be:	12 96       	adiw	r26, 0x02	; 2
    25c0:	3c 93       	st	X, r19
    25c2:	07 c0       	rjmp	.+14     	; 0x25d2 <dtoa_prf+0x142>
    25c4:	39 e6       	ldi	r19, 0x69	; 105
    25c6:	f6 01       	movw	r30, r12
    25c8:	30 83       	st	Z, r19
    25ca:	3e e6       	ldi	r19, 0x6E	; 110
    25cc:	31 83       	std	Z+1, r19	; 0x01
    25ce:	36 e6       	ldi	r19, 0x66	; 102
    25d0:	32 83       	std	Z+2, r19	; 0x02
    25d2:	fc 01       	movw	r30, r24
    25d4:	32 2f       	mov	r19, r18
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	33 23       	and	r19, r19
    25da:	19 f0       	breq	.+6      	; 0x25e2 <dtoa_prf+0x152>
    25dc:	41 93       	st	Z+, r20
    25de:	31 50       	subi	r19, 0x01	; 1
    25e0:	fb cf       	rjmp	.-10     	; 0x25d8 <dtoa_prf+0x148>
    25e2:	fc 01       	movw	r30, r24
    25e4:	e2 0f       	add	r30, r18
    25e6:	f1 1d       	adc	r31, r1
    25e8:	10 82       	st	Z, r1
    25ea:	8e ef       	ldi	r24, 0xFE	; 254
    25ec:	9f ef       	ldi	r25, 0xFF	; 255
    25ee:	a6 c0       	rjmp	.+332    	; 0x273c <dtoa_prf+0x2ac>
    25f0:	21 e0       	ldi	r18, 0x01	; 1
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	91 11       	cpse	r25, r1
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <dtoa_prf+0x16c>
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	16 16       	cp	r1, r22
    25fe:	17 06       	cpc	r1, r23
    2600:	1c f4       	brge	.+6      	; 0x2608 <dtoa_prf+0x178>
    2602:	fb 01       	movw	r30, r22
    2604:	31 96       	adiw	r30, 0x01	; 1
    2606:	02 c0       	rjmp	.+4      	; 0x260c <dtoa_prf+0x17c>
    2608:	e1 e0       	ldi	r30, 0x01	; 1
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	2e 0f       	add	r18, r30
    260e:	3f 1f       	adc	r19, r31
    2610:	bb 20       	and	r11, r11
    2612:	21 f0       	breq	.+8      	; 0x261c <dtoa_prf+0x18c>
    2614:	eb 2d       	mov	r30, r11
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <dtoa_prf+0x190>
    261c:	e0 e0       	ldi	r30, 0x00	; 0
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	2e 0f       	add	r18, r30
    2622:	3f 1f       	adc	r19, r31
    2624:	e1 2f       	mov	r30, r17
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	2e 17       	cp	r18, r30
    262a:	3f 07       	cpc	r19, r31
    262c:	1c f4       	brge	.+6      	; 0x2634 <dtoa_prf+0x1a4>
    262e:	12 1b       	sub	r17, r18
    2630:	21 2f       	mov	r18, r17
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <dtoa_prf+0x1a6>
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	8e 2d       	mov	r24, r14
    2638:	88 71       	andi	r24, 0x18	; 24
    263a:	59 f4       	brne	.+22     	; 0x2652 <dtoa_prf+0x1c2>
    263c:	f6 01       	movw	r30, r12
    263e:	82 2f       	mov	r24, r18
    2640:	30 e2       	ldi	r19, 0x20	; 32
    2642:	88 23       	and	r24, r24
    2644:	19 f0       	breq	.+6      	; 0x264c <dtoa_prf+0x1bc>
    2646:	31 93       	st	Z+, r19
    2648:	81 50       	subi	r24, 0x01	; 1
    264a:	fb cf       	rjmp	.-10     	; 0x2642 <dtoa_prf+0x1b2>
    264c:	c2 0e       	add	r12, r18
    264e:	d1 1c       	adc	r13, r1
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	99 23       	and	r25, r25
    2654:	29 f0       	breq	.+10     	; 0x2660 <dtoa_prf+0x1d0>
    2656:	d6 01       	movw	r26, r12
    2658:	9c 93       	st	X, r25
    265a:	f6 01       	movw	r30, r12
    265c:	31 96       	adiw	r30, 0x01	; 1
    265e:	6f 01       	movw	r12, r30
    2660:	51 11       	cpse	r21, r1
    2662:	0b c0       	rjmp	.+22     	; 0x267a <dtoa_prf+0x1ea>
    2664:	f6 01       	movw	r30, r12
    2666:	82 2f       	mov	r24, r18
    2668:	90 e3       	ldi	r25, 0x30	; 48
    266a:	88 23       	and	r24, r24
    266c:	19 f0       	breq	.+6      	; 0x2674 <dtoa_prf+0x1e4>
    266e:	91 93       	st	Z+, r25
    2670:	81 50       	subi	r24, 0x01	; 1
    2672:	fb cf       	rjmp	.-10     	; 0x266a <dtoa_prf+0x1da>
    2674:	c2 0e       	add	r12, r18
    2676:	d1 1c       	adc	r13, r1
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	0f 2d       	mov	r16, r15
    267c:	06 0f       	add	r16, r22
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	34 2f       	mov	r19, r20
    2682:	30 71       	andi	r19, 0x10	; 16
    2684:	44 ff       	sbrs	r20, 4
    2686:	03 c0       	rjmp	.+6      	; 0x268e <dtoa_prf+0x1fe>
    2688:	91 33       	cpi	r25, 0x31	; 49
    268a:	09 f4       	brne	.+2      	; 0x268e <dtoa_prf+0x1fe>
    268c:	01 50       	subi	r16, 0x01	; 1
    268e:	10 16       	cp	r1, r16
    2690:	24 f4       	brge	.+8      	; 0x269a <dtoa_prf+0x20a>
    2692:	09 30       	cpi	r16, 0x09	; 9
    2694:	18 f0       	brcs	.+6      	; 0x269c <dtoa_prf+0x20c>
    2696:	08 e0       	ldi	r16, 0x08	; 8
    2698:	01 c0       	rjmp	.+2      	; 0x269c <dtoa_prf+0x20c>
    269a:	01 e0       	ldi	r16, 0x01	; 1
    269c:	ab 01       	movw	r20, r22
    269e:	77 ff       	sbrs	r23, 7
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <dtoa_prf+0x216>
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	fb 01       	movw	r30, r22
    26a8:	e4 1b       	sub	r30, r20
    26aa:	f5 0b       	sbc	r31, r21
    26ac:	a1 e0       	ldi	r26, 0x01	; 1
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	ac 0f       	add	r26, r28
    26b2:	bd 1f       	adc	r27, r29
    26b4:	ea 0f       	add	r30, r26
    26b6:	fb 1f       	adc	r31, r27
    26b8:	8e e2       	ldi	r24, 0x2E	; 46
    26ba:	a8 2e       	mov	r10, r24
    26bc:	4b 01       	movw	r8, r22
    26be:	80 1a       	sub	r8, r16
    26c0:	91 08       	sbc	r9, r1
    26c2:	0b 2d       	mov	r16, r11
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	11 95       	neg	r17
    26c8:	01 95       	neg	r16
    26ca:	11 09       	sbc	r17, r1
    26cc:	4f 3f       	cpi	r20, 0xFF	; 255
    26ce:	bf ef       	ldi	r27, 0xFF	; 255
    26d0:	5b 07       	cpc	r21, r27
    26d2:	21 f4       	brne	.+8      	; 0x26dc <dtoa_prf+0x24c>
    26d4:	d6 01       	movw	r26, r12
    26d6:	ac 92       	st	X, r10
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	6d 01       	movw	r12, r26
    26dc:	64 17       	cp	r22, r20
    26de:	75 07       	cpc	r23, r21
    26e0:	2c f0       	brlt	.+10     	; 0x26ec <dtoa_prf+0x25c>
    26e2:	84 16       	cp	r8, r20
    26e4:	95 06       	cpc	r9, r21
    26e6:	14 f4       	brge	.+4      	; 0x26ec <dtoa_prf+0x25c>
    26e8:	81 81       	ldd	r24, Z+1	; 0x01
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <dtoa_prf+0x25e>
    26ec:	80 e3       	ldi	r24, 0x30	; 48
    26ee:	41 50       	subi	r20, 0x01	; 1
    26f0:	51 09       	sbc	r21, r1
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	d6 01       	movw	r26, r12
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	7d 01       	movw	r14, r26
    26fa:	40 17       	cp	r20, r16
    26fc:	51 07       	cpc	r21, r17
    26fe:	24 f0       	brlt	.+8      	; 0x2708 <dtoa_prf+0x278>
    2700:	d6 01       	movw	r26, r12
    2702:	8c 93       	st	X, r24
    2704:	67 01       	movw	r12, r14
    2706:	e2 cf       	rjmp	.-60     	; 0x26cc <dtoa_prf+0x23c>
    2708:	64 17       	cp	r22, r20
    270a:	75 07       	cpc	r23, r21
    270c:	39 f4       	brne	.+14     	; 0x271c <dtoa_prf+0x28c>
    270e:	96 33       	cpi	r25, 0x36	; 54
    2710:	20 f4       	brcc	.+8      	; 0x271a <dtoa_prf+0x28a>
    2712:	95 33       	cpi	r25, 0x35	; 53
    2714:	19 f4       	brne	.+6      	; 0x271c <dtoa_prf+0x28c>
    2716:	31 11       	cpse	r19, r1
    2718:	01 c0       	rjmp	.+2      	; 0x271c <dtoa_prf+0x28c>
    271a:	81 e3       	ldi	r24, 0x31	; 49
    271c:	f6 01       	movw	r30, r12
    271e:	80 83       	st	Z, r24
    2720:	f7 01       	movw	r30, r14
    2722:	82 2f       	mov	r24, r18
    2724:	90 e2       	ldi	r25, 0x20	; 32
    2726:	88 23       	and	r24, r24
    2728:	19 f0       	breq	.+6      	; 0x2730 <dtoa_prf+0x2a0>
    272a:	91 93       	st	Z+, r25
    272c:	81 50       	subi	r24, 0x01	; 1
    272e:	fb cf       	rjmp	.-10     	; 0x2726 <dtoa_prf+0x296>
    2730:	f7 01       	movw	r30, r14
    2732:	e2 0f       	add	r30, r18
    2734:	f1 1d       	adc	r31, r1
    2736:	10 82       	st	Z, r1
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	29 96       	adiw	r28, 0x09	; 9
    273e:	ec e0       	ldi	r30, 0x0C	; 12
    2740:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__epilogue_restores__+0xc>

00002744 <__ftoa_engine>:
    2744:	28 30       	cpi	r18, 0x08	; 8
    2746:	08 f0       	brcs	.+2      	; 0x274a <__ftoa_engine+0x6>
    2748:	27 e0       	ldi	r18, 0x07	; 7
    274a:	33 27       	eor	r19, r19
    274c:	da 01       	movw	r26, r20
    274e:	99 0f       	add	r25, r25
    2750:	31 1d       	adc	r19, r1
    2752:	87 fd       	sbrc	r24, 7
    2754:	91 60       	ori	r25, 0x01	; 1
    2756:	00 96       	adiw	r24, 0x00	; 0
    2758:	61 05       	cpc	r22, r1
    275a:	71 05       	cpc	r23, r1
    275c:	39 f4       	brne	.+14     	; 0x276c <__ftoa_engine+0x28>
    275e:	32 60       	ori	r19, 0x02	; 2
    2760:	2e 5f       	subi	r18, 0xFE	; 254
    2762:	3d 93       	st	X+, r19
    2764:	30 e3       	ldi	r19, 0x30	; 48
    2766:	2a 95       	dec	r18
    2768:	e1 f7       	brne	.-8      	; 0x2762 <__ftoa_engine+0x1e>
    276a:	08 95       	ret
    276c:	9f 3f       	cpi	r25, 0xFF	; 255
    276e:	30 f0       	brcs	.+12     	; 0x277c <__ftoa_engine+0x38>
    2770:	80 38       	cpi	r24, 0x80	; 128
    2772:	71 05       	cpc	r23, r1
    2774:	61 05       	cpc	r22, r1
    2776:	09 f0       	breq	.+2      	; 0x277a <__ftoa_engine+0x36>
    2778:	3c 5f       	subi	r19, 0xFC	; 252
    277a:	3c 5f       	subi	r19, 0xFC	; 252
    277c:	3d 93       	st	X+, r19
    277e:	91 30       	cpi	r25, 0x01	; 1
    2780:	08 f0       	brcs	.+2      	; 0x2784 <__ftoa_engine+0x40>
    2782:	80 68       	ori	r24, 0x80	; 128
    2784:	91 1d       	adc	r25, r1
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	1f 93       	push	r17
    278c:	0f 93       	push	r16
    278e:	ff 92       	push	r15
    2790:	ef 92       	push	r14
    2792:	19 2f       	mov	r17, r25
    2794:	98 7f       	andi	r25, 0xF8	; 248
    2796:	96 95       	lsr	r25
    2798:	e9 2f       	mov	r30, r25
    279a:	96 95       	lsr	r25
    279c:	96 95       	lsr	r25
    279e:	e9 0f       	add	r30, r25
    27a0:	ff 27       	eor	r31, r31
    27a2:	e2 5b       	subi	r30, 0xB2	; 178
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	99 27       	eor	r25, r25
    27a8:	33 27       	eor	r19, r19
    27aa:	ee 24       	eor	r14, r14
    27ac:	ff 24       	eor	r15, r15
    27ae:	a7 01       	movw	r20, r14
    27b0:	e7 01       	movw	r28, r14
    27b2:	05 90       	lpm	r0, Z+
    27b4:	08 94       	sec
    27b6:	07 94       	ror	r0
    27b8:	28 f4       	brcc	.+10     	; 0x27c4 <__ftoa_engine+0x80>
    27ba:	36 0f       	add	r19, r22
    27bc:	e7 1e       	adc	r14, r23
    27be:	f8 1e       	adc	r15, r24
    27c0:	49 1f       	adc	r20, r25
    27c2:	51 1d       	adc	r21, r1
    27c4:	66 0f       	add	r22, r22
    27c6:	77 1f       	adc	r23, r23
    27c8:	88 1f       	adc	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	06 94       	lsr	r0
    27ce:	a1 f7       	brne	.-24     	; 0x27b8 <__ftoa_engine+0x74>
    27d0:	05 90       	lpm	r0, Z+
    27d2:	07 94       	ror	r0
    27d4:	28 f4       	brcc	.+10     	; 0x27e0 <__ftoa_engine+0x9c>
    27d6:	e7 0e       	add	r14, r23
    27d8:	f8 1e       	adc	r15, r24
    27da:	49 1f       	adc	r20, r25
    27dc:	56 1f       	adc	r21, r22
    27de:	c1 1d       	adc	r28, r1
    27e0:	77 0f       	add	r23, r23
    27e2:	88 1f       	adc	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	66 1f       	adc	r22, r22
    27e8:	06 94       	lsr	r0
    27ea:	a1 f7       	brne	.-24     	; 0x27d4 <__ftoa_engine+0x90>
    27ec:	05 90       	lpm	r0, Z+
    27ee:	07 94       	ror	r0
    27f0:	28 f4       	brcc	.+10     	; 0x27fc <__ftoa_engine+0xb8>
    27f2:	f8 0e       	add	r15, r24
    27f4:	49 1f       	adc	r20, r25
    27f6:	56 1f       	adc	r21, r22
    27f8:	c7 1f       	adc	r28, r23
    27fa:	d1 1d       	adc	r29, r1
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	66 1f       	adc	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	06 94       	lsr	r0
    2806:	a1 f7       	brne	.-24     	; 0x27f0 <__ftoa_engine+0xac>
    2808:	05 90       	lpm	r0, Z+
    280a:	07 94       	ror	r0
    280c:	20 f4       	brcc	.+8      	; 0x2816 <__ftoa_engine+0xd2>
    280e:	49 0f       	add	r20, r25
    2810:	56 1f       	adc	r21, r22
    2812:	c7 1f       	adc	r28, r23
    2814:	d8 1f       	adc	r29, r24
    2816:	99 0f       	add	r25, r25
    2818:	66 1f       	adc	r22, r22
    281a:	77 1f       	adc	r23, r23
    281c:	88 1f       	adc	r24, r24
    281e:	06 94       	lsr	r0
    2820:	a9 f7       	brne	.-22     	; 0x280c <__ftoa_engine+0xc8>
    2822:	84 91       	lpm	r24, Z
    2824:	10 95       	com	r17
    2826:	17 70       	andi	r17, 0x07	; 7
    2828:	41 f0       	breq	.+16     	; 0x283a <__ftoa_engine+0xf6>
    282a:	d6 95       	lsr	r29
    282c:	c7 95       	ror	r28
    282e:	57 95       	ror	r21
    2830:	47 95       	ror	r20
    2832:	f7 94       	ror	r15
    2834:	e7 94       	ror	r14
    2836:	1a 95       	dec	r17
    2838:	c1 f7       	brne	.-16     	; 0x282a <__ftoa_engine+0xe6>
    283a:	e4 ef       	ldi	r30, 0xF4	; 244
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	68 94       	set
    2840:	15 90       	lpm	r1, Z+
    2842:	15 91       	lpm	r17, Z+
    2844:	35 91       	lpm	r19, Z+
    2846:	65 91       	lpm	r22, Z+
    2848:	95 91       	lpm	r25, Z+
    284a:	05 90       	lpm	r0, Z+
    284c:	7f e2       	ldi	r23, 0x2F	; 47
    284e:	73 95       	inc	r23
    2850:	e1 18       	sub	r14, r1
    2852:	f1 0a       	sbc	r15, r17
    2854:	43 0b       	sbc	r20, r19
    2856:	56 0b       	sbc	r21, r22
    2858:	c9 0b       	sbc	r28, r25
    285a:	d0 09       	sbc	r29, r0
    285c:	c0 f7       	brcc	.-16     	; 0x284e <__ftoa_engine+0x10a>
    285e:	e1 0c       	add	r14, r1
    2860:	f1 1e       	adc	r15, r17
    2862:	43 1f       	adc	r20, r19
    2864:	56 1f       	adc	r21, r22
    2866:	c9 1f       	adc	r28, r25
    2868:	d0 1d       	adc	r29, r0
    286a:	7e f4       	brtc	.+30     	; 0x288a <__ftoa_engine+0x146>
    286c:	70 33       	cpi	r23, 0x30	; 48
    286e:	11 f4       	brne	.+4      	; 0x2874 <__ftoa_engine+0x130>
    2870:	8a 95       	dec	r24
    2872:	e6 cf       	rjmp	.-52     	; 0x2840 <__ftoa_engine+0xfc>
    2874:	e8 94       	clt
    2876:	01 50       	subi	r16, 0x01	; 1
    2878:	30 f0       	brcs	.+12     	; 0x2886 <__ftoa_engine+0x142>
    287a:	08 0f       	add	r16, r24
    287c:	0a f4       	brpl	.+2      	; 0x2880 <__ftoa_engine+0x13c>
    287e:	00 27       	eor	r16, r16
    2880:	02 17       	cp	r16, r18
    2882:	08 f4       	brcc	.+2      	; 0x2886 <__ftoa_engine+0x142>
    2884:	20 2f       	mov	r18, r16
    2886:	23 95       	inc	r18
    2888:	02 2f       	mov	r16, r18
    288a:	7a 33       	cpi	r23, 0x3A	; 58
    288c:	28 f0       	brcs	.+10     	; 0x2898 <__ftoa_engine+0x154>
    288e:	79 e3       	ldi	r23, 0x39	; 57
    2890:	7d 93       	st	X+, r23
    2892:	2a 95       	dec	r18
    2894:	e9 f7       	brne	.-6      	; 0x2890 <__ftoa_engine+0x14c>
    2896:	10 c0       	rjmp	.+32     	; 0x28b8 <__ftoa_engine+0x174>
    2898:	7d 93       	st	X+, r23
    289a:	2a 95       	dec	r18
    289c:	89 f6       	brne	.-94     	; 0x2840 <__ftoa_engine+0xfc>
    289e:	06 94       	lsr	r0
    28a0:	97 95       	ror	r25
    28a2:	67 95       	ror	r22
    28a4:	37 95       	ror	r19
    28a6:	17 95       	ror	r17
    28a8:	17 94       	ror	r1
    28aa:	e1 18       	sub	r14, r1
    28ac:	f1 0a       	sbc	r15, r17
    28ae:	43 0b       	sbc	r20, r19
    28b0:	56 0b       	sbc	r21, r22
    28b2:	c9 0b       	sbc	r28, r25
    28b4:	d0 09       	sbc	r29, r0
    28b6:	98 f0       	brcs	.+38     	; 0x28de <__ftoa_engine+0x19a>
    28b8:	23 95       	inc	r18
    28ba:	7e 91       	ld	r23, -X
    28bc:	73 95       	inc	r23
    28be:	7a 33       	cpi	r23, 0x3A	; 58
    28c0:	08 f0       	brcs	.+2      	; 0x28c4 <__ftoa_engine+0x180>
    28c2:	70 e3       	ldi	r23, 0x30	; 48
    28c4:	7c 93       	st	X, r23
    28c6:	20 13       	cpse	r18, r16
    28c8:	b8 f7       	brcc	.-18     	; 0x28b8 <__ftoa_engine+0x174>
    28ca:	7e 91       	ld	r23, -X
    28cc:	70 61       	ori	r23, 0x10	; 16
    28ce:	7d 93       	st	X+, r23
    28d0:	30 f0       	brcs	.+12     	; 0x28de <__ftoa_engine+0x19a>
    28d2:	83 95       	inc	r24
    28d4:	71 e3       	ldi	r23, 0x31	; 49
    28d6:	7d 93       	st	X+, r23
    28d8:	70 e3       	ldi	r23, 0x30	; 48
    28da:	2a 95       	dec	r18
    28dc:	e1 f7       	brne	.-8      	; 0x28d6 <__ftoa_engine+0x192>
    28de:	11 24       	eor	r1, r1
    28e0:	ef 90       	pop	r14
    28e2:	ff 90       	pop	r15
    28e4:	0f 91       	pop	r16
    28e6:	1f 91       	pop	r17
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	99 27       	eor	r25, r25
    28ee:	87 fd       	sbrc	r24, 7
    28f0:	90 95       	com	r25
    28f2:	08 95       	ret

000028f4 <strnlen_P>:
    28f4:	fc 01       	movw	r30, r24
    28f6:	05 90       	lpm	r0, Z+
    28f8:	61 50       	subi	r22, 0x01	; 1
    28fa:	70 40       	sbci	r23, 0x00	; 0
    28fc:	01 10       	cpse	r0, r1
    28fe:	d8 f7       	brcc	.-10     	; 0x28f6 <strnlen_P+0x2>
    2900:	80 95       	com	r24
    2902:	90 95       	com	r25
    2904:	8e 0f       	add	r24, r30
    2906:	9f 1f       	adc	r25, r31
    2908:	08 95       	ret

0000290a <strnlen>:
    290a:	fc 01       	movw	r30, r24
    290c:	61 50       	subi	r22, 0x01	; 1
    290e:	70 40       	sbci	r23, 0x00	; 0
    2910:	01 90       	ld	r0, Z+
    2912:	01 10       	cpse	r0, r1
    2914:	d8 f7       	brcc	.-10     	; 0x290c <strnlen+0x2>
    2916:	80 95       	com	r24
    2918:	90 95       	com	r25
    291a:	8e 0f       	add	r24, r30
    291c:	9f 1f       	adc	r25, r31
    291e:	08 95       	ret

00002920 <fputc>:
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	fb 01       	movw	r30, r22
    292a:	23 81       	ldd	r18, Z+3	; 0x03
    292c:	21 fd       	sbrc	r18, 1
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <fputc+0x16>
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	9f ef       	ldi	r25, 0xFF	; 255
    2934:	2c c0       	rjmp	.+88     	; 0x298e <fputc+0x6e>
    2936:	22 ff       	sbrs	r18, 2
    2938:	16 c0       	rjmp	.+44     	; 0x2966 <fputc+0x46>
    293a:	46 81       	ldd	r20, Z+6	; 0x06
    293c:	57 81       	ldd	r21, Z+7	; 0x07
    293e:	24 81       	ldd	r18, Z+4	; 0x04
    2940:	35 81       	ldd	r19, Z+5	; 0x05
    2942:	42 17       	cp	r20, r18
    2944:	53 07       	cpc	r21, r19
    2946:	44 f4       	brge	.+16     	; 0x2958 <fputc+0x38>
    2948:	a0 81       	ld	r26, Z
    294a:	b1 81       	ldd	r27, Z+1	; 0x01
    294c:	9d 01       	movw	r18, r26
    294e:	2f 5f       	subi	r18, 0xFF	; 255
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
    2952:	31 83       	std	Z+1, r19	; 0x01
    2954:	20 83       	st	Z, r18
    2956:	8c 93       	st	X, r24
    2958:	26 81       	ldd	r18, Z+6	; 0x06
    295a:	37 81       	ldd	r19, Z+7	; 0x07
    295c:	2f 5f       	subi	r18, 0xFF	; 255
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	37 83       	std	Z+7, r19	; 0x07
    2962:	26 83       	std	Z+6, r18	; 0x06
    2964:	14 c0       	rjmp	.+40     	; 0x298e <fputc+0x6e>
    2966:	8b 01       	movw	r16, r22
    2968:	ec 01       	movw	r28, r24
    296a:	fb 01       	movw	r30, r22
    296c:	00 84       	ldd	r0, Z+8	; 0x08
    296e:	f1 85       	ldd	r31, Z+9	; 0x09
    2970:	e0 2d       	mov	r30, r0
    2972:	09 95       	icall
    2974:	89 2b       	or	r24, r25
    2976:	e1 f6       	brne	.-72     	; 0x2930 <fputc+0x10>
    2978:	d8 01       	movw	r26, r16
    297a:	16 96       	adiw	r26, 0x06	; 6
    297c:	8d 91       	ld	r24, X+
    297e:	9c 91       	ld	r25, X
    2980:	17 97       	sbiw	r26, 0x07	; 7
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	17 96       	adiw	r26, 0x07	; 7
    2986:	9c 93       	st	X, r25
    2988:	8e 93       	st	-X, r24
    298a:	16 97       	sbiw	r26, 0x06	; 6
    298c:	ce 01       	movw	r24, r28
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	08 95       	ret

00002998 <__ultoa_invert>:
    2998:	fa 01       	movw	r30, r20
    299a:	aa 27       	eor	r26, r26
    299c:	28 30       	cpi	r18, 0x08	; 8
    299e:	51 f1       	breq	.+84     	; 0x29f4 <__ultoa_invert+0x5c>
    29a0:	20 31       	cpi	r18, 0x10	; 16
    29a2:	81 f1       	breq	.+96     	; 0x2a04 <__ultoa_invert+0x6c>
    29a4:	e8 94       	clt
    29a6:	6f 93       	push	r22
    29a8:	6e 7f       	andi	r22, 0xFE	; 254
    29aa:	6e 5f       	subi	r22, 0xFE	; 254
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	8f 4f       	sbci	r24, 0xFF	; 255
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	af 4f       	sbci	r26, 0xFF	; 255
    29b4:	b1 e0       	ldi	r27, 0x01	; 1
    29b6:	3e d0       	rcall	.+124    	; 0x2a34 <__ultoa_invert+0x9c>
    29b8:	b4 e0       	ldi	r27, 0x04	; 4
    29ba:	3c d0       	rcall	.+120    	; 0x2a34 <__ultoa_invert+0x9c>
    29bc:	67 0f       	add	r22, r23
    29be:	78 1f       	adc	r23, r24
    29c0:	89 1f       	adc	r24, r25
    29c2:	9a 1f       	adc	r25, r26
    29c4:	a1 1d       	adc	r26, r1
    29c6:	68 0f       	add	r22, r24
    29c8:	79 1f       	adc	r23, r25
    29ca:	8a 1f       	adc	r24, r26
    29cc:	91 1d       	adc	r25, r1
    29ce:	a1 1d       	adc	r26, r1
    29d0:	6a 0f       	add	r22, r26
    29d2:	71 1d       	adc	r23, r1
    29d4:	81 1d       	adc	r24, r1
    29d6:	91 1d       	adc	r25, r1
    29d8:	a1 1d       	adc	r26, r1
    29da:	20 d0       	rcall	.+64     	; 0x2a1c <__ultoa_invert+0x84>
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <__ultoa_invert+0x48>
    29de:	68 94       	set
    29e0:	3f 91       	pop	r19
    29e2:	2a e0       	ldi	r18, 0x0A	; 10
    29e4:	26 9f       	mul	r18, r22
    29e6:	11 24       	eor	r1, r1
    29e8:	30 19       	sub	r19, r0
    29ea:	30 5d       	subi	r19, 0xD0	; 208
    29ec:	31 93       	st	Z+, r19
    29ee:	de f6       	brtc	.-74     	; 0x29a6 <__ultoa_invert+0xe>
    29f0:	cf 01       	movw	r24, r30
    29f2:	08 95       	ret
    29f4:	46 2f       	mov	r20, r22
    29f6:	47 70       	andi	r20, 0x07	; 7
    29f8:	40 5d       	subi	r20, 0xD0	; 208
    29fa:	41 93       	st	Z+, r20
    29fc:	b3 e0       	ldi	r27, 0x03	; 3
    29fe:	0f d0       	rcall	.+30     	; 0x2a1e <__ultoa_invert+0x86>
    2a00:	c9 f7       	brne	.-14     	; 0x29f4 <__ultoa_invert+0x5c>
    2a02:	f6 cf       	rjmp	.-20     	; 0x29f0 <__ultoa_invert+0x58>
    2a04:	46 2f       	mov	r20, r22
    2a06:	4f 70       	andi	r20, 0x0F	; 15
    2a08:	40 5d       	subi	r20, 0xD0	; 208
    2a0a:	4a 33       	cpi	r20, 0x3A	; 58
    2a0c:	18 f0       	brcs	.+6      	; 0x2a14 <__ultoa_invert+0x7c>
    2a0e:	49 5d       	subi	r20, 0xD9	; 217
    2a10:	31 fd       	sbrc	r19, 1
    2a12:	40 52       	subi	r20, 0x20	; 32
    2a14:	41 93       	st	Z+, r20
    2a16:	02 d0       	rcall	.+4      	; 0x2a1c <__ultoa_invert+0x84>
    2a18:	a9 f7       	brne	.-22     	; 0x2a04 <__ultoa_invert+0x6c>
    2a1a:	ea cf       	rjmp	.-44     	; 0x29f0 <__ultoa_invert+0x58>
    2a1c:	b4 e0       	ldi	r27, 0x04	; 4
    2a1e:	a6 95       	lsr	r26
    2a20:	97 95       	ror	r25
    2a22:	87 95       	ror	r24
    2a24:	77 95       	ror	r23
    2a26:	67 95       	ror	r22
    2a28:	ba 95       	dec	r27
    2a2a:	c9 f7       	brne	.-14     	; 0x2a1e <__ultoa_invert+0x86>
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	61 05       	cpc	r22, r1
    2a30:	71 05       	cpc	r23, r1
    2a32:	08 95       	ret
    2a34:	9b 01       	movw	r18, r22
    2a36:	ac 01       	movw	r20, r24
    2a38:	0a 2e       	mov	r0, r26
    2a3a:	06 94       	lsr	r0
    2a3c:	57 95       	ror	r21
    2a3e:	47 95       	ror	r20
    2a40:	37 95       	ror	r19
    2a42:	27 95       	ror	r18
    2a44:	ba 95       	dec	r27
    2a46:	c9 f7       	brne	.-14     	; 0x2a3a <__ultoa_invert+0xa2>
    2a48:	62 0f       	add	r22, r18
    2a4a:	73 1f       	adc	r23, r19
    2a4c:	84 1f       	adc	r24, r20
    2a4e:	95 1f       	adc	r25, r21
    2a50:	a0 1d       	adc	r26, r0
    2a52:	08 95       	ret

00002a54 <eeprom_read_block>:
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22

00002a58 <eeprom_read_blraw>:
    2a58:	fc 01       	movw	r30, r24
    2a5a:	f9 99       	sbic	0x1f, 1	; 31
    2a5c:	fe cf       	rjmp	.-4      	; 0x2a5a <eeprom_read_blraw+0x2>
    2a5e:	06 c0       	rjmp	.+12     	; 0x2a6c <eeprom_read_blraw+0x14>
    2a60:	f2 bd       	out	0x22, r31	; 34
    2a62:	e1 bd       	out	0x21, r30	; 33
    2a64:	f8 9a       	sbi	0x1f, 0	; 31
    2a66:	31 96       	adiw	r30, 0x01	; 1
    2a68:	00 b4       	in	r0, 0x20	; 32
    2a6a:	0d 92       	st	X+, r0
    2a6c:	41 50       	subi	r20, 0x01	; 1
    2a6e:	50 40       	sbci	r21, 0x00	; 0
    2a70:	b8 f7       	brcc	.-18     	; 0x2a60 <eeprom_read_blraw+0x8>
    2a72:	08 95       	ret

00002a74 <eeprom_read_byte>:
    2a74:	f9 99       	sbic	0x1f, 1	; 31
    2a76:	fe cf       	rjmp	.-4      	; 0x2a74 <eeprom_read_byte>
    2a78:	92 bd       	out	0x22, r25	; 34
    2a7a:	81 bd       	out	0x21, r24	; 33
    2a7c:	f8 9a       	sbi	0x1f, 0	; 31
    2a7e:	99 27       	eor	r25, r25
    2a80:	80 b5       	in	r24, 0x20	; 32
    2a82:	08 95       	ret

00002a84 <eeprom_read_word>:
    2a84:	a8 e1       	ldi	r26, 0x18	; 24
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	42 e0       	ldi	r20, 0x02	; 2
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <eeprom_read_blraw>

00002a90 <eeprom_update_byte>:
    2a90:	26 2f       	mov	r18, r22

00002a92 <eeprom_update_r18>:
    2a92:	f9 99       	sbic	0x1f, 1	; 31
    2a94:	fe cf       	rjmp	.-4      	; 0x2a92 <eeprom_update_r18>
    2a96:	92 bd       	out	0x22, r25	; 34
    2a98:	81 bd       	out	0x21, r24	; 33
    2a9a:	f8 9a       	sbi	0x1f, 0	; 31
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	00 b4       	in	r0, 0x20	; 32
    2aa0:	02 16       	cp	r0, r18
    2aa2:	39 f0       	breq	.+14     	; 0x2ab2 <eeprom_update_r18+0x20>
    2aa4:	1f ba       	out	0x1f, r1	; 31
    2aa6:	20 bd       	out	0x20, r18	; 32
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	fa 9a       	sbi	0x1f, 2	; 31
    2aae:	f9 9a       	sbi	0x1f, 1	; 31
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	08 95       	ret

00002ab4 <__prologue_saves__>:
    2ab4:	2f 92       	push	r2
    2ab6:	3f 92       	push	r3
    2ab8:	4f 92       	push	r4
    2aba:	5f 92       	push	r5
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	8f 92       	push	r8
    2ac2:	9f 92       	push	r9
    2ac4:	af 92       	push	r10
    2ac6:	bf 92       	push	r11
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	ca 1b       	sub	r28, r26
    2ade:	db 0b       	sbc	r29, r27
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	09 94       	ijmp

00002aec <__epilogue_restores__>:
    2aec:	2a 88       	ldd	r2, Y+18	; 0x12
    2aee:	39 88       	ldd	r3, Y+17	; 0x11
    2af0:	48 88       	ldd	r4, Y+16	; 0x10
    2af2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2afa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2afc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2afe:	b9 84       	ldd	r11, Y+9	; 0x09
    2b00:	c8 84       	ldd	r12, Y+8	; 0x08
    2b02:	df 80       	ldd	r13, Y+7	; 0x07
    2b04:	ee 80       	ldd	r14, Y+6	; 0x06
    2b06:	fd 80       	ldd	r15, Y+5	; 0x05
    2b08:	0c 81       	ldd	r16, Y+4	; 0x04
    2b0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b10:	ce 0f       	add	r28, r30
    2b12:	d1 1d       	adc	r29, r1
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	ed 01       	movw	r28, r26
    2b20:	08 95       	ret

00002b22 <_exit>:
    2b22:	f8 94       	cli

00002b24 <__stop_program>:
    2b24:	ff cf       	rjmp	.-2      	; 0x2b24 <__stop_program>
